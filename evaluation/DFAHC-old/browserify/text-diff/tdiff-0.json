Comparando os arquivos HC\0.js e HC\ORIGINAL.JS
***** HC\0.js
   37:      self._options = opts;
   38:      opts.dedupe = opts.dedupe === false ? false : true;
***** HC\ORIGINAL.JS
   37:      self._options = opts;
   38:      if (opts.noparse)
   39:          opts.noParse = opts.noparse;
   40:      if (opts.basedir !== undefined && typeof opts.basedir !== 'string') {
   41:          throw new Error('opts.basedir must be either undefined or a string.');
   42:      }
   43:      opts.dedupe = opts.dedupe === false ? false : true;
*****

***** HC\0.js
   42:      self._expose = {};
   43:      self._pending = 0;
***** HC\ORIGINAL.JS
   47:      self._expose = {};
   48:      self._hashes = {};
   49:      self._pending = 0;
*****

***** HC\0.js
   47:      self._entryOrder = 0;
   48:      self._bresolve = opts.browserField === false ? function (id, opts, cb) {
***** HC\ORIGINAL.JS
   53:      self._entryOrder = 0;
   54:      self._ticked = false;
   55:      self._bresolve = opts.browserField === false ? function (id, opts, cb) {
*****

***** HC\0.js
   55:      self._filterTransform = function (tr) {
   56:          return ignoreTransform.indexOf(tr) === -1;
***** HC\ORIGINAL.JS
   62:      self._filterTransform = function (tr) {
   63:          if (isArray(tr)) {
   64:              return ignoreTransform.indexOf(tr[0]) === -1;
   65:          }
   66:          return ignoreTransform.indexOf(tr) === -1;
*****

***** HC\0.js
   62:      [].concat(opts.entries).filter(Boolean).forEach(function (file) {
   63:          self.add(file);
   64:      });
***** HC\ORIGINAL.JS
   72:      [].concat(opts.entries).filter(Boolean).forEach(function (file) {
   73:          self.add(file, { basedir: opts.basedir });
   74:      });
   75:      [].concat(opts.require).filter(Boolean).forEach(function (file) {
   76:          self.require(file, { basedir: opts.basedir });
   77:      });
   78:      [].concat(opts.plugin).filter(Boolean).forEach(function (p) {
   79:          self.plugin(p, { basedir: opts.basedir });
   80:      });
*****

***** HC\0.js
   74:          });
   75:      }
***** HC\ORIGINAL.JS
   90:          });
   91:          return this;
   92:      }
*****

***** HC\0.js
   81:          expose = '/' + relativePath(basedir, expose);
   82:      }
***** HC\ORIGINAL.JS
   98:          expose = '/' + relativePath(basedir, expose);
   99:          expose = expose.replace(/\\/g, '/');
  100:      }
  101:      if (expose === undefined && this._options.exposeAll) {
  102:          expose = true;
  103:      }
*****

***** HC\0.js
   84:          expose = '/' + relativePath(basedir, file);
   85:      }
***** HC\ORIGINAL.JS
  105:          expose = '/' + relativePath(basedir, file);
  106:          expose = expose.replace(/\\/g, '/');
  107:      }
*****

***** HC\0.js
   90:              var filename = opts.file || file.file || path.join(basedir, '_stream_' + order + '.js');
   91:              var rec = {
   92:                  source: buf.toString(),
   93:                  file: filename
   94:              };
   95:              self.pipeline.write(rec);
***** HC\ORIGINAL.JS
  112:              var filename = opts.file || file.file || path.join(basedir, '_stream_' + order + '.js');
  113:              var id = file.id || expose || filename;
  114:              if (expose || opts.entry === false) {
  115:                  self._expose[id] = filename;
  116:              }
  117:              if (!opts.entry && self._options.exports === undefined) {
  118:                  self._bpack.hasExports = true;
  119:              }
  120:              var rec = {
  121:                  source: buf.toString('utf8'),
  122:                  entry: defined(opts.entry, false),
  123:                  file: filename,
  124:                  id: id
  125:              };
  126:              if (rec.entry)
  127:                  rec.order = order;
  128:              if (rec.transform === false)
  129:                  rec.transform = false;
  130:              self.pipeline.write(rec);
*****

***** HC\0.js
  100:      }
  101:      if (typeof file === 'object') {
  102:      } else if (!opts.entry && isExternalModule(file)) {
***** HC\ORIGINAL.JS
  135:      }
  136:      var row;
  137:      if (typeof file === 'object') {
  138:          row = xtend(file, opts);
  139:      } else if (!opts.entry && isExternalModule(file)) {
*****

***** HC\0.js
  103:          // external module or builtin
  104:          row = xtend(opts, { file: file });
  105:      } else {
***** HC\ORIGINAL.JS
  140:          // external module or builtin
  141:          row = xtend(opts, {
  142:              id: expose || file,
  143:              file: file
  144:          });
  145:      } else {
*****

***** HC\0.js
  115:      }
  116:      if (row.entry === undefined)
***** HC\ORIGINAL.JS
  155:      }
  156:      if (opts.external)
  157:          return self.external(file, opts);
  158:      if (row.entry === undefined)
*****

***** HC\0.js
  122:          row.order = self._entryOrder++;
  123:      self.pipeline.write(row);
***** HC\ORIGINAL.JS
  164:          row.order = self._entryOrder++;
  165:      if (opts.transform === false)
  166:          row.transform = false;
  167:      self.pipeline.write(row);
*****

***** HC\0.js
  126:  Browserify.prototype.add = function (file, opts) {
  127:      return this.require(file, xtend({ entry: true }, opts));
  128:  };
  129:  Browserify.prototype.external = function (file, opts) {
  130:      var self = this;
  131:      if (isArray(file)) {
  132:          file.forEach(function (f) {
  133:              if (typeof f === 'object') {
  134:              } else
  135:                  self.external(f, opts);
  136:          });
***** HC\ORIGINAL.JS
  170:  Browserify.prototype.add = function (file, opts) {
  171:      var self = this;
  172:      if (!opts)
  173:          opts = {};
  174:      if (isArray(file)) {
  175:          file.forEach(function (x) {
  176:              self.add(x, opts);
  177:          });
*****

***** HC\0.js
  138:      }
  139:      if (file && typeof file === 'object' && typeof file.bundle === 'function') {
***** HC\ORIGINAL.JS
  179:      }
  180:      return this.require(file, xtend({
  181:          entry: true,
  182:          expose: false
  183:      }, opts));
  184:  };
  185:  Browserify.prototype.external = function (file, opts) {
  186:      var self = this;
  187:      if (isArray(file)) {
  188:          file.forEach(function (f) {
  189:              if (typeof f === 'object') {
  190:                  self.external(f, xtend(opts, f));
  191:              } else
  192:                  self.external(f, opts);
  193:          });
  194:          return this;
  195:      }
  196:      if (file && typeof file === 'object' && typeof file.bundle === 'function') {
*****

***** HC\0.js
  141:          self._pending++;
  142:          var bdeps;
  143:          var blabels = {};
***** HC\ORIGINAL.JS
  198:          self._pending++;
  199:          var bdeps = {};
  200:          var blabels = {};
*****

***** HC\0.js
  168:              if (--self._pending === 0)
  169:                  self.emit();
  170:          });
***** HC\ORIGINAL.JS
  225:              if (--self._pending === 0)
  226:                  self.emit('_ready');
  227:          });
*****

***** HC\0.js
  183:      var basedir = defined(opts.basedir, process.cwd());
  184:      this._exclude.push('/' + relativePath(basedir, file));
  185:  };
***** HC\ORIGINAL.JS
  240:      var basedir = defined(opts.basedir, process.cwd());
  241:      this._exclude.push(file);
  242:      this._exclude.push('/' + relativePath(basedir, file));
  243:      return this;
  244:  };
*****

***** HC\0.js
  195:      }
  196:  };
***** HC\ORIGINAL.JS
  254:      }
  255:      return this;
  256:  };
*****

***** HC\0.js
  208:      }
  209:      function resolved() {
***** HC\ORIGINAL.JS
  268:      }
  269:      //if the bundler is ignoring this transform
  270:      if (typeof tr === 'string' && !self._filterTransform(tr)) {
  271:          return this;
  272:      }
  273:      function resolved() {
*****

***** HC\0.js
  222:          opts = {};
  223:      var basedir = defined(opts.basedir, this._options.basedir, process.cwd());
***** HC\ORIGINAL.JS
  286:          opts = {};
  287:      opts._flags = '_flags' in opts ? opts._flags : self._options;
  288:      var basedir = defined(opts.basedir, this._options.basedir, process.cwd());
*****

***** HC\0.js
  232:      if (typeof tr === 'string') {
  233:          var topts = { basedir: basedir };
  234:          resolve(tr, topts, function (err, res) {
  235:              rec.transform = res;
***** HC\ORIGINAL.JS
  297:      if (typeof tr === 'string') {
  298:          var topts = {
  299:              basedir: basedir,
  300:              paths: (self._options.paths || []).map(function (p) {
  301:                  return path.resolve(basedir, p);
  302:              })
  303:          };
  304:          resolve(tr, topts, function (err, res) {
  305:              if (err)
  306:                  return self.emit('error', err);
  307:              rec.transform = res;
*****

***** HC\0.js
  239:          process.nextTick(resolved);
  240:  };
***** HC\ORIGINAL.JS
  311:          process.nextTick(resolved);
  312:      return this;
  313:  };
*****

***** HC\0.js
  241:  Browserify.prototype.plugin = function (p, opts) {
  242:      if (!opts)
***** HC\ORIGINAL.JS
  314:  Browserify.prototype.plugin = function (p, opts) {
  315:      if (isArray(p)) {
  316:          opts = p[1];
  317:          p = p[0];
  318:      }
  319:      if (!opts)
*****

***** HC\0.js
  243:          opts = {};
  244:      var basedir = defined(opts.basedir, this._options.basedir);
  245:      if (typeof p === 'function') {
***** HC\ORIGINAL.JS
  320:          opts = {};
  321:      var basedir = defined(opts.basedir, this._options.basedir, process.cwd());
  322:      if (typeof p === 'function') {
*****

***** HC\0.js
  249:          var f = require(pfile);
  250:          f(this, opts);
***** HC\ORIGINAL.JS
  326:          var f = require(pfile);
  327:          if (typeof f !== 'function') {
  328:              throw new Error('plugin ' + p + ' should export a function');
  329:          }
  330:          f(this, opts);
*****

***** HC\0.js
  251:      }
  252:  };
***** HC\ORIGINAL.JS
  331:      }
  332:      return this;
  333:  };
*****

***** HC\0.js
  258:      this._mdeps.on('file', function (file, id) {
  259:          self.emit('file', file, id);
***** HC\ORIGINAL.JS
  339:      this._mdeps.on('file', function (file, id) {
  340:          pipeline.emit('file', file, id);
  341:          self.emit('file', file, id);
*****

***** HC\0.js
  261:      this._mdeps.on('package', function (pkg) {
  262:          self.emit('package', pkg);
***** HC\ORIGINAL.JS
  343:      this._mdeps.on('package', function (pkg) {
  344:          pipeline.emit('package', pkg);
  345:          self.emit('package', pkg);
*****

***** HC\0.js
  263:      });
  264:      var dopts = {
***** HC\ORIGINAL.JS
  346:      });
  347:      this._mdeps.on('transform', function (tr, file) {
  348:          pipeline.emit('transform', tr, file);
  349:          self.emit('transform', tr, file);
  350:      });
  351:      var dopts = {
*****

***** HC\0.js
  274:          [this._mdeps],
  275:          [this._json()],
  276:          [this._syntax()],
  277:          [depsSort(dopts)],
  278:          [this._dedupe()],
***** HC\ORIGINAL.JS
  361:          [this._mdeps],
  362:          'json',
  363:          [this._json()],
  364:          'unbom',
  365:          [this._unbom()],
  366:          'unshebang',
  367:          [this._unshebang()],
  368:          'syntax',
  369:          [this._syntax()],
  370:          'sort',
  371:          [depsSort(dopts)],
  372:          'dedupe',
  373:          [this._dedupe()],
*****

***** HC\0.js
  280:          [this._label(opts)],
  281:          [this._emitDeps()],
  282:          [this._debug(opts)],
***** HC\ORIGINAL.JS
  375:          [this._label(opts)],
  376:          'emit-deps',
  377:          [this._emitDeps()],
  378:          'debug',
  379:          [this._debug(opts)],
*****

***** HC\0.js
  290:          pipeline.get('deps').push(through.obj(function (row, enc, next) {
  291:              if (isAbsolutePath(row.id)) {
***** HC\ORIGINAL.JS
  387:          pipeline.get('deps').push(through.obj(function (row, enc, next) {
  388:              if (self._external.indexOf(row.id) >= 0)
  389:                  return next();
  390:              if (self._external.indexOf(row.file) >= 0)
  391:                  return next();
  392:              if (isAbsolutePath(row.id)) {
*****

***** HC\0.js
  320:      mopts.postFilter = function (id, file, pkg) {
  321:          if (self._external.indexOf(file) >= 0)
  322:              return;
  323:          if (self._exclude.indexOf(file) >= 0)
  324:              return;
  325:          return true;
***** HC\ORIGINAL.JS
  421:      mopts.postFilter = function (id, file, pkg) {
  422:          if (opts.postFilter && !opts.postFilter(id, file, pkg))
  423:              return false;
  424:          if (self._external.indexOf(file) >= 0)
  425:              return false;
  426:          if (self._exclude.indexOf(file) >= 0)
  427:              return false;
  428:          //filter transforms on module dependencies
  429:          if (pkg && pkg.browserify && pkg.browserify.transform) {
  430:              //In edge cases it may be a string
  431:              pkg.browserify.transform = [].concat(pkg.browserify.transform).filter(Boolean).filter(self._filterTransform);
  432:          }
  433:          return true;
*****

***** HC\0.js
  327:      mopts.filter = function (id) {
  328:          if (self._external.indexOf(id) >= 0)
  329:              return;
  330:          if (self._exclude.indexOf(id) >= 0)
  331:              return;
  332:          if (opts.bundleExternal === false && isExternalModule(id)) {
  333:              return;
  334:          }
***** HC\ORIGINAL.JS
  435:      mopts.filter = function (id) {
  436:          if (opts.filter && !opts.filter(id))
  437:              return false;
  438:          if (self._external.indexOf(id) >= 0)
  439:              return false;
  440:          if (self._exclude.indexOf(id) >= 0)
  441:              return false;
  442:          if (opts.bundleExternal === false && isExternalModule(id)) {
  443:              return false;
  444:          }
*****

***** HC\0.js
  338:          if (self._ignore.indexOf(id) >= 0)
  339:              return cb(null, paths.empty);
  340:          self._bresolve(id, parent, function (err, file, pkg) {
***** HC\ORIGINAL.JS
  448:          if (self._ignore.indexOf(id) >= 0)
  449:              return cb(null, paths.empty, {});
  450:          self._bresolve(id, parent, function (err, file, pkg) {
*****

***** HC\0.js
  341:              if (file && self._ignore.indexOf(file) >= 0) {
  342:                  return cb(null, paths.empty);
  343:              }
  344:              if (file) {
  345:                  var ex = '/' + relativePath(basedir, file);
  346:                  if (self._external.indexOf(ex) >= 0) {
  347:                  }
  348:                  if (self._exclude.indexOf(ex) >= 0) {
  349:                      return cb(null, ex);
  350:                  }
***** HC\ORIGINAL.JS
  451:              if (file && self._ignore.indexOf(file) >= 0) {
  452:                  return cb(null, paths.empty, {});
  453:              }
  454:              if (file && self._ignore.length) {
  455:                  var nm = file.split('/node_modules/')[1];
  456:                  if (nm) {
  457:                      nm = nm.split('/')[0];
  458:                      if (self._ignore.indexOf(nm) >= 0) {
  459:                          return cb(null, paths.empty, {});
  460:                      }
  461:                  }
*****

***** HC\0.js
  351:              }
  352:              if (err)
***** HC\ORIGINAL.JS
  462:              }
  463:              if (file) {
  464:                  var ex = '/' + relativePath(basedir, file);
  465:                  if (self._external.indexOf(ex) >= 0) {
  466:                      return cb(null, ex);
  467:                  }
  468:                  if (self._exclude.indexOf(ex) >= 0) {
  469:                      return cb(null, ex);
  470:                  }
  471:                  if (self._ignore.indexOf(ex) >= 0) {
  472:                      return cb(null, paths.empty, {});
  473:                  }
  474:              }
  475:              if (err)
*****

***** HC\0.js
  357:                  });
  358:          });
***** HC\ORIGINAL.JS
  480:                  });
  481:              else
  482:                  cb(err, null, pkg);
  483:          });
*****

***** HC\0.js
  361:          mopts.modules = {};
  362:      } else if (opts.builtins && isArray(opts.builtins)) {
***** HC\ORIGINAL.JS
  486:          mopts.modules = {};
  487:          self._exclude.push.apply(self._exclude, Object.keys(builtins));
  488:      } else if (opts.builtins && isArray(opts.builtins)) {
*****

***** HC\0.js
  363:          mopts.modules = {};
  364:      } else if (opts.builtins && typeof opts.builtins === 'object') {
***** HC\ORIGINAL.JS
  489:          mopts.modules = {};
  490:          opts.builtins.forEach(function (key) {
  491:              mopts.modules[key] = builtins[key];
  492:          });
  493:      } else if (opts.builtins && typeof opts.builtins === 'object') {
*****

***** HC\0.js
  371:      });
  372:      if (!this._bundled) {
***** HC\ORIGINAL.JS
  500:      });
  501:      mopts.globalTransform = [];
  502:      if (!this._bundled) {
*****

***** HC\0.js
  375:                  transform: globalTr,
  376:                  global: true
  377:              });
***** HC\ORIGINAL.JS
  505:                  transform: globalTr,
  506:                  global: true,
  507:                  options: {}
  508:              });
*****

***** HC\0.js
  386:      function globalTr(file) {
  387:          if (absno.indexOf(file) >= 0)
***** HC\ORIGINAL.JS
  517:      function globalTr(file) {
  518:          if (opts.detectGlobals === false)
  519:              return through();
  520:          if (opts.noParse === true)
  521:              return through();
  522:          if (no.indexOf(file) >= 0)
  523:              return through();
  524:          if (absno.indexOf(file) >= 0)
*****

***** HC\0.js
  398:          }
  399:          var vars = xtend(opts.insertGlobalVars);
  400:          if (opts.bundleExternal === false) {
***** HC\ORIGINAL.JS
  535:          }
  536:          var vars = xtend({
  537:              process: function () {
  538:                  return "require('_process')";
  539:              }
  540:          }, opts.insertGlobalVars);
  541:          if (opts.bundleExternal === false) {
*****

***** HC\0.js
  401:              vars.process = undefined;
  402:          }
***** HC\ORIGINAL.JS
  542:              vars.process = undefined;
  543:              vars.buffer = undefined;
  544:          }
*****

***** HC\0.js
  403:          return insertGlobals(file, xtend(opts, {
  404:              basedir: opts.commondir === false ? '/' : opts.basedir || process.cwd(),
***** HC\ORIGINAL.JS
  545:          return insertGlobals(file, xtend(opts, {
  546:              debug: opts.debug,
  547:              always: opts.insertGlobals,
  548:              basedir: opts.commondir === false ? '/' : opts.basedir || process.cwd(),
*****

***** HC\0.js
  411:      var self = this;
  412:      this._recorded = [];
***** HC\ORIGINAL.JS
  555:      var self = this;
  556:      var ended = false;
  557:      this._recorded = [];
*****

***** HC\0.js
  418:              });
  419:          });
***** HC\ORIGINAL.JS
  563:              });
  564:              if (ended)
  565:                  stream.push(null);
  566:          });
*****

***** HC\0.js
  429:      function end() {
  430:          if (self._ticked)
***** HC\ORIGINAL.JS
  576:      function end() {
  577:          ended = true;
  578:          if (self._ticked)
*****

***** HC\0.js
  442:  };
  443:  Browserify.prototype._syntax = function () {
  444:      var self = this;
  445:      return through.obj(function (row, enc, next) {
  446:          var h = shasum(row.source);
  447:          if (typeof self._syntaxCache[h] === 'undefined') {
  448:              var err = syntaxError(row.source, row.file || row.id);
  449:              if (err)
  450:                  return this.emit('error', err);
  451:              self._syntaxCache[h] = true;
  452:          }
***** HC\ORIGINAL.JS
  590:  };
  591:  Browserify.prototype._unbom = function () {
  592:      return through.obj(function (row, enc, next) {
  593:          if (/^\ufeff/.test(row.source)) {
  594:              row.source = row.source.replace(/^\ufeff/, '');
  595:          }
*****

***** HC\0.js
  456:  };
  457:  Browserify.prototype._dedupe = function () {
  458:      return through.obj(function (row, enc, next) {
  459:          if (!row.dedupeIndex && row.dedupe) {
  460:              row.source = 'arguments[4][' + JSON.stringify(row.dedupe) + '][0].apply(exports,arguments)';
  461:          } else if (row.dedupeIndex) {
  462:              row.source = 'arguments[4][' + JSON.stringify(row.dedupeIndex) + '][0].apply(exports,arguments)';
  463:              row.nomap = true;
  464:          }
  465:          if (row.dedupeIndex && row.indexDeps) {
  466:              row.indexDeps.dup = row.dedupeIndex;
  467:          }
***** HC\ORIGINAL.JS
  599:  };
  600:  Browserify.prototype._unshebang = function () {
  601:      return through.obj(function (row, enc, next) {
  602:          if (/^#!/.test(row.source)) {
  603:              row.source = row.source.replace(/^#![^\n]*\n/, '');
  604:          }
*****

***** HC\0.js
  471:  };
  472:  Browserify.prototype._label = function (opts) {
  473:      var self = this;
  474:      var basedir = defined(opts.basedir, process.cwd());
  475:      return through.obj(function (row, enc, next) {
  476:          var prev = row.id;
  477:          if (row.index)
  478:              row.id = row.index;
  479:          self.emit('label', prev, row.id);
  480:          if (row.indexDeps)
  481:              row.deps = row.indexDeps || {};
  482:          Object.keys(row.deps).forEach(function (key) {
  483:              if (self._expose[key]) {
  484:                  row.deps[key] = key;
  485:              }
  486:              var afile = path.resolve(path.dirname(row.file), key);
  487:              var rfile = '/' + relativePath(basedir, afile);
  488:              if (self._external.indexOf(afile) >= 0) {
  489:                  row.deps[key] = rfile;
  490:              }
  491:              for (var i = 0; i < self._extensions.length; i++) {
  492:                  var ex = self._extensions[i];
  493:                  if (self._external.indexOf(rfile + ex) >= 0) {
  494:                      row.deps[key] = rfile + ex;
  495:                      break;
  496:                  }
  497:              }
  498:          });
  499:          if (row.entry || row.expose) {
  500:              self._bpack.standaloneModule = row.id;
  501:          }
***** HC\ORIGINAL.JS
  608:  };
  609:  Browserify.prototype._syntax = function () {
  610:      var self = this;
  611:      return through.obj(function (row, enc, next) {
  612:          var h = shasum(row.source);
  613:          if (typeof self._syntaxCache[h] === 'undefined') {
  614:              var err = syntaxError(row.source, row.file || row.id);
  615:              if (err)
  616:                  return this.emit('error', err);
  617:              self._syntaxCache[h] = true;
  618:          }
*****

***** HC\0.js
  505:  };
  506:  Browserify.prototype._emitDeps = function () {
  507:      var self = this;
  508:      return through.obj(function (row, enc, next) {
  509:          self.emit('dep', row);
  510:          this.push(row);
***** HC\ORIGINAL.JS
  622:  };
  623:  Browserify.prototype._dedupe = function () {
  624:      return through.obj(function (row, enc, next) {
  625:          if (!row.dedupeIndex && row.dedupe) {
  626:              row.source = 'arguments[4][' + JSON.stringify(row.dedupe) + '][0].apply(exports,arguments)';
  627:              row.nomap = true;
  628:          } else if (row.dedupeIndex) {
  629:              row.source = 'arguments[4][' + JSON.stringify(row.dedupeIndex) + '][0].apply(exports,arguments)';
  630:              row.nomap = true;
  631:          }
  632:          if (row.dedupeIndex && row.indexDeps) {
  633:              row.indexDeps.dup = row.dedupeIndex;
  634:          }
  635:          this.push(row);
*****

***** HC\0.js
  513:  };
  514:  Browserify.prototype._debug = function (opts) {
  515:      var basedir = defined(opts.basedir, process.cwd());
***** HC\ORIGINAL.JS
  638:  };
  639:  Browserify.prototype._label = function (opts) {
  640:      var self = this;
  641:      var basedir = defined(opts.basedir, process.cwd());
*****

***** HC\0.js
  516:      return through.obj(function (row, enc, next) {
  517:          if (opts.debug) {
  518:              row.sourceFile = relativePath(basedir, row.file).replace();
  519:          }
***** HC\ORIGINAL.JS
  642:      return through.obj(function (row, enc, next) {
  643:          var prev = row.id;
  644:          if (self._external.indexOf(row.id) >= 0)
  645:              return next();
  646:          if (self._external.indexOf('/' + relativePath(basedir, row.id)) >= 0) {
  647:              return next();
  648:          }
  649:          if (self._external.indexOf(row.file) >= 0)
  650:              return next();
  651:          if (row.index)
  652:              row.id = row.index;
  653:          self.emit('label', prev, row.id);
  654:          if (row.indexDeps)
  655:              row.deps = row.indexDeps || {};
  656:          Object.keys(row.deps).forEach(function (key) {
  657:              if (self._expose[key]) {
  658:                  row.deps[key] = key;
  659:                  return;
  660:              }
  661:              var afile = path.resolve(path.dirname(row.file), key);
  662:              var rfile = '/' + relativePath(basedir, afile);
  663:              if (self._external.indexOf(rfile) >= 0) {
  664:                  row.deps[key] = rfile;
  665:              }
  666:              if (self._external.indexOf(afile) >= 0) {
  667:                  row.deps[key] = rfile;
  668:              }
  669:              if (self._external.indexOf(key) >= 0) {
  670:                  row.deps[key] = key;
  671:                  return;
  672:              }
  673:              for (var i = 0; i < self._extensions.length; i++) {
  674:                  var ex = self._extensions[i];
  675:                  if (self._external.indexOf(rfile + ex) >= 0) {
  676:                      row.deps[key] = rfile + ex;
  677:                      break;
  678:                  }
  679:              }
  680:          });
  681:          if (row.entry || row.expose) {
  682:              self._bpack.standaloneModule = row.id;
  683:          }
*****

***** HC\0.js
  523:  };
  524:  Browserify.prototype.reset = function (opts) {
  525:      var hadExports = this._bpack.hasExports;
  526:      this.pipeline = this._createPipeline();
  527:      this._bpack.hasExports = hadExports;
  528:  };
***** HC\ORIGINAL.JS
  687:  };
  688:  Browserify.prototype._emitDeps = function () {
  689:      var self = this;
  690:      return through.obj(function (row, enc, next) {
  691:          self.emit('dep', row);
  692:          this.push(row);
  693:          next();
  694:      });
  695:  };
  696:  Browserify.prototype._debug = function (opts) {
  697:      var basedir = defined(opts.basedir, process.cwd());
  698:      return through.obj(function (row, enc, next) {
  699:          if (opts.debug) {
  700:              row.sourceRoot = 'file://localhost';
  701:              row.sourceFile = relativePath(basedir, row.file).replace(/\\/g, '/');
  702:          }
  703:          this.push(row);
  704:          next();
  705:      });
  706:  };
  707:  Browserify.prototype.reset = function (opts) {
  708:      if (!opts)
  709:          opts = {};
  710:      var hadExports = this._bpack.hasExports;
  711:      this.pipeline = this._createPipeline(xtend(opts, this._options));
  712:      this._bpack.hasExports = hadExports;
  713:      this._entryOrder = 0;
  714:      this._bundled = false;
  715:      this.emit('reset');
  716:  };
*****

***** HC\0.js
  530:      var self = this;
  531:      if (this._bundled) {
***** HC\ORIGINAL.JS
  718:      var self = this;
  719:      if (cb && typeof cb === 'object') {
  720:          throw new Error('bundle() no longer accepts option arguments.\n' + 'Move all option arguments to the browserify() const
  721:  ructor.');
  722:      }
  723:      if (this._bundled) {
*****

