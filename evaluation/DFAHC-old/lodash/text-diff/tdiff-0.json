Comparando os arquivos HC\0.js e HC\ORIGINAL.JS
***** HC\0.js
  117:  g] = true;
  118:      /** Used to identify `toStringTag` values supported by `_.clone`. */
***** HC\ORIGINAL.JS
  117:  g] = true;
  118:      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayT
  119:  ags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedA
  120:  rrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTa
  121:  g] = false;
  122:      /** Used to identify `toStringTag` values supported by `_.clone`. */
*****

***** HC\0.js
  123:  neableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  124:      /** Used to map latin-1 supplementary letters to basic latin letters. */
***** HC\ORIGINAL.JS
  127:  neableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  128:      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[mapTag] = cloneableTags[setTag] = cloneableTags[weakMapTag
  129:  ] = false;
  130:      /** Used to map latin-1 supplementary letters to basic latin letters. */
*****

***** HC\0.js
  258:      /** Detect free variable `self`. */
  259:      var freeSelf;
  260:      /** Detect free variable `window`. */
  261:      var freeWindow;
  262:      /** Detect the popular CommonJS extension `module.exports`. */
***** HC\ORIGINAL.JS
  264:      /** Detect free variable `self`. */
  265:      var freeSelf = checkGlobal(objectTypes[typeof self] && self);
  266:      /** Detect free variable `window`. */
  267:      var freeWindow = checkGlobal(objectTypes[typeof window] && window);
  268:      /** Detect the popular CommonJS extension `module.exports`. */
*****

***** HC\0.js
  264:      /** Detect `this` as the global object. */
  265:      var thisGlobal;
  266:      /**
***** HC\ORIGINAL.JS
  270:      /** Detect `this` as the global object. */
  271:      var thisGlobal = checkGlobal(objectTypes[typeof this] && this);
  272:      /**
*****

***** HC\0.js
  376:      function checkGlobal(value) {
  377:      }
***** HC\ORIGINAL.JS
  382:      function checkGlobal(value) {
  383:          return value && value.Object === Object ? value : null;
  384:      }
*****

***** HC\0.js
  493:      function isHostObject(value) {
  494:      }
***** HC\ORIGINAL.JS
  500:      function isHostObject(value) {
  501:          // Many host objects are `Object` objects that can coerce to strings
  502:          // despite having improperly defined `toString` methods.
  503:          var result = false;
  504:          if (value != null && typeof value.toString != 'function') {
  505:              try {
  506:                  result = !!(value + '');
  507:              } catch (e) {
  508:              }
  509:          }
  510:          return result;
  511:      }
*****

***** HC\0.js
  546:      function sortedUniq(array, iteratee) {
  547:      }
***** HC\ORIGINAL.JS
  563:      function sortedUniq(array, iteratee) {
  564:          var seen, index = -1, length = array.length, resIndex = -1, result = [];
  565:          while (++index < length) {
  566:              var value = array[index], computed = iteratee ? iteratee(value, index, array) : value;
  567:              if (!index || seen !== computed) {
  568:                  seen = computed;
  569:                  result[++resIndex] = value;
  570:              }
  571:          }
  572:          return result;
  573:      }
*****

***** HC\0.js
  870:              this.__dir__ = 1;
  871:              this.__iteratees__ = [];
***** HC\ORIGINAL.JS
  896:              this.__dir__ = 1;
  897:              this.__filtered__ = false;
  898:              this.__iteratees__ = [];
*****

***** HC\0.js
 1054:          function cachePush(value) {
 1055:          }
***** HC\ORIGINAL.JS
 1081:          function cachePush(value) {
 1082:              var data = this.data;
 1083:              if (typeof value == 'string' || isObject(value)) {
 1084:                  data.set.add(value);
 1085:              } else {
 1086:                  data.hash[value] = true;
 1087:              }
 1088:          }
*****

***** HC\0.js
 1148:              }
 1149:              while (++index < length) {
 1150:              }
***** HC\ORIGINAL.JS
 1181:              }
 1182:              index = result === exValue ? -1 : index;
 1183:              while (++index < length) {
 1184:                  value = array[index];
 1185:                  if (+iteratee(value) === exValue) {
 1186:                      return value;
 1187:                  }
 1188:              }
*****

***** HC\0.js
 1414:                      var result = new object();
 1415:                  }
***** HC\ORIGINAL.JS
 1452:                      var result = new object();
 1453:                      object.prototype = undefined;
 1454:                  }
*****

***** HC\0.js
 1448:              if (!length) {
 1449:              }
***** HC\ORIGINAL.JS
 1487:              if (!length) {
 1488:                  return result;
 1489:              }
*****

***** HC\0.js
 1460:                      if (isCommon && value === value) {
 1461:                      } else if (indexOf(values, value, 0) < 0) {
***** HC\ORIGINAL.JS
 1500:                      if (isCommon && value === value) {
 1501:                          var valuesIndex = valuesLength;
 1502:                          while (valuesIndex--) {
 1503:                              if (values[valuesIndex] === value) {
 1504:                                  continue outer;
 1505:                              }
 1506:                          }
 1507:                          result.push(value);
 1508:                      } else if (indexOf(values, value, 0) < 0) {
*****

***** HC\0.js
 1521:              length = start > end ? 0 : end >>> 0;
 1522:              while (start < length) {
***** HC\ORIGINAL.JS
 1568:              length = start > end ? 0 : end >>> 0;
 1569:              start >>>= 0;
 1570:              while (start < length) {
*****

***** HC\0.js
 1538:                  if (predicate(value, index, collection)) {
 1539:                  }
***** HC\ORIGINAL.JS
 1586:                  if (predicate(value, index, collection)) {
 1587:                      result.push(value);
 1588:                  }
*****

***** HC\0.js
 1581:                      if (isDeep) {
 1582:                      } else {
***** HC\ORIGINAL.JS
 1630:                      if (isDeep) {
 1631:                          // Recursively flatten arrays (susceptible to call stack limits).
 1632:                          baseFlatten(value, isDeep, isStrict, result);
 1633:                      } else {
*****

***** HC\0.js
 1742:          function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
 1743:              var objIsArr = isArray(object), othIsArr, objTag = arrayTag, othTag = arrayTag;
 1744:              if (!objIsArr) {
***** HC\ORIGINAL.JS
 1793:          function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
 1794:              var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
 1795:              if (!objIsArr) {
*****

***** HC\0.js
 1756:                  } else if (othTag != objectTag) {
 1757:                  }
***** HC\ORIGINAL.JS
 1807:                  } else if (othTag != objectTag) {
 1808:                      othIsArr = isTypedArray(other);
 1809:                  }
*****

***** HC\0.js
 1869:          if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
 1870:          }
***** HC\ORIGINAL.JS
 1921:          if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
 1922:              baseKeysIn = function (object) {
 1923:                  var data, iterator = enumerate(object), result = [];
 1924:                  while (!(data = iterator.next()).done) {
 1925:                      result.push(data.value);
 1926:                  }
 1927:                  return result;
 1928:              };
 1929:          }
*****

***** HC\0.js
 1896:                  var key = matchData[0][0], value = matchData[0][1];
 1897:                  return;
 1898:              }
***** HC\ORIGINAL.JS
 1955:                  var key = matchData[0][0], value = matchData[0][1];
 1956:                  return function (object) {
 1957:                      if (object == null) {
 1958:                          return false;
 1959:                      }
 1960:                      return object[key] === value && (value !== undefined || key in Object(object));
 1961:                  };
 1962:              }
*****

***** HC\0.js
 1981:                  } else {
 1982:                  }
***** HC\ORIGINAL.JS
 2045:                  } else {
 2046:                      isCommon = isFunction(srcValue);
 2047:                  }
*****

***** HC\0.js
 2177:              length = start > end ? 0 : end - start >>> 0;
 2178:              var result = Array(length);
***** HC\ORIGINAL.JS
 2242:              length = start > end ? 0 : end - start >>> 0;
 2243:              start >>>= 0;
 2244:              var result = Array(length);
*****

***** HC\0.js
 2258:              if (seen) {
 2259:              } else {
 2260:                  seen = iteratee ? [] : result;
***** HC\ORIGINAL.JS
 2324:              if (seen) {
 2325:                  indexOf = cacheIndexOf;
 2326:                  isCommon = false;
 2327:              } else {
 2328:                  isLarge = false;
 2329:                  seen = iteratee ? [] : result;
*****

***** HC\0.js
 2265:                      if (isCommon && value === value) {
 2266:                      } else if (indexOf(seen, computed, 0) < 0) {
 2267:                          if (iteratee || isLarge) {
 2268:                              seen.push(computed);
***** HC\ORIGINAL.JS
 2334:                      if (isCommon && value === value) {
 2335:                          var seenIndex = seen.length;
 2336:                          while (seenIndex--) {
 2337:                              if (seen[seenIndex] === computed) {
 2338:                                  continue outer;
 2339:                              }
 2340:                          }
 2341:                          if (iteratee) {
 2342:                              seen.push(computed);
*****

***** HC\0.js
 2270:                          result.push(value);
 2271:                      }
***** HC\ORIGINAL.JS
 2344:                          result.push(value);
 2345:                      } else if (indexOf(seen, computed, 0) < 0) {
 2346:                          if (iteratee || isLarge) {
 2347:                              seen.push(computed);
 2348:                          }
 2349:                          result.push(value);
 2350:                      }
*****

***** HC\0.js
 2345:              if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
 2346:              }
***** HC\ORIGINAL.JS
 2424:              if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
 2425:                  while (low < high) {
 2426:                      var mid = low + high >>> 1, computed = array[mid];
 2427:                      if ((retHighest ? computed <= value : computed < value) && computed !== null) {
 2428:                          low = mid + 1;
 2429:                      } else {
 2430:                          high = mid;
 2431:                      }
 2432:                  }
 2433:                  return high;
 2434:              }
*****

***** HC\0.js
 2374:                  } else if (computed == null) {
 2375:                  } else {
***** HC\ORIGINAL.JS
 2462:                  } else if (computed == null) {
 2463:                      setLow = false;
 2464:                  } else {
*****

***** HC\0.js
 2394:              var result = new ArrayBuffer(buffer.byteLength), view = new Uint8Array(result);
 2395:              return result;
***** HC\ORIGINAL.JS
 2483:              var result = new ArrayBuffer(buffer.byteLength), view = new Uint8Array(result);
 2484:              view.set(new Uint8Array(buffer));
 2485:              return result;
*****

***** HC\0.js
 2491:          function copyObjectWith(source, props, customizer, object) {
 2492:              var index = -1, length = props.length;
***** HC\ORIGINAL.JS
 2581:          function copyObjectWith(source, props, customizer, object) {
 2582:              object || (object = {});
 2583:              var index = -1, length = props.length;
*****

***** HC\0.js
 2538:                  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
 2539:                      length = 1;
***** HC\ORIGINAL.JS
 2629:                  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
 2630:                      customizer = length < 3 ? undefined : customizer;
 2631:                      length = 1;
*****

***** HC\0.js
 2561:                  if (collection == null) {
 2562:                  }
***** HC\ORIGINAL.JS
 2653:                  if (collection == null) {
 2654:                      return collection;
 2655:                  }
*****

***** HC\0.js
 2568:                      if (iteratee(iterable[index], index, iterable) === false) {
 2569:                      }
***** HC\ORIGINAL.JS
 2661:                      if (iteratee(iterable[index], index, iterable) === false) {
 2662:                          break;
 2663:                      }
*****

***** HC\0.js
 2618:          function createCache(values) {
 2619:          }
***** HC\ORIGINAL.JS
 2712:          function createCache(values) {
 2713:              return nativeCreate && Set ? new SetCache(values) : null;
 2714:          }
*****

***** HC\0.js
 2668:                  }
 2669:                  var thisBinding, result = Ctor.apply(thisBinding, args);
 2670:                  // Mimic the constructor's `return` behavior.
***** HC\ORIGINAL.JS
 2763:                  }
 2764:                  var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
 2765:                  // Mimic the constructor's `return` behavior.
*****

***** HC\0.js
 2760:                          bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
 2761:                          if (!isCurryBound) {
***** HC\ORIGINAL.JS
 2855:                          bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
 2856:                          bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
 2857:                          if (!isCurryBound) {
*****

***** HC\0.js
 2808:              var strLength = string.length;
 2809:              if (strLength >= length || !nativeIsFinite(length)) {
***** HC\ORIGINAL.JS
 2904:              var strLength = string.length;
 2905:              length = +length;
 2906:              if (strLength >= length || !nativeIsFinite(length)) {
*****

***** HC\0.js
 2898:              }
 2899:              if (bitmask & PARTIAL_RIGHT_FLAG) {
***** HC\ORIGINAL.JS
 2995:              }
 2996:              length -= holders ? holders.length : 0;
 2997:              if (bitmask & PARTIAL_RIGHT_FLAG) {
*****

***** HC\0.js
 3109:              var result = lodash.indexOf || indexOf;
 3110:              return collection ? result(collection, target, fromIndex) : result;
***** HC\ORIGINAL.JS
 3207:              var result = lodash.indexOf || indexOf;
 3208:              result = result === indexOf ? baseIndexOf : result;
 3209:              return collection ? result(collection, target, fromIndex) : result;
*****

***** HC\0.js
 3122:              var result = lodash.iteratee || iteratee;
 3123:              return arguments.length ? result(arguments[0]) : result;
***** HC\ORIGINAL.JS
 3221:              var result = lodash.iteratee || iteratee;
 3222:              result = result === iteratee ? baseIteratee : result;
 3223:              return arguments.length ? result(arguments[0]) : result;
*****

***** HC\0.js
 3145:              while (length--) {
 3146:              }
***** HC\ORIGINAL.JS
 3245:              while (length--) {
 3246:                  result[length][2] = isStrictComparable(result[length][1]);
 3247:              }
*****

***** HC\0.js
 3392:              if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
 3393:              }
***** HC\ORIGINAL.JS
 3493:              if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
 3494:                  return false;
 3495:              }
*****

***** HC\0.js
 3505:                  stackA.push(objValue);
 3506:                  baseMerge(objValue, srcValue, mergeDefaults, stackA, stackB);
***** HC\ORIGINAL.JS
 3607:                  stackA.push(objValue);
 3608:                  stackB.push(objValue);
 3609:                  baseMerge(objValue, srcValue, mergeDefaults, stackA, stackB);
*****

***** HC\0.js
 3554:              return function (key, value) {
 3555:                  var stamp, remaining = HOT_SPAN - (stamp - lastCalled);
 3556:                  if (remaining > 0) {
***** HC\ORIGINAL.JS
 3657:              return function (key, value) {
 3658:                  var stamp = now(), remaining = HOT_SPAN - (stamp - lastCalled);
 3659:                  lastCalled = stamp;
 3660:                  if (remaining > 0) {
*****

***** HC\0.js
 3557:                      if (++count >= HOT_COUNT) {
 3558:                      }
***** HC\ORIGINAL.JS
 3661:                      if (++count >= HOT_COUNT) {
 3662:                          return key;
 3663:                      }
*****

***** HC\0.js
 3559:                  } else {
 3560:                  }
***** HC\ORIGINAL.JS
 3664:                  } else {
 3665:                      count = 0;
 3666:                  }
*****

***** HC\0.js
 3862:              if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
 3863:              }
***** HC\ORIGINAL.JS
 3968:              if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
 3969:                  start = 0;
 3970:                  end = length;
 3971:              }
*****

***** HC\0.js
 3987:          function flattenDeep(array) {
 3988:          }
***** HC\ORIGINAL.JS
 4095:          function flattenDeep(array) {
 4096:              var length = array ? array.length : 0;
 4097:              return length ? baseFlatten(array, true) : [];
 4098:          }
*****

***** HC\0.js
 4068:                  var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
 4069:              }
***** HC\ORIGINAL.JS
 4178:                  var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
 4179:                  caches[othIndex] = isCommon && value.length >= 120 ? createCache(othIndex && value) : null;
 4180:              }
*****

***** HC\0.js
 4082:                          if (seen) {
 4083:                          }
***** HC\ORIGINAL.JS
 4193:                          if (seen) {
 4194:                              seen.push(value);
 4195:                          }
*****

***** HC\0.js
 4133:              if (!length) {
 4134:              }
***** HC\ORIGINAL.JS
 4245:              if (!length) {
 4246:                  return -1;
 4247:              }
*****

***** HC\0.js
 4139:              } else if (fromIndex) {
 4140:              }
***** HC\ORIGINAL.JS
 4252:              } else if (fromIndex) {
 4253:                  index = binaryIndex(array, value, true) - 1;
 4254:                  var other = array[index];
 4255:                  if (value === value ? value === other : other !== other) {
 4256:                      return index;
 4257:                  }
 4258:                  return -1;
 4259:              }
*****

***** HC\0.js
 4174:              if (!(array && array.length)) {
 4175:              }
***** HC\ORIGINAL.JS
 4293:              if (!(array && array.length)) {
 4294:                  return array;
 4295:              }
*****

***** HC\0.js
 4603:                  iteratee = isSorted;
 4604:              }
***** HC\ORIGINAL.JS
 4723:                  iteratee = isSorted;
 4724:                  isSorted = false;
 4725:              }
*****

***** HC\0.js
 5693:              if (collection == null) {
 5694:              }
***** HC\ORIGINAL.JS
 5814:              if (collection == null) {
 5815:                  return 0;
 5816:              }
*****

***** HC\0.js
 5815:              if (collection == null) {
 5816:              }
***** HC\ORIGINAL.JS
 5937:              if (collection == null) {
 5938:                  return [];
 5939:              }
*****

***** HC\0.js
 5871:                      var temp = n;
 5872:                      func = temp;
***** HC\ORIGINAL.JS
 5994:                      var temp = n;
 5995:                      n = func;
 5996:                      func = temp;
*****

***** HC\0.js
 5930:                  if (n <= 1) {
 5931:                  }
***** HC\ORIGINAL.JS
 6054:                  if (n <= 1) {
 6055:                      func = undefined;
 6056:                  }
*****

***** HC\0.js
 6060:                  var holders = replaceHolders(partials, bindKey.placeholder);
 6061:              }
***** HC\ORIGINAL.JS
 6185:                  var holders = replaceHolders(partials, bindKey.placeholder);
 6186:                  bitmask |= PARTIAL_FLAG;
 6187:              }
*****

***** HC\0.js
 6106:              var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
 6107:              return result;
***** HC\ORIGINAL.JS
 6232:              var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
 6233:              result.placeholder = curry.placeholder;
 6234:              return result;
*****

***** HC\0.js
 6148:              var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
 6149:              return result;
***** HC\ORIGINAL.JS
 6275:              var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
 6276:              result.placeholder = curryRight.placeholder;
 6277:              return result;
*****

***** HC\0.js
 6227:                  if (timeoutId) {
 6228:                  }
***** HC\ORIGINAL.JS
 6355:                  if (timeoutId) {
 6356:                      clearTimeout(timeoutId);
 6357:                  }
*****

***** HC\0.js
 6236:                  if (id) {
 6237:                  }
***** HC\ORIGINAL.JS
 6365:                  if (id) {
 6366:                      clearTimeout(id);
 6367:                  }
*****

***** HC\0.js
 6239:                  if (isCalled) {
 6240:                      //javascriptHelper.Escrever('thisArg ' + thisArg);
***** HC\ORIGINAL.JS
 6369:                  if (isCalled) {
 6370:                      lastCalled = now();
 6371:                      //javascriptHelper.Escrever('thisArg ' + thisArg);
*****

***** HC\0.js
 6246:                      if (!timeoutId && !maxTimeoutId) {
 6247:                      }
***** HC\ORIGINAL.JS
 6377:                      if (!timeoutId && !maxTimeoutId) {
 6378:                          args = thisArg = undefined;
 6379:                      }
*****

***** HC\0.js
 6257:                  } else {
 6258:                  }
***** HC\ORIGINAL.JS
 6389:                  } else {
 6390:                      timeoutId = setTimeout(delayed, remaining);
 6391:                  }
*****

***** HC\0.js
 6285:                  if (isCalled && timeoutId) {
 6286:                  } else if (!timeoutId && wait !== maxWait) {
***** HC\ORIGINAL.JS
 6418:                  if (isCalled && timeoutId) {
 6419:                      timeoutId = clearTimeout(timeoutId);
 6420:                  } else if (!timeoutId && wait !== maxWait) {
*****

***** HC\0.js
 6289:                  if (leadingCall) {
 6290:                      result = func.apply(thisArg, args);
***** HC\ORIGINAL.JS
 6423:                  if (leadingCall) {
 6424:                      isCalled = true;
 6425:                      result = func.apply(thisArg, args);
*****

***** HC\0.js
 6292:                  if (isCalled && !timeoutId && !maxTimeoutId) {
 6293:                  }
***** HC\ORIGINAL.JS
 6427:                  if (isCalled && !timeoutId && !maxTimeoutId) {
 6428:                      args = thisArg = undefined;
 6429:                  }
*****

***** HC\0.js
 6774:              if (typeof func != 'function') {
 6775:              }
***** HC\ORIGINAL.JS
 6910:              if (typeof func != 'function') {
 6911:                  throw new TypeError(FUNC_ERROR_TEXT);
 6912:              }
*****

***** HC\0.js
 8435:          function omitBy(object, predicate) {
 8436:              return basePickBy(object, function (value, key, object) {
***** HC\ORIGINAL.JS
 8572:          function omitBy(object, predicate) {
 8573:              predicate = getIteratee(predicate);
 8574:              return basePickBy(object, function (value, key, object) {
*****

***** HC\0.js
 8798:              } else {
 8799:              }
***** HC\ORIGINAL.JS
 8936:              } else {
 8937:                  max = +max || 0;
 8938:              }
*****

***** HC\0.js
 8995:              string = baseToString(string);
 8996:              var strLength = string.length;
***** HC\ORIGINAL.JS
 9134:              string = baseToString(string);
 9135:              length = +length;
 9136:              var strLength = string.length;
*****

***** HC\0.js
 8997:              if (strLength >= length || !nativeIsFinite(length)) {
 8998:              }
***** HC\ORIGINAL.JS
 9137:              if (strLength >= length || !nativeIsFinite(length)) {
 9138:                  return string;
 9139:              }
*****

***** HC\0.js
 9083:              } else if (radix) {
 9084:              }
***** HC\ORIGINAL.JS
 9224:              } else if (radix) {
 9225:                  radix = +radix;
 9226:              }
*****

***** HC\0.js
 9109:              var result = '';
 9110:              n = +n;
***** HC\ORIGINAL.JS
 9251:              var result = '';
 9252:              string = baseToString(string);
 9253:              n = +n;
*****

***** HC\0.js
 9337:              }
 9338:              // Frame code as the function body.
***** HC\ORIGINAL.JS
 9480:              }
 9481:              // Cleanup code by stripping empty strings.
 9482:              source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').repl
 9483:  ace(reEmptyStringTrailing, '$1;');
 9484:              // Frame code as the function body.
*****

***** HC\0.js
 9377:              if (!string) {
 9378:              }
***** HC\ORIGINAL.JS
 9523:              if (!string) {
 9524:                  return string;
 9525:              }
*****

***** HC\0.js
 9406:              if (!string) {
 9407:              }
***** HC\ORIGINAL.JS
 9553:              if (!string) {
 9554:                  return string;
 9555:              }
*****

***** HC\0.js
 9502:                      }
 9503:                      while (match = separator.exec(substring)) {
***** HC\ORIGINAL.JS
 9650:                      }
 9651:                      separator.lastIndex = 0;
 9652:                      while (match = separator.exec(substring)) {
*****

***** HC\0.js
10003:              var index = -1, result = Array();
10004:              iteratee = toFunction(iteratee);
***** HC\ORIGINAL.JS
10152:              var index = -1, result = Array(nativeMin(n, MAX_ARRAY_LENGTH));
10153:              iteratee = toFunction(iteratee);
*****

***** HC\0.js
10263:          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
10264:          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
10265:          // Add functions to the `Map` cache.
***** HC\ORIGINAL.JS
10412:          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
10413:          LodashWrapper.prototype.constructor = LodashWrapper;
10414:          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
10415:          LazyWrapper.prototype.constructor = LazyWrapper;
10416:          // Add functions to the `Map` cache.
*****

***** HC\0.js
10269:          MapCache.prototype.set = mapSet;
10270:          // Assign cache to `_.memoize`.
***** HC\ORIGINAL.JS
10420:          MapCache.prototype.set = mapSet;
10421:          // Add functions to the `Set` cache.
10422:          SetCache.prototype.push = cachePush;
10423:          // Assign cache to `_.memoize`.
*****

***** HC\0.js
10511:          };
10512:          // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
***** HC\ORIGINAL.JS
10664:          };
10665:          /*------------------------------------------------------------------------*/
10666:          /**
10667:       * The semantic version number.
10668:       *
10669:       * @static
10670:       * @memberOf _
10671:       * @type string
10672:       */
10673:          lodash.VERSION = VERSION;
10674:          // Assign default placeholders.
10675:          arrayEach([
10676:              'bind',
10677:              'bindKey',
10678:              'curry',
10679:              'curryRight',
10680:              'partial',
10681:              'partialRight'
10682:          ], function (methodName) {
10683:              lodash[methodName].placeholder = lodash;
10684:          });
10685:          // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
*****

***** HC\0.js
10564:          });
10565:          LazyWrapper.prototype.compact = function () {
***** HC\ORIGINAL.JS
10737:          });
10738:          // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
10739:          arrayEach([
10740:              'initial',
10741:              'rest'
10742:          ], function (methodName, index) {
10743:              var dropName = 'drop' + (index ? '' : 'Right');
10744:              LazyWrapper.prototype[methodName] = function () {
10745:                  return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
10746:              };
10747:          });
10748:          LazyWrapper.prototype.compact = function () {
*****

***** HC\0.js
10574:          LazyWrapper.prototype.reject = function (predicate) {
10575:              return this.filter(function (value) {
***** HC\ORIGINAL.JS
10757:          LazyWrapper.prototype.reject = function (predicate) {
10758:              predicate = getIteratee(predicate);
10759:              return this.filter(function (value) {
*****

***** HC\0.js
10585:              if (start < 0) {
10586:              } else if (start) {
***** HC\ORIGINAL.JS
10769:              if (start < 0) {
10770:                  result = result.takeRight(-start);
10771:              } else if (start) {
*****

***** HC\0.js
10589:              if (end !== undefined) {
10590:                  result = end < 0 ? result.dropRight(-end) : result.take(end - start);
***** HC\ORIGINAL.JS
10774:              if (end !== undefined) {
10775:                  end = toInteger(end);
10776:                  result = end < 0 ? result.dropRight(-end) : result.take(end - start);
*****

***** HC\0.js
10596:          };
10597:          // Add `LazyWrapper` methods to `lodash.prototype`.
***** HC\ORIGINAL.JS
10782:          };
10783:          LazyWrapper.prototype.toArray = function () {
10784:              return this.take(POSITIVE_INFINITY);
10785:          };
10786:          // Add `LazyWrapper` methods to `lodash.prototype`.
*****

***** HC\0.js
10658:          });
10659:          realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
***** HC\ORIGINAL.JS
10847:          });
10848:          // Map minified function names to their real names.
10849:          baseForOwn(LazyWrapper.prototype, function (func, methodName) {
10850:              var lodashFunc = lodash[methodName];
10851:              if (lodashFunc) {
10852:                  var key = lodashFunc.name + '', names = realNames[key] || (realNames[key] = []);
10853:                  names.push({
10854:                      'name': methodName,
10855:                      'func': lodashFunc
10856:                  });
10857:              }
10858:          });
10859:          realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
*****

***** HC\0.js
10685:      if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
10686:      }    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
***** HC\ORIGINAL.JS
10885:      if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
10886:          // Define as an anonymous module so, through path mapping, it can be
10887:          // referenced as the "underscore" module.
10888:          define(function () {
10889:              return _;
10890:          });
10891:      }    // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
*****

***** HC\0.js
10692:          else {
10693:          }
***** HC\ORIGINAL.JS
10897:          else {
10898:              freeExports._ = _;
10899:          }
*****

***** HC\0.js
10694:      } else {
10695:      }
***** HC\ORIGINAL.JS
10900:      } else {
10901:          // Export for a browser or Rhino.
10902:          root._ = _;
10903:      }
*****

