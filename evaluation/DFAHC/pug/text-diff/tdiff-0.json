Comparando os arquivos HC\0.js e HC\ORIGINAL.JS
***** HC\0.js
    1:  /*!
    2:   * Pug
***** HC\ORIGINAL.JS
    1:  'use strict';
    2:  /*!
    3:   * Pug
*****

***** HC\0.js
   11:  var lex = require('pug-lexer');
   12:  var parse = require('pug-parser');
***** HC\ORIGINAL.JS
   12:  var lex = require('pug-lexer');
   13:  var stripComments = require('pug-strip-comments');
   14:  var parse = require('pug-parser');
*****

***** HC\0.js
   30:  exports.cache = {};
   31:  function applyPlugins(value, options, plugins) {
   32:      return plugins.reduce(function () {
   33:      }, value);
***** HC\ORIGINAL.JS
   32:  exports.cache = {};
   33:  function applyPlugins(value, options, plugins, name) {
   34:      return plugins.reduce(function (value, plugin) {
   35:          return plugin[name] ? plugin[name](value, options) : value;
   36:      }, value);
*****

***** HC\0.js
   34:  }
   35:  /**
***** HC\ORIGINAL.JS
   37:  }
   38:  function findReplacementFunc(plugins, name) {
   39:      var eligiblePlugins = plugins.filter(function (plugin) {
   40:          return plugin[name];
   41:      });
   42:      if (eligiblePlugins.length > 1) {
   43:          throw new Error('Two or more plugins all implement ' + name + ' method.');
   44:      } else if (eligiblePlugins.length) {
   45:          return eligiblePlugins[0][name].bind(eligiblePlugins[0]);
   46:      }
   47:      return null;
   48:  }
   49:  /**
   50:   * Object for global custom filters.  Note that you can also just pass a `filters`
   51:   * option to any other method.
   52:   */
   53:  exports.filters = {};
   54:  /**
*****

***** HC\0.js
   55:              });
   56:              return applyPlugins(lex(str, lexOptions), options, plugins);
   57:          },
***** HC\ORIGINAL.JS
   74:              });
   75:              lexOptions.plugins = plugins.filter(function (plugin) {
   76:                  return !!plugin.lex;
   77:              }).map(function (plugin) {
   78:                  return plugin.lex;
   79:              });
   80:              return applyPlugins(lex(str, lexOptions), options, plugins, 'postLex');
   81:          },
*****

***** HC\0.js
   62:                          type: 'path',
   63:                          val: token.val + '.pug'
***** HC\ORIGINAL.JS
   86:                          type: 'path',
   87:                          line: token.line,
   88:                          col: token.col,
   89:                          val: token.val + '.pug'
*****

***** HC\0.js
   67:              });
   68:              var parseOptions = {};
***** HC\ORIGINAL.JS
   93:              });
   94:              tokens = stripComments(tokens, options);
   95:              tokens = applyPlugins(tokens, options, plugins, 'preParse');
   96:              var parseOptions = {};
*****

***** HC\0.js
   71:              });
   72:              return applyPlugins(applyPlugins(parse(tokens, parseOptions), options, plugins), options, plugins);
   73:          },
   74:          read: function (filename) {
   75:              dependencies.push(filename);
   76:              var replacementFunc;
   77:              if (replacementFunc) {
   78:              } else {
   79:                  contents = load.read(filename);
   80:              }
   81:              var str = applyPlugins(contents, {}, plugins);
   82:              return str;
***** HC\ORIGINAL.JS
   99:              });
  100:              parseOptions.plugins = plugins.filter(function (plugin) {
  101:                  return !!plugin.parse;
  102:              }).map(function (plugin) {
  103:                  return plugin.parse;
  104:              });
  105:              return applyPlugins(applyPlugins(parse(tokens, parseOptions), options, plugins, 'postParse'), options, plugins, 'pr
  106:  eLoad');
  107:          },
  108:          resolve: function (filename, source, loadOptions) {
  109:              var replacementFunc = findReplacementFunc(plugins, 'resolve');
  110:              if (replacementFunc) {
  111:                  return replacementFunc(filename, source, options);
  112:              }
  113:              return load.resolve(filename, source, loadOptions);
  114:          },
  115:          read: function (filename, loadOptions) {
  116:              dependencies.push(filename);
  117:              var contents;
  118:              var replacementFunc = findReplacementFunc(plugins, 'read');
  119:              if (replacementFunc) {
  120:                  contents = replacementFunc(filename, options);
  121:              } else {
  122:                  contents = load.read(filename, loadOptions);
  123:              }
  124:              var str = applyPlugins(contents, { filename: filename }, plugins, 'preLex');
  125:              debug_sources[filename] = str;
  126:              return str;
*****

***** HC\0.js
   84:      });
   85:      var filtersSet = {};
   86:      if (options.filters) {
***** HC\ORIGINAL.JS
  128:      });
  129:      ast = applyPlugins(ast, options, plugins, 'postLoad');
  130:      ast = applyPlugins(ast, options, plugins, 'preFilters');
  131:      var filtersSet = {};
  132:      Object.keys(exports.filters).forEach(function (key) {
  133:          filtersSet[key] = exports.filters[key];
  134:      });
  135:      if (options.filters) {
*****

***** HC\0.js
   91:      ast = filters.handleFilters(ast, filtersSet, options.filterOptions, options.filterAliases);
   92:      ast = link(ast);
   93:      var js = generateCode(ast, {
***** HC\ORIGINAL.JS
  140:      ast = filters.handleFilters(ast, filtersSet, options.filterOptions, options.filterAliases);
  141:      ast = applyPlugins(ast, options, plugins, 'postFilters');
  142:      ast = applyPlugins(ast, options, plugins, 'preLink');
  143:      ast = link(ast);
  144:      ast = applyPlugins(ast, options, plugins, 'postLink');
  145:      // Compile
  146:      ast = applyPlugins(ast, options, plugins, 'preCodeGen');
  147:      var js = generateCode(ast, {
*****

***** HC\0.js
   94:          pretty: options.pretty,
   95:          doctype: options.doctype,
***** HC\ORIGINAL.JS
  148:          pretty: options.pretty,
  149:          compileDebug: options.compileDebug,
  150:          doctype: options.doctype,
*****

***** HC\0.js
   96:          inlineRuntimeFunctions: options.inlineRuntimeFunctions,
   97:          self: options.self,
***** HC\ORIGINAL.JS
  151:          inlineRuntimeFunctions: options.inlineRuntimeFunctions,
  152:          globals: options.globals,
  153:          self: options.self,
*****

***** HC\0.js
  100:      });
  101:      return {
***** HC\ORIGINAL.JS
  156:      });
  157:      js = applyPlugins(js, options, plugins, 'postCodeGen');
  158:      // Debug compiler
  159:      if (options.debug) {
  160:          console.error('\nCompiled Function:\n\n\x1B[90m%s\x1B[0m', js.replace(/^/gm, '  '));
  161:      }
  162:      return {
*****

***** HC\0.js
  120:  function handleTemplateCache(options, str) {
  121:      var key;
  122:      if (options.cache && exports.cache[key]) {
***** HC\ORIGINAL.JS
  181:  function handleTemplateCache(options, str) {
  182:      var key = options.filename;
  183:      if (options.cache && exports.cache[key]) {
*****

***** HC\0.js
  125:          if (str === undefined)
  126:              str = fs.readFileSync(options.filename);
  127:          var templ = exports.compile(str, options);
***** HC\ORIGINAL.JS
  186:          if (str === undefined)
  187:              str = fs.readFileSync(options.filename, 'utf8');
  188:          var templ = exports.compile(str, options);
*****

***** HC\0.js
  151:      var parsed = compileBody(str, {
  152:          filename: options.filename,
***** HC\ORIGINAL.JS
  212:      var parsed = compileBody(str, {
  213:          compileDebug: options.compileDebug !== false,
  214:          filename: options.filename,
*****

***** HC\0.js
  155:          doctype: options.doctype,
  156:          self: options.self,
***** HC\ORIGINAL.JS
  217:          doctype: options.doctype,
  218:          inlineRuntimeFunctions: options.inlineRuntimeFunctions,
  219:          globals: options.globals,
  220:          self: options.self,
*****

***** HC\0.js
  157:          includeSources: options.compileDebug === true,
  158:          filters: options.filters,
  159:          filterAliases: options.filterAliases
  160:      });
  161:      var res = options.inlineRuntimeFunctions ? new Function()() : runtimeWrap(parsed.body);
  162:      res.dependencies = parsed.dependencies;
***** HC\ORIGINAL.JS
  221:          includeSources: options.compileDebug === true,
  222:          debug: options.debug,
  223:          templateName: 'template',
  224:          filters: options.filters,
  225:          filterOptions: options.filterOptions,
  226:          filterAliases: options.filterAliases,
  227:          plugins: options.plugins
  228:      });
  229:      var res = options.inlineRuntimeFunctions ? new Function('', parsed.body + ';return template;')() : runtimeWrap(parsed.body)
  230:  ;
  231:      res.dependencies = parsed.dependencies;
*****

***** HC\0.js
  183:      var parsed = compileBody(str, {
  184:          filename: options.filename,
***** HC\ORIGINAL.JS
  252:      var parsed = compileBody(str, {
  253:          compileDebug: options.compileDebug,
  254:          filename: options.filename,
*****

***** HC\0.js
  186:          pretty: options.pretty,
  187:          inlineRuntimeFunctions: options.inlineRuntimeFunctions !== false,
  188:          self: options.self,
  189:          templateName: options.name || 'template',
***** HC\ORIGINAL.JS
  256:          pretty: options.pretty,
  257:          doctype: options.doctype,
  258:          inlineRuntimeFunctions: options.inlineRuntimeFunctions !== false,
  259:          globals: options.globals,
  260:          self: options.self,
  261:          includeSources: options.compileDebug,
  262:          debug: options.debug,
  263:          templateName: options.name || 'template',
*****

***** HC\0.js
  190:          filters: options.filters,
  191:          filterAliases: options.filterAliases
  192:      });
  193:      return { body: parsed.body };
  194:  };
***** HC\ORIGINAL.JS
  264:          filters: options.filters,
  265:          filterOptions: options.filterOptions,
  266:          filterAliases: options.filterAliases,
  267:          plugins: options.plugins
  268:      });
  269:      return {
  270:          body: parsed.body,
  271:          dependencies: parsed.dependencies
  272:      };
  273:  };
*****

***** HC\0.js
  245:   */
  246:  exports.render = function (str, options) {
  247:      options = options || {};
  248:      return handleTemplateCache(options, str)(options);
  249:  };
  250:  /**
  251:   * Render a Pug file at the given `path`.
  252:   *
  253:   * @param {String} path
  254:   * @param {Object|Function} options or callback
  255:   * @param {Function|undefined} fn
  256:   * @returns {String}
  257:   * @api public
  258:   */
  259:  exports.renderFile = function (path, options, fn) {
  260:      // support callback API
***** HC\ORIGINAL.JS
  324:   */
  325:  exports.render = function (str, options, fn) {
  326:      // support callback API
*****

***** HC\0.js
  264:      if (typeof fn === 'function') {
  265:          try {
  266:              res = exports.renderFile(path, options);
  267:          } catch (ex) {
***** HC\ORIGINAL.JS
  330:      if (typeof fn === 'function') {
  331:          var res;
  332:          try {
  333:              res = exports.render(str, options);
  334:          } catch (ex) {
*****

***** HC\0.js
  272:      options = options || {};
  273:      options.filename = path;
  274:      return handleTemplateCache(options)(options);
  275:  };
***** HC\ORIGINAL.JS
  339:      options = options || {};
  340:      // cache requires .filename
  341:      if (options.cache && !options.filename) {
  342:          throw new Error('the "filename" option is required for caching');
  343:      }
  344:      return handleTemplateCache(options, str)(options);
  345:  };
*****

***** HC\0.js
  276:  /**
  277:   * Compile a Pug file at the given `path` for use on the client.
  278:   *
***** HC\ORIGINAL.JS
  346:  /**
  347:   * Render a Pug file at the given `path`.
  348:   *
*****

***** HC\0.js
  279:   * @param {String} path
  280:   * @param {Object} options
  281:   * @returns {String}
***** HC\ORIGINAL.JS
  349:   * @param {String} path
  350:   * @param {Object|Function} options or callback
  351:   * @param {Function|undefined} fn
  352:   * @returns {String}
*****

***** HC\0.js
  283:   */
  284:  exports.compileFileClient = function (path, options) {
  285:      var key = path + ':client';
  286:      options = options || {};
***** HC\ORIGINAL.JS
  354:   */
  355:  exports.renderFile = function (path, options, fn) {
  356:      // support callback API
  357:      if ('function' == typeof options) {
  358:          fn = options, options = undefined;
  359:      }
  360:      if (typeof fn === 'function') {
  361:          var res;
  362:          try {
  363:              res = exports.renderFile(path, options);
  364:          } catch (ex) {
  365:              return fn(ex);
  366:          }
  367:          return fn(null, res);
  368:      }
  369:      options = options || {};
*****

***** HC\0.js
  287:      options.filename = path;
  288:      if (options.cache && exports.cache[key]) {
  289:          return exports.cache[key];
  290:      }
  291:      var str = fs.readFileSync(options.filename);
  292:      var out = exports.compileClient(str, options);
  293:      if (options.cache)
  294:          exports.cache[key] = out;
  295:      return out;
  296:  };
***** HC\ORIGINAL.JS
  370:      options.filename = path;
  371:      return handleTemplateCache(options)(options);
  372:  };
*****

***** HC\0.js
***** HC\ORIGINAL.JS
  373:  /**
  374:   * Compile a Pug file at the given `path` for use on the client.
  375:   *
  376:   * @param {String} path
  377:   * @param {Object} options
  378:   * @returns {String}
  379:   * @api public
  380:   */
  381:  exports.compileFileClient = function (path, options) {
  382:      var key = path + ':client';
  383:      options = options || {};
  384:      options.filename = path;
  385:      if (options.cache && exports.cache[key]) {
  386:          return exports.cache[key];
  387:      }
  388:      var str = fs.readFileSync(options.filename, 'utf8');
  389:      var out = exports.compileClient(str, options);
  390:      if (options.cache)
  391:          exports.cache[key] = out;
  392:      return out;
  393:  };
  394:  /**
  395:   * Express support.
  396:   */
  397:  exports.__express = function (path, options, fn) {
  398:      if (options.compileDebug == undefined && process.env.NODE_ENV === 'production') {
  399:          options.compileDebug = false;
  400:      }
  401:      exports.renderFile(path, options, fn);
  402:  };
*****

