Comparando os arquivos HC\0.js e HC\ORIGINAL.JS
***** HC\0.js
    1:  const co = require('co');
    2:  /**
***** HC\ORIGINAL.JS
    1:  'use strict';
    2:  const co = require('co');
    3:  /**
*****

***** HC\0.js
   21:                  if (this.ticks.length > 1) {
   22:                      const l = this.ticks.length;
***** HC\ORIGINAL.JS
   22:                  if (this.ticks.length > 1) {
   23:                      this.ticks.sort(function (a, b) {
   24:                          return a && b && a.getDiff() - b.getDiff() || 0;
   25:                      });
   26:                      const l = this.ticks.length;
*****

***** HC\0.js
   56:                  let min = this.ticks[0].getDiff();
   57:                  return min;
***** HC\ORIGINAL.JS
   60:                  let min = this.ticks[0].getDiff();
   61:                  this.ticks.forEach(function (tick) {
   62:                      if (tick.getDiff() < min) {
   63:                          min = tick.getDiff();
   64:                      }
   65:                  });
   66:                  return min;
*****

***** HC\0.js
   83:               */
   84:              parse: function () {
   85:              }
***** HC\ORIGINAL.JS
   92:               */
   93:              parse: function (num) {
   94:                  if (num < 1000) {
   95:                      return num + 'ns';
   96:                  } else if (num >= 1000 && num < 1000000) {
   97:                      return num / 1000 + 'us';
   98:                  } else if (num >= 1000000 && num < 1000000000) {
   99:                      return num / 1000000 + 'ms';
  100:                  } else if (num >= 1000000000) {
  101:                      return num / 1000000000 + 's';
  102:                  }
  103:              }
*****

***** HC\0.js
   98:      var constructor = obj.constructor;
   99:      if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) {
***** HC\ORIGINAL.JS
  116:      var constructor = obj.constructor;
  117:      if (!constructor) {
  118:          return false;
  119:      }
  120:      if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) {
*****

***** HC\0.js
  101:      }
  102:  }
***** HC\ORIGINAL.JS
  122:      }
  123:      return 'function' === typeof constructor.prototype.next && 'function' === typeof constructor.prototype.throw;
  124:  }
*****

***** HC\0.js
  110:      this.name = name;
  111:  }
***** HC\ORIGINAL.JS
  132:      this.name = name;
  133:      return this;
  134:  }
*****

***** HC\0.js
  120:      const tick = new Tick(name);
  121:      const done = function () {
***** HC\ORIGINAL.JS
  143:      const tick = new Tick(name);
  144:      tick.start();
  145:      const done = function () {
*****

***** HC\0.js
  124:      if (isGeneratorFunction(callback)) {
  125:          co(callback).then();
  126:      } else if (!!callback.toString().match()) {
  127:          // If done is passed when the callback is declared than we assume is async
***** HC\ORIGINAL.JS
  148:      if (isGeneratorFunction(callback)) {
  149:          co(callback).then(done, done);
  150:      } else if (!!callback.toString().match(/^function.*\(.*\)/)) {
  151:          // If done is passed when the callback is declared than we assume is async
*****

***** HC\0.js
  129:      } else {
  130:      }
***** HC\ORIGINAL.JS
  153:      } else {
  154:          // Otherwise just call the function and stop the tick
  155:          callback();
  156:          tick.stop();
  157:      }
*****

***** HC\0.js
  136:  Tick.prototype.start = function () {
  137:  };
***** HC\ORIGINAL.JS
  163:  Tick.prototype.start = function () {
  164:      this.hrstart = process.hrtime();
  165:  };
*****

***** HC\0.js
  141:  Tick.prototype.stop = function () {
  142:      timer(this.name).ticks.push(this);
***** HC\ORIGINAL.JS
  169:  Tick.prototype.stop = function () {
  170:      this.hrend = process.hrtime(this.hrstart);
  171:      timer(this.name).ticks.push(this);
*****

***** HC\0.js
  148:  Tick.prototype.getDiff = function () {
  149:  };
***** HC\ORIGINAL.JS
  177:  Tick.prototype.getDiff = function () {
  178:      return this.hrend[0] * 1000000000 + this.hrend[1];
  179:  };
*****

