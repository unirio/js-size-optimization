Comparando os arquivos HC\0.js e HC\ORIGINAL.JS
***** HC\0.js
   18:  UUIDjs.limitUI32 = UUIDjs.maxFromBits(32);
   19:  UUIDjs.limitUI40 = UUIDjs.maxFromBits();
   20:  UUIDjs.limitUI48 = UUIDjs.maxFromBits(48);
***** HC\ORIGINAL.JS
   18:  UUIDjs.limitUI32 = UUIDjs.maxFromBits(32);
   19:  UUIDjs.limitUI40 = UUIDjs.maxFromBits(40);
   20:  UUIDjs.limitUI48 = UUIDjs.maxFromBits(48);
*****

***** HC\0.js
   54:  UUIDjs.paddedString = function (string, length, z) {
   55:      z = !z ? '0' : z;
***** HC\ORIGINAL.JS
   54:  UUIDjs.paddedString = function (string, length, z) {
   55:      string = String(string);
   56:      z = !z ? '0' : z;
*****

***** HC\0.js
   66:      this.hex = UUIDjs.paddedString(timeLow.toString(16), 8) + '-' + UUIDjs.paddedString(timeMid.toString(16), 4) + '-' + UUIDjs
   67:  .paddedString(timeHiAndVersion.toString(16)) + '-' + UUIDjs.paddedString(clockSeqHiAndReserved.toString(16)) + UUIDjs.paddedStr
   68:  ing(clockSeqLow.toString(16), 2) + '-' + UUIDjs.paddedString(node.toString(16));
   69:      return this;
***** HC\ORIGINAL.JS
   67:      this.hex = UUIDjs.paddedString(timeLow.toString(16), 8) + '-' + UUIDjs.paddedString(timeMid.toString(16), 4) + '-' + UUIDjs
   68:  .paddedString(timeHiAndVersion.toString(16), 4) + '-' + UUIDjs.paddedString(clockSeqHiAndReserved.toString(16), 2) + UUIDjs.pad
   69:  dedString(clockSeqLow.toString(16), 2) + '-' + UUIDjs.paddedString(node.toString(16), 12);
   70:      return this;
*****

***** HC\0.js
   87:  };
   88:  UUIDjs.prototype.equals = function () {
   89:  };
***** HC\ORIGINAL.JS
   88:  };
   89:  UUIDjs.prototype.equals = function (uuid) {
   90:      if (!(uuid instanceof UUID)) {
   91:          return false;
   92:      }
   93:      if (this.hex !== uuid.hex) {
   94:          return false;
   95:      }
   96:      return true;
   97:  };
*****

***** HC\0.js
   90:  UUIDjs.getTimeFieldValues = function (time) {
   91:      var ts = time - Date.UTC();
   92:      var hm = ts / 4294967296 * 10000 & 268435455;
***** HC\ORIGINAL.JS
   98:  UUIDjs.getTimeFieldValues = function (time) {
   99:      var ts = time - Date.UTC(1582, 9, 15);
  100:      var hm = ts / 4294967296 * 10000 & 268435455;
*****

***** HC\0.js
  104:  UUIDjs._create1 = function () {
  105:      var now;
  106:      var sequence;
  107:      var node = (UUIDjs.randomUI08() | 1) * 1099511627776 + UUIDjs.randomUI40();
***** HC\ORIGINAL.JS
  112:  UUIDjs._create1 = function () {
  113:      var now = new Date().getTime();
  114:      var sequence = UUIDjs.randomUI14();
  115:      var node = (UUIDjs.randomUI08() | 1) * 1099511627776 + UUIDjs.randomUI40();
*****

***** HC\0.js
  108:      var tick = UUIDjs.randomUI04();
  109:      var timestamp;
  110:      var timestampRatio;
  111:      var tf = UUIDjs.getTimeFieldValues();
  112:      var tl = tf.low + tick;
***** HC\ORIGINAL.JS
  116:      var tick = UUIDjs.randomUI04();
  117:      var timestamp = 0;
  118:      var timestampRatio = 1 / 4;
  119:      if (now != timestamp) {
  120:          if (now < timestamp) {
  121:              sequence++;
  122:          }
  123:          timestamp = now;
  124:          tick = UUIDjs.randomUI04();
  125:      } else if (Math.random() < timestampRatio && tick < 9984) {
  126:          tick += 1 + UUIDjs.randomUI04();
  127:      } else {
  128:          sequence++;
  129:      }
  130:      var tf = UUIDjs.getTimeFieldValues(timestamp);
  131:      var tl = tf.low + tick;
*****

***** HC\0.js
  113:      var thav = tf.hi & 4095 | 4096;
  114:      var cshar = sequence >>> 8 | 128;
***** HC\ORIGINAL.JS
  132:      var thav = tf.hi & 4095 | 4096;
  133:      sequence &= 16383;
  134:      var cshar = sequence >>> 8 | 128;
*****

***** HC\0.js
  121:  };
  122:  UUIDjs.fromTime = function (last) {
  123:      var tf = UUIDjs.getTimeFieldValues();
  124:      var tl = tf.low;
***** HC\ORIGINAL.JS
  141:  };
  142:  UUIDjs.fromTime = function (time, last) {
  143:      last = !last ? false : last;
  144:      var tf = UUIDjs.getTimeFieldValues(time);
  145:      var tl = tf.low;
*****

***** HC\0.js
  127:      if (last === false) {
  128:      } else {
***** HC\ORIGINAL.JS
  148:      if (last === false) {
  149:          return new UUIDjs().fromParts(tl, tf.mid, thav, 0, 0, 0);
  150:      } else {
*****

***** HC\0.js
  137:  };
  138:  UUIDjs.fromURN = function () {
  139:      if (r = p.exec()) {
  140:      }
  141:  };
  142:  UUIDjs.fromBytes = function () {
  143:      if (ints.length < 5) {
  144:      }
  145:      var str;
  146:      for (;; i++) {
  147:          for (;; j++) {
  148:              if (octet.length == 1) {
  149:              }
  150:          }
***** HC\ORIGINAL.JS
  159:  };
  160:  UUIDjs.fromURN = function (strId) {
  161:      var r, p = /^(?:urn:uuid:|\{)?([0-9a-f]{8})-([0-9a-f]{4})-([0-9a-f]{4})-([0-9a-f]{2})([0-9a-f]{2})-([0-9a-f]{12})(?:\})?$/i
  162:  ;
  163:      if (r = p.exec(strId)) {
  164:          return new UUIDjs().fromParts(parseInt(r[1], 16), parseInt(r[2], 16), parseInt(r[3], 16), parseInt(r[4], 16), parseInt(
  165:  r[5], 16), parseInt(r[6], 16));
  166:      }
  167:      return null;
  168:  };
  169:  UUIDjs.fromBytes = function (ints) {
  170:      if (ints.length < 5) {
  171:          return null;
  172:      }
  173:      var str = '';
  174:      var pos = 0;
  175:      var parts = [
  176:          4,
  177:          2,
  178:          2,
  179:          2,
  180:          6
  181:      ];
  182:      for (var i = 0; i < parts.length; i++) {
  183:          for (var j = 0; j < parts[i]; j++) {
  184:              var octet = ints[pos++].toString(16);
  185:              if (octet.length == 1) {
  186:                  octet = '0' + octet;
  187:              }
  188:              str += octet;
  189:          }
  190:          if (parts[i] !== 6) {
  191:              str += '-';
  192:          }
*****

***** HC\0.js
  151:      }
  152:  };
  153:  UUIDjs.fromBinary = function () {
  154:      for (;; i++) {
  155:          if (ints[i] > 255 || ints[i] < 0) {
  156:              throw new Error();
  157:          }
***** HC\ORIGINAL.JS
  193:      }
  194:      return UUIDjs.fromURN(str);
  195:  };
  196:  UUIDjs.fromBinary = function (binary) {
  197:      var ints = [];
  198:      for (var i = 0; i < binary.length; i++) {
  199:          ints[i] = binary.charCodeAt(i);
  200:          if (ints[i] > 255 || ints[i] < 0) {
  201:              throw new Error('Unexpected byte in binary data.');
  202:          }
*****

***** HC\0.js
  158:      }
  159:  };
***** HC\ORIGINAL.JS
  203:      }
  204:      return UUIDjs.fromBytes(ints);
  205:  };
*****

***** HC\0.js
  165:  UUIDjs.newTS = function () {
  166:  };
***** HC\ORIGINAL.JS
  211:  UUIDjs.newTS = function () {
  212:      return this.create(1);
  213:  };
*****

