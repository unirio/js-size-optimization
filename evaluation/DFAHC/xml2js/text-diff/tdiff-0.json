Comparando os arquivos HC\0.js e HC\ORIGINAL.JS
***** HC\0.js
    2:  (function () {
    3:      var extend = function (child, parent) {
    4:              for (var key in parent) {
***** HC\ORIGINAL.JS
    2:  (function () {
    3:      'use strict';
    4:      var bom, builder, escapeCDATA, events, isEmpty, processName, processors, requiresCDATA, sax, setImmediate, wrapCDATA, exten
    5:  d = function (child, parent) {
    6:              for (var key in parent) {
*****

***** HC\0.js
    8:              function ctor() {
    9:              }
***** HC\ORIGINAL.JS
   10:              function ctor() {
   11:                  this.constructor = child;
   12:              }
*****

***** HC\0.js
   11:              child.prototype = new ctor();
   12:              return child;
***** HC\ORIGINAL.JS
   14:              child.prototype = new ctor();
   15:              child.__super__ = parent.prototype;
   16:              return child;
*****

***** HC\0.js
   21:      bom = require('./bom');
   22:      isEmpty = function (thing) {
***** HC\ORIGINAL.JS
   25:      bom = require('./bom');
   26:      processors = require('./processors');
   27:      setImmediate = require('timers').setImmediate;
   28:      isEmpty = function (thing) {
*****

***** HC\0.js
   25:      processName = function (processors, processedName) {
   26:          var process;
   27:          for (i = 0, len = processors.length; i < len; i++) {
***** HC\ORIGINAL.JS
   31:      processName = function (processors, processedName) {
   32:          var i, len, process;
   33:          for (i = 0, len = processors.length; i < len; i++) {
*****

***** HC\0.js
   33:      requiresCDATA = function (entry) {
   34:          return entry.indexOf('&') >= 0 || entry.indexOf() >= 0 || entry.indexOf() >= 0;
   35:      };
***** HC\ORIGINAL.JS
   39:      requiresCDATA = function (entry) {
   40:          return entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0;
   41:      };
*****

***** HC\0.js
   41:      };
   42:      exports.defaults = {
***** HC\ORIGINAL.JS
   47:      };
   48:      exports.processors = processors;
   49:      exports.defaults = {
*****

***** HC\0.js
  108:      exports.ValidationError = function (superClass) {
  109:          function ValidationError(message) {
***** HC\ORIGINAL.JS
  115:      exports.ValidationError = function (superClass) {
  116:          extend(ValidationError, superClass);
  117:          function ValidationError(message) {
*****

***** HC\0.js
  115:          function Builder(opts) {
  116:              var value;
  117:              this.options = {};
***** HC\ORIGINAL.JS
  123:          function Builder(opts) {
  124:              var key, ref, value;
  125:              this.options = {};
*****

***** HC\0.js
  132:          Builder.prototype.buildObject = function (rootObj) {
  133:              var attrkey, charkey;
  134:              if (Object.keys(rootObj).length === 1 && this.options.rootName === exports.defaults['0.2'].rootName) {
***** HC\ORIGINAL.JS
  140:          Builder.prototype.buildObject = function (rootObj) {
  141:              var attrkey, charkey, render, rootElement, rootName;
  142:              attrkey = this.options.attrkey;
  143:              charkey = this.options.charkey;
  144:              if (Object.keys(rootObj).length === 1 && this.options.rootName === exports.defaults['0.2'].rootName) {
*****

***** HC\0.js
  141:                  return function (element, obj) {
  142:                      var value;
  143:                      if (typeof obj !== 'object') {
***** HC\ORIGINAL.JS
  151:                  return function (element, obj) {
  152:                      var attr, child, entry, index, key, value;
  153:                      if (typeof obj !== 'object') {
*****

***** HC\0.js
  144:                          if (_this.options.cdata && requiresCDATA(obj)) {
  145:                          } else {
  146:                          }
***** HC\ORIGINAL.JS
  154:                          if (_this.options.cdata && requiresCDATA(obj)) {
  155:                              element.raw(wrapCDATA(obj));
  156:                          } else {
  157:                              element.txt(obj);
  158:                          }
*****

***** HC\0.js
  154:                                      for (attr in child) {
  155:                                      }
***** HC\ORIGINAL.JS
  166:                                      for (attr in child) {
  167:                                          value = child[attr];
  168:                                          element = element.att(attr, value);
  169:                                      }
*****

***** HC\0.js
  158:                                  if (_this.options.cdata && requiresCDATA(child)) {
  159:                                  } else {
  160:                                  }
***** HC\ORIGINAL.JS
  172:                                  if (_this.options.cdata && requiresCDATA(child)) {
  173:                                      element = element.raw(wrapCDATA(child));
  174:                                  } else {
  175:                                      element = element.txt(child);
  176:                                  }
*****

***** HC\0.js
  172:                                      } else {
  173:                                      }
***** HC\ORIGINAL.JS
  188:                                      } else {
  189:                                          element = render(element.ele(key), entry).up();
  190:                                      }
*****

***** HC\0.js
  206:              this.processAsync = bind(this.processAsync, this);
  207:              var key;
  208:              if (!(this instanceof exports.Parser)) {
***** HC\ORIGINAL.JS
  223:              this.processAsync = bind(this.processAsync, this);
  224:              var key, ref, value;
  225:              if (!(this instanceof exports.Parser)) {
*****

***** HC\0.js
  231:                  }
  232:              }
***** HC\ORIGINAL.JS
  248:                  }
  249:                  this.options.tagNameProcessors.unshift(processors.normalize);
  250:              }
*****

***** HC\0.js
  235:          Parser.prototype.processAsync = function () {
  236:              var err;
  237:              try {
***** HC\ORIGINAL.JS
  253:          Parser.prototype.processAsync = function () {
  254:              var chunk, err, error1;
  255:              try {
*****

***** HC\0.js
  241:                      this.saxParser = this.saxParser.write(chunk);
  242:                      return;
  243:                  } else {
  244:                      chunk = this.remaining.substr(this.options.chunkSize);
  245:                      this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
***** HC\ORIGINAL.JS
  259:                      this.saxParser = this.saxParser.write(chunk);
  260:                      return this.saxParser.close();
  261:                  } else {
  262:                      chunk = this.remaining.substr(0, this.options.chunkSize);
  263:                      this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
*****

***** HC\0.js
  246:                      this.saxParser = this.saxParser.write(chunk);
  247:                      return;
  248:                  }
***** HC\ORIGINAL.JS
  264:                      this.saxParser = this.saxParser.write(chunk);
  265:                      return setImmediate(this.processAsync);
  266:                  }
*****

***** HC\0.js
  252:                      this.saxParser.errThrown = true;
  253:                      return;
  254:                  }
***** HC\ORIGINAL.JS
  270:                      this.saxParser.errThrown = true;
  271:                      return this.emit(err);
  272:                  }
*****

***** HC\0.js
  271:          Parser.prototype.reset = function () {
  272:              var ontext;
  273:              this.removeAllListeners();
***** HC\ORIGINAL.JS
  289:          Parser.prototype.reset = function () {
  290:              var attrkey, charkey, ontext, stack;
  291:              this.removeAllListeners();
*****

***** HC\0.js
  304:                  return function (node) {
  305:                      var key, obj, ref;
  306:                      obj = {};
***** HC\ORIGINAL.JS
  322:                  return function (node) {
  323:                      var key, newValue, obj, processedKey, ref;
  324:                      obj = {};
*****

***** HC\0.js
  437:                          if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChild
  438:  ren && text.replace().trim() !== '') {
  439:                              s[_this.options.childkey] = s[_this.options.childkey] || [];
***** HC\ORIGINAL.JS
  455:                          if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChild
  456:  ren && text.replace(/\\n/g, '').trim() !== '') {
  457:                              s[_this.options.childkey] = s[_this.options.childkey] || [];
*****

***** HC\0.js
  459:          Parser.prototype.parseString = function (str, cb) {
  460:              if (cb != null && typeof cb === 'function') {
***** HC\ORIGINAL.JS
  477:          Parser.prototype.parseString = function (str, cb) {
  478:              var err, error1;
  479:              if (cb != null && typeof cb === 'function') {
*****

***** HC\0.js
  486:                      this.emit('error', err);
  487:                      return;
  488:                  } else if (this.saxParser.ended) {
***** HC\ORIGINAL.JS
  505:                      this.emit('error', err);
  506:                      return this.saxParser.errThrown = true;
  507:                  } else if (this.saxParser.ended) {
*****

***** HC\0.js
  495:      exports.parseString = function (str, a, b) {
  496:          if (b != null) {
***** HC\ORIGINAL.JS
  514:      exports.parseString = function (str, a, b) {
  515:          var cb, options, parser;
  516:          if (b != null) {
*****

