Comparing files TLEAF\RD\33.js and TLEAF\RD\ORIGINAL.JS
***** TLEAF\RD\33.js
   13:      try {
   14:      } catch (err) {
***** TLEAF\RD\ORIGINAL.JS
   13:      try {
   14:          ast = esprima.parse(source);
   15:      } catch (err) {
*****

***** TLEAF\RD\33.js
   18:      // global scope
   19:      var currentScope;
   20:      var calls = [];
***** TLEAF\RD\ORIGINAL.JS
   19:      // global scope
   20:      var currentScope = scopeManager.acquire(ast);
   21:      var calls = [];
*****

***** TLEAF\RD\33.js
   42:              if (/Function/.test(node.type)) {
   43:              }
***** TLEAF\RD\ORIGINAL.JS
   43:              if (/Function/.test(node.type)) {
   44:                  currentScope = currentScope.upper;
   45:              }
*****

***** TLEAF\RD\33.js
   77:  ////////
   78:  function (callExpression) {
   79:      var name;
***** TLEAF\RD\ORIGINAL.JS
   79:  ////////
   80:  function findName(callExpression) {
   81:      var name;
*****

***** TLEAF\RD\33.js
  126:      if (type === 'component') {
  127:          return findComponentDeps(depsArg);
  128:      }
***** TLEAF\RD\ORIGINAL.JS
  128:      if (type === 'component') {
  129:          return findComponentDeps(depsArg, scope);
  130:      }
*****

***** TLEAF\RD\33.js
  148:          // it may vary a lot, covering common cases
  149:          return;
  150:      }
***** TLEAF\RD\ORIGINAL.JS
  150:          // it may vary a lot, covering common cases
  151:          return findProviderDeps(depsArg);
  152:      }
*****

***** TLEAF\RD\33.js
  152:  }
  153:  function (object, scope) {
  154:      // covers { controller: someVar }
***** TLEAF\RD\ORIGINAL.JS
  154:  }
  155:  function findComponentDeps(object, scope) {
  156:      // covers { controller: someVar }
*****

***** TLEAF\RD\33.js
  196:              // covers "return { $get: function () {} };"
  197:              if (argument.type === 'ObjectExpression') {
***** TLEAF\RD\ORIGINAL.JS
  198:              // covers "return { $get: function () {} };"
  199:              // covers "return { $get: someVar };"
  200:              if (argument.type === 'ObjectExpression') {
*****

***** TLEAF\RD\33.js
  223:      });
  224:  }
***** TLEAF\RD\ORIGINAL.JS
  226:      });
  227:      return deps;
  228:  }
*****

***** TLEAF\RD\33.js
  246:      if (varType === 'FunctionDeclaration') {
  247:          params = _.get(varNode, []);
  248:      }
***** TLEAF\RD\ORIGINAL.JS
  250:      if (varType === 'FunctionDeclaration') {
  251:          params = _.get(varNode, 'params', []);
  252:      }
*****

***** TLEAF\RD\33.js
  252:      }
  253:      var deps;
  254:      return deps;
***** TLEAF\RD\ORIGINAL.JS
  256:      }
  257:      var deps = extractDeps(params);
  258:      return deps;
*****

