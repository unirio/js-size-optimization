Comparing files LODASH\RD\29.js and LODASH\RD\ORIGINAL.JS
***** LODASH\RD\29.js
 9498:          }
 9499:          function trim(string, chars, guard) {
 9500:              var value = string;
 9501:              string = baseToString(string);
 9502:              if (!string) {
 9503:                  return string;
 9504:              }
 9505:              if (guard || chars == null) {
 9506:                  return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
 9507:              }
 9508:              chars = chars + '';
 9509:              return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
 9510:          }
 9511:          /**
 9512:       * Removes leading whitespace or specified characters from `string`.
 9513:       *
***** LODASH\RD\ORIGINAL.JS
 9498:          }
 9499:          /**
 9500:       * Removes leading and trailing whitespace or specified characters from `string`.
 9501:       *
*****

***** LODASH\RD\29.js
 9522:       *
 9523:       * _.trimLeft('  abc  ');
 9524:       * // => 'abc  '
 9525:       *
 9526:       * _.trimLeft('-_-abc-_-', '_-');
 9527:       * // => 'abc-_-'
 9528:       */
 9529:          function trimLeft(string, chars, guard) {
 9530:              var value;
 9531:              string = baseToString(string);
***** LODASH\RD\ORIGINAL.JS
 9510:       *
 9511:       * _.trim('  abc  ');
 9512:       * // => 'abc'
 9513:       *
 9514:       * _.trim('-_-abc-_-', '_-');
 9515:       * // => 'abc'
 9516:       *
 9517:       * _.map(['  foo  ', '  bar  '], _.trim);
 9518:       * // => ['foo', 'bar']
 9519:       */
 9520:          function trim(string, chars, guard) {
 9521:              var value = string;
 9522:              string = baseToString(string);
*****

***** LODASH\RD\29.js
 9535:              if (guard || chars == null) {
 9536:                  return string.slice(trimmedLeftIndex(string));
 9537:              }
 9538:              return string.slice(charsLeftIndex(string, chars + ''));
 9539:          }
***** LODASH\RD\ORIGINAL.JS
 9526:              if (guard || chars == null) {
 9527:                  return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
 9528:              }
 9529:              chars = chars + '';
 9530:              return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
 9531:          }
*****

***** LODASH\RD\29.js
 9540:          /**
 9541:       * Removes trailing whitespace or specified characters from `string`.
 9542:       *
***** LODASH\RD\ORIGINAL.JS
 9532:          /**
 9533:       * Removes leading whitespace or specified characters from `string`.
 9534:       *
*****

***** LODASH\RD\29.js
 9551:       *
 9552:       * _.trimRight('  abc  ');
 9553:       * // => '  abc'
 9554:       *
 9555:       * _.trimRight('-_-abc-_-', '_-');
 9556:       * // => '-_-abc'
 9557:       */
 9558:          function trimRight(string, chars, guard) {
 9559:              var value = string;
***** LODASH\RD\ORIGINAL.JS
 9543:       *
 9544:       * _.trimLeft('  abc  ');
 9545:       * // => 'abc  '
 9546:       *
 9547:       * _.trimLeft('-_-abc-_-', '_-');
 9548:       * // => 'abc-_-'
 9549:       */
 9550:          function trimLeft(string, chars, guard) {
 9551:              var value = string;
*****

***** LODASH\RD\29.js
 9564:              if (guard || chars == null) {
 9565:                  return string.slice(0, trimmedRightIndex(string) + 1);
 9566:              }
 9567:              return string.slice(0, charsRightIndex(string, chars + '') + 1);
 9568:          }
***** LODASH\RD\ORIGINAL.JS
 9556:              if (guard || chars == null) {
 9557:                  return string.slice(trimmedLeftIndex(string));
 9558:              }
 9559:              return string.slice(charsLeftIndex(string, chars + ''));
 9560:          }
*****

***** LODASH\RD\29.js
 9569:          /**
 9570:       * Truncates `string` if it's longer than the given maximum string length.
 9571:       * The last characters of the truncated string are replaced with the omission
 9572:       * string which defaults to "...".
 9573:       *
***** LODASH\RD\ORIGINAL.JS
 9561:          /**
 9562:       * Removes trailing whitespace or specified characters from `string`.
 9563:       *
*****

***** LODASH\RD\29.js
 9576:       * @category String
 9577:       * @param {string} [string=''] The string to truncate.
 9578:       * @param {Object} [options] The options object.
 9579:       * @param {number} [options.length=30] The maximum string length.
 9580:       * @param {string} [options.omission='...'] The string to indicate text is omitted.
 9581:       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
 9582:       * @returns {string} Returns the truncated string.
 9583:       * @example
***** LODASH\RD\ORIGINAL.JS
 9566:       * @category String
 9567:       * @param {string} [string=''] The string to trim.
 9568:       * @param {string} [chars=whitespace] The characters to trim.
 9569:       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
 9570:       * @returns {string} Returns the trimmed string.
 9571:       * @example
*****

***** LODASH\RD\29.js
 9584:       *
 9585:       * _.trunc('hi-diddly-ho there, neighborino');
 9586:       * // => 'hi-diddly-ho there, neighbo...'
 9587:       *
 9588:       * _.trunc('hi-diddly-ho there, neighborino', {
 9589:       *   'length': 24,
 9590:       *   'separator': ' '
 9591:       * });
 9592:       * // => 'hi-diddly-ho there,...'
 9593:       *
 9594:       * _.trunc('hi-diddly-ho there, neighborino', {
 9595:       *   'length': 24,
 9596:       *   'separator': /,? +/
 9597:       * });
 9598:       * // => 'hi-diddly-ho there...'
 9599:       *
 9600:       * _.trunc('hi-diddly-ho there, neighborino', {
 9601:       *   'omission': ' [...]'
 9602:       * });
 9603:       * // => 'hi-diddly-ho there, neig [...]'
 9604:       */
 9605:          function trunc(string, options, guard) {
 9606:              var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
 9607:              if (isObject(options)) {
 9608:                  var separator = 'separator' in options ? options.separator : separator;
 9609:                  length = 'length' in options ? toInteger(options.length) : length;
 9610:                  omission = 'omission' in options ? baseToString(options.omission) : omission;
 9611:              }
 9612:              string = baseToString(string);
 9613:              if (length >= string.length) {
 9614:                  return string;
***** LODASH\RD\ORIGINAL.JS
 9572:       *
 9573:       * _.trimRight('  abc  ');
 9574:       * // => '  abc'
 9575:       *
 9576:       * _.trimRight('-_-abc-_-', '_-');
 9577:       * // => '-_-abc'
 9578:       */
 9579:          function trimRight(string, chars, guard) {
 9580:              var value = string;
 9581:              string = baseToString(string);
 9582:              if (!string) {
 9583:                  return string;
*****

***** LODASH\RD\29.js
 9615:              }
 9616:              var end = length - omission.length;
 9617:              if (end < 1) {
 9618:                  return omission;
 9619:              }
 9620:              var result = string.slice(0, end);
 9621:              if (separator == null) {
 9622:                  return result + omission;
 9623:              }
 9624:              if (isRegExp(separator)) {
 9625:                  if (string.slice(end).search(separator)) {
 9626:                      var match, newEnd, substring = string.slice(0, end);
 9627:                      if (!separator.global) {
 9628:                          separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
 9629:                      }
 9630:                      separator.lastIndex = 0;
 9631:                      while (match = separator.exec(substring)) {
 9632:                          newEnd = match.index;
 9633:                      }
 9634:                      result = result.slice(0, newEnd == null ? end : newEnd);
 9635:                  }
 9636:              } else if (string.indexOf(separator, end) != end) {
 9637:                  var index = result.lastIndexOf(separator);
 9638:                  if (index > -1) {
 9639:                      result = result.slice(0, index);
 9640:                  }
 9641:              }
 9642:              return result + omission;
 9643:          }
***** LODASH\RD\ORIGINAL.JS
 9584:              }
 9585:              if (guard || chars == null) {
 9586:                  return string.slice(0, trimmedRightIndex(string) + 1);
 9587:              }
 9588:              return string.slice(0, charsRightIndex(string, chars + '') + 1);
 9589:          }
*****

***** LODASH\RD\29.js
 9644:          /**
 9645:       * The inverse of `_.escape`; this method converts the HTML entities
 9646:       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
 9647:       * corresponding characters.
 9648:       *
 9649:       * **Note:** No other HTML entities are unescaped. To unescape additional HTML
 9650:       * entities use a third-party library like [_he_](https://mths.be/he).
 9651:       *
***** LODASH\RD\ORIGINAL.JS
 9590:          /**
 9591:       * Truncates `string` if it's longer than the given maximum string length.
 9592:       * The last characters of the truncated string are replaced with the omission
 9593:       * string which defaults to "...".
 9594:       *
*****

***** LODASH\RD\29.js
 9654:       * @category String
 9655:       * @param {string} [string=''] The string to unescape.
 9656:       * @returns {string} Returns the unescaped string.
 9657:       * @example
***** LODASH\RD\ORIGINAL.JS
 9597:       * @category String
 9598:       * @param {string} [string=''] The string to truncate.
 9599:       * @param {Object} [options] The options object.
 9600:       * @param {number} [options.length=30] The maximum string length.
 9601:       * @param {string} [options.omission='...'] The string to indicate text is omitted.
 9602:       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
 9603:       * @returns {string} Returns the truncated string.
 9604:       * @example
*****

***** LODASH\RD\29.js
 9658:       *
 9659:       * _.unescape('fred, barney, &amp; pebbles');
 9660:       * // => 'fred, barney, & pebbles'
 9661:       */
 9662:          function unescape(string) {
 9663:              string = baseToString(string);
 9664:              return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
 9665:          }
***** LODASH\RD\ORIGINAL.JS
 9605:       *
 9606:       * _.trunc('hi-diddly-ho there, neighborino');
 9607:       * // => 'hi-diddly-ho there, neighbo...'
 9608:       *
 9609:       * _.trunc('hi-diddly-ho there, neighborino', {
 9610:       *   'length': 24,
 9611:       *   'separator': ' '
 9612:       * });
 9613:       * // => 'hi-diddly-ho there,...'
 9614:       *
 9615:       * _.trunc('hi-diddly-ho there, neighborino', {
 9616:       *   'length': 24,
 9617:       *   'separator': /,? +/
 9618:       * });
 9619:       * // => 'hi-diddly-ho there...'
 9620:       *
 9621:       * _.trunc('hi-diddly-ho there, neighborino', {
 9622:       *   'omission': ' [...]'
 9623:       * });
 9624:       * // => 'hi-diddly-ho there, neig [...]'
 9625:       */
 9626:          function trunc(string, options, guard) {
 9627:              var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
 9628:              if (isObject(options)) {
 9629:                  var separator = 'separator' in options ? options.separator : separator;
 9630:                  length = 'length' in options ? toInteger(options.length) : length;
 9631:                  omission = 'omission' in options ? baseToString(options.omission) : omission;
 9632:              }
 9633:              string = baseToString(string);
 9634:              if (length >= string.length) {
 9635:                  return string;
 9636:              }
 9637:              var end = length - omission.length;
 9638:              if (end < 1) {
 9639:                  return omission;
 9640:              }
 9641:              var result = string.slice(0, end);
 9642:              if (separator == null) {
 9643:                  return result + omission;
 9644:              }
 9645:              if (isRegExp(separator)) {
 9646:                  if (string.slice(end).search(separator)) {
 9647:                      var match, newEnd, substring = string.slice(0, end);
 9648:                      if (!separator.global) {
 9649:                          separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
 9650:                      }
 9651:                      separator.lastIndex = 0;
 9652:                      while (match = separator.exec(substring)) {
 9653:                          newEnd = match.index;
 9654:                      }
 9655:                      result = result.slice(0, newEnd == null ? end : newEnd);
 9656:                  }
 9657:              } else if (string.indexOf(separator, end) != end) {
 9658:                  var index = result.lastIndexOf(separator);
 9659:                  if (index > -1) {
 9660:                      result = result.slice(0, index);
 9661:                  }
 9662:              }
 9663:              return result + omission;
 9664:          }
*****

***** LODASH\RD\29.js
 9666:          /**
 9667:       * Splits `string` into an array of its words.
 9668:       *
***** LODASH\RD\ORIGINAL.JS
 9665:          /**
 9666:       * The inverse of `_.escape`; this method converts the HTML entities
 9667:       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
 9668:       * corresponding characters.
 9669:       *
 9670:       * **Note:** No other HTML entities are unescaped. To unescape additional HTML
 9671:       * entities use a third-party library like [_he_](https://mths.be/he).
 9672:       *
*****

***** LODASH\RD\29.js
 9671:       * @category String
 9672:       * @param {string} [string=''] The string to inspect.
 9673:       * @param {RegExp|string} [pattern] The pattern to match words.
 9674:       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
 9675:       * @returns {Array} Returns the words of `string`.
 9676:       * @example
***** LODASH\RD\ORIGINAL.JS
 9675:       * @category String
 9676:       * @param {string} [string=''] The string to unescape.
 9677:       * @returns {string} Returns the unescaped string.
 9678:       * @example
*****

***** LODASH\RD\29.js
 9677:       *
 9678:       * _.words('fred, barney, & pebbles');
 9679:       * // => ['fred', 'barney', 'pebbles']
 9680:       *
 9681:       * _.words('fred, barney, & pebbles', /[^, ]+/g);
 9682:       * // => ['fred', 'barney', '&', 'pebbles']
 9683:       */
 9684:          function words(string, pattern, guard) {
 9685:              string = baseToString(string);
 9686:              pattern = guard ? undefined : guard;
 9687:              return string.match(pattern || reWords) || [];
 9688:          }
 9689:          /*------------------------------------------------------------------------*/
 9690:          /**
 9691:       * Attempts to invoke `func`, returning either the result or the caught error
 9692:       * object. Any additional arguments are provided to `func` when it's invoked.
 9693:       *
***** LODASH\RD\ORIGINAL.JS
 9679:       *
 9680:       * _.unescape('fred, barney, &amp; pebbles');
 9681:       * // => 'fred, barney, & pebbles'
 9682:       */
 9683:          function unescape(string) {
 9684:              string = baseToString(string);
 9685:              return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
 9686:          }
 9687:          /**
 9688:       * Splits `string` into an array of its words.
 9689:       *
*****

***** LODASH\RD\29.js
 9695:       * @memberOf _
 9696:       * @category Utility
 9697:       * @param {Function} func The function to attempt.
 9698:       * @returns {*} Returns the `func` result or error object.
 9699:       * @example
***** LODASH\RD\ORIGINAL.JS
 9691:       * @memberOf _
 9692:       * @category String
 9693:       * @param {string} [string=''] The string to inspect.
 9694:       * @param {RegExp|string} [pattern] The pattern to match words.
 9695:       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
 9696:       * @returns {Array} Returns the words of `string`.
 9697:       * @example
*****

***** LODASH\RD\29.js
 9700:       *
 9701:       * // avoid throwing errors for invalid selectors
 9702:       * var elements = _.attempt(function(selector) {
 9703:       *   return document.querySelectorAll(selector);
 9704:       * }, '>_>');
 9705:       *
 9706:       * if (_.isError(elements)) {
 9707:       *   elements = [];
 9708:       * }
 9709:       */
 9710:          var attempt = restParam(function (func, args) {
 9711:              try {
 9712:                  return func.apply(undefined, args);
 9713:              } catch (e) {
 9714:                  return isError(e) ? e : new Error(e);
 9715:              }
 9716:          });
 9717:          /**
 9718:       * Creates a function that returns `value`.
 9719:       *
***** LODASH\RD\ORIGINAL.JS
 9698:       *
 9699:       * _.words('fred, barney, & pebbles');
 9700:       * // => ['fred', 'barney', 'pebbles']
 9701:       *
 9702:       * _.words('fred, barney, & pebbles', /[^, ]+/g);
 9703:       * // => ['fred', 'barney', '&', 'pebbles']
 9704:       */
 9705:          function words(string, pattern, guard) {
 9706:              string = baseToString(string);
 9707:              pattern = guard ? undefined : guard;
 9708:              return string.match(pattern || reWords) || [];
 9709:          }
 9710:          /*------------------------------------------------------------------------*/
 9711:          /**
 9712:       * Attempts to invoke `func`, returning either the result or the caught error
 9713:       * object. Any additional arguments are provided to `func` when it's invoked.
 9714:       *
*****

***** LODASH\RD\29.js
 9722:       * @category Utility
 9723:       * @param {*} value The value to return from the new function.
 9724:       * @returns {Function} Returns the new function.
 9725:       * @example
***** LODASH\RD\ORIGINAL.JS
 9717:       * @category Utility
 9718:       * @param {Function} func The function to attempt.
 9719:       * @returns {*} Returns the `func` result or error object.
 9720:       * @example
*****

***** LODASH\RD\29.js
 9726:       *
 9727:       * var object = { 'user': 'fred' };
 9728:       * var getter = _.constant(object);
 9729:       *
 9730:       * getter() === object;
 9731:       * // => true
 9732:       */
 9733:          function constant(value) {
 9734:              return function () {
 9735:                  return value;
 9736:              };
 9737:          }
 9738:          /**
 9739:       * This method returns the first argument provided to it.
 9740:       *
***** LODASH\RD\ORIGINAL.JS
 9721:       *
 9722:       * // avoid throwing errors for invalid selectors
 9723:       * var elements = _.attempt(function(selector) {
 9724:       *   return document.querySelectorAll(selector);
 9725:       * }, '>_>');
 9726:       *
 9727:       * if (_.isError(elements)) {
 9728:       *   elements = [];
 9729:       * }
 9730:       */
 9731:          var attempt = restParam(function (func, args) {
 9732:              try {
 9733:                  return func.apply(undefined, args);
 9734:              } catch (e) {
 9735:                  return isError(e) ? e : new Error(e);
 9736:              }
 9737:          });
 9738:          /**
 9739:       * Creates a function that returns `value`.
 9740:       *
*****

***** LODASH\RD\29.js
 9743:       * @category Utility
 9744:       * @param {*} value Any value.
 9745:       * @returns {*} Returns `value`.
 9746:       * @example
***** LODASH\RD\ORIGINAL.JS
 9743:       * @category Utility
 9744:       * @param {*} value The value to return from the new function.
 9745:       * @returns {Function} Returns the new function.
 9746:       * @example
*****

***** LODASH\RD\29.js
 9748:       * var object = { 'user': 'fred' };
 9749:       *
 9750:       * _.identity(object) === object;
 9751:       * // => true
***** LODASH\RD\ORIGINAL.JS
 9748:       * var object = { 'user': 'fred' };
 9749:       * var getter = _.constant(object);
 9750:       *
 9751:       * getter() === object;
 9752:       * // => true
*****

***** LODASH\RD\29.js
 9752:       */
 9753:          function identity(value) {
 9754:              return value;
 9755:          }
***** LODASH\RD\ORIGINAL.JS
 9753:       */
 9754:          function constant(value) {
 9755:              return function () {
 9756:                  return value;
 9757:              };
 9758:          }
*****

***** LODASH\RD\29.js
 9756:          /**
 9757:       * Creates a function that invokes `func` with the arguments of the created
 9758:       * function. If `func` is a property name the created callback returns the
 9759:       * property value for a given element. If `func` is an object the created
 9760:       * callback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.
 9761:       *
***** LODASH\RD\ORIGINAL.JS
 9759:          /**
 9760:       * This method returns the first argument provided to it.
 9761:       *
*****

***** LODASH\RD\29.js
 9764:       * @category Utility
 9765:       * @param {*} [func=_.identity] The value to convert to a callback.
 9766:       * @returns {Function} Returns the callback.
 9767:       * @example
***** LODASH\RD\ORIGINAL.JS
 9764:       * @category Utility
 9765:       * @param {*} value Any value.
 9766:       * @returns {*} Returns `value`.
 9767:       * @example
*****

***** LODASH\RD\29.js
 9768:       *
 9769:       * var users = [
***** LODASH\RD\ORIGINAL.JS
 9768:       *
 9769:       * var object = { 'user': 'fred' };
 9770:       *
 9771:       * _.identity(object) === object;
 9772:       * // => true
 9773:       */
 9774:          function identity(value) {
 9775:              return value;
 9776:          }
 9777:          /**
 9778:       * Creates a function that invokes `func` with the arguments of the created
 9779:       * function. If `func` is a property name the created callback returns the
 9780:       * property value for a given element. If `func` is an object the created
 9781:       * callback returns `true` for elements that contain the equivalent object properties, otherwise it returns `false`.
 9782:       *
 9783:       * @static
 9784:       * @memberOf _
 9785:       * @category Utility
 9786:       * @param {*} [func=_.identity] The value to convert to a callback.
 9787:       * @returns {Function} Returns the callback.
 9788:       * @example
 9789:       *
 9790:       * var users = [
*****

***** LODASH\RD\29.js
10393:          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
10394:          // Add functions to the `Map` cache.
***** LODASH\RD\ORIGINAL.JS
10414:          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
10415:          LazyWrapper.prototype.constructor = LazyWrapper;
10416:          // Add functions to the `Map` cache.
*****

