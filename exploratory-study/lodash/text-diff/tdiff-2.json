Comparing files LODASH\RD\2.js and LODASH\RD\ORIGINAL.JS
***** LODASH\RD\2.js
  267:      var freeWindow = checkGlobal(objectTypes[typeof window] && window);
  268:      var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;
***** LODASH\RD\ORIGINAL.JS
  267:      var freeWindow = checkGlobal(objectTypes[typeof window] && window);
  268:      /** Detect the popular CommonJS extension `module.exports`. */
  269:      var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : null;
*****

***** LODASH\RD\2.js
  650:          // ES5 clears this up by stating that literals must use built-in constructors.
  651:          context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
***** LODASH\RD\ORIGINAL.JS
  651:          // ES5 clears this up by stating that literals must use built-in constructors.
  652:          // See https://es5.github.io/#x11.1.5 for more details.
  653:          context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
*****

***** LODASH\RD\2.js
  677:          var ArrayBuffer = context.ArrayBuffer, Reflect = context.Reflect, Set = getNative(context, 'Set'), Uint8Array = context
  678:  .Uint8Array, WeakMap, clearTimeout = context.clearTimeout, enumerate = Reflect ? Reflect.enumerate : undefined, getPrototypeOf 
  679:  = Object.getPrototypeOf, parseFloat = context.parseFloat, pow = Math.pow, propertyIsEnumerable = objectProto.propertyIsEnumerab
  680:  le, setTimeout = context.setTimeout, splice = arrayProto.splice;
  681:          /* Native method references for those with the same name as other `lodash` methods. */
***** LODASH\RD\ORIGINAL.JS
  679:          var ArrayBuffer = context.ArrayBuffer, Reflect = context.Reflect, Set = getNative(context, 'Set'), Uint8Array = context
  680:  .Uint8Array, WeakMap = getNative(context, 'WeakMap'), clearTimeout = context.clearTimeout, enumerate = Reflect ? Reflect.enumer
  681:  ate : undefined, getPrototypeOf = Object.getPrototypeOf, parseFloat = context.parseFloat, pow = Math.pow, propertyIsEnumerable 
  682:  = objectProto.propertyIsEnumerable, setTimeout = context.setTimeout, splice = arrayProto.splice;
  683:          /* Native method references for those with the same name as other `lodash` methods. */
*****

***** LODASH\RD\2.js
 2600:                  iteratee = getIteratee(iteratee);
 2601:                  if (isArray()) {
 2602:                      var index = -1, length = collection.length;
***** LODASH\RD\ORIGINAL.JS
 2602:                  iteratee = getIteratee(iteratee);
 2603:                  if (isArray(collection)) {
 2604:                      var index = -1, length = collection.length;
*****

***** LODASH\RD\2.js
 3282:                      end = nativeMin(end, start + size);
 3283:                  case 'takeRight':
***** LODASH\RD\ORIGINAL.JS
 3284:                      end = nativeMin(end, start + size);
 3285:                      break;
 3286:                  case 'takeRight':
*****

***** LODASH\RD\2.js
 3493:              if (func === other) {
 3494:              }
***** LODASH\RD\ORIGINAL.JS
 3496:              if (func === other) {
 3497:                  return true;
 3498:              }
*****

***** LODASH\RD\2.js
 3961:              if (!length) {
 3962:                  return;
 3963:              }
***** LODASH\RD\ORIGINAL.JS
 3965:              if (!length) {
 3966:                  return [];
 3967:              }
*****

***** LODASH\RD\2.js
 5945:          /*------------------------------------------------------------------------*/
 5946:          var now = Date.now;
 5947:          /*------------------------------------------------------------------------*/
 5948:          /**
 5949:       * The opposite of `_.before`; this method creates a function that invokes
 5950:       * `func` once it's called `n` or more times.
 5951:       *
***** LODASH\RD\ORIGINAL.JS
 5949:          /*------------------------------------------------------------------------*/
 5950:          /**
 5951:       * Gets the timestamp of the number of milliseconds that have elapsed since
 5952:       * the Unix epoch (1 January 1970 00:00:00 UTC).
 5953:       *
*****

***** LODASH\RD\2.js
 5953:       * @memberOf _
 5954:       * @category Function
 5955:       * @param {number} n The number of calls before `func` is invoked.
 5956:       * @param {Function} func The function to restrict.
 5957:       * @returns {Function} Returns the new restricted function.
 5958:       * @example
***** LODASH\RD\ORIGINAL.JS
 5955:       * @memberOf _
 5956:       * @type Function
 5957:       * @category Date
 5958:       * @returns {number} Returns the timestamp.
 5959:       * @example
*****

***** LODASH\RD\2.js
 5959:       *
 5960:       * var saves = ['profile', 'settings'];
***** LODASH\RD\ORIGINAL.JS
 5960:       *
 5961:       * _.defer(function(stamp) {
 5962:       *   console.log(_.now() - stamp);
 5963:       * }, _.now());
 5964:       * // => logs the number of milliseconds it took for the deferred function to be invoked
 5965:       */
 5966:          var now = Date.now;
 5967:          /*------------------------------------------------------------------------*/
 5968:          /**
 5969:       * The opposite of `_.before`; this method creates a function that invokes
 5970:       * `func` once it's called `n` or more times.
 5971:       *
 5972:       * @static
 5973:       * @memberOf _
 5974:       * @category Function
 5975:       * @param {number} n The number of calls before `func` is invoked.
 5976:       * @param {Function} func The function to restrict.
 5977:       * @returns {Function} Returns the new restricted function.
 5978:       * @example
 5979:       *
 5980:       * var saves = ['profile', 'settings'];
*****

***** LODASH\RD\2.js
 8717:          }
 8718:          function transform(object, iteratee, accumulator) {
 8719:              var isArr = isArray(object) || isTypedArray(object);
 8720:              iteratee = getIteratee(iteratee);
 8721:              if (accumulator == null) {
 8722:                  if (isArr || isObject(object)) {
 8723:                      var Ctor = object.constructor;
 8724:                      if (isArr) {
 8725:                          accumulator = isArray(object) ? new Ctor() : [];
 8726:                      } else {
 8727:                          accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
 8728:                      }
 8729:                  } else {
 8730:                      accumulator = {};
 8731:                  }
 8732:              }
 8733:              (isArr ? arrayEach : baseForOwn)(object, function (value, index, object) {
 8734:                  return iteratee(accumulator, value, index, object);
 8735:              });
 8736:              return accumulator;
 8737:          }
 8738:          /**
 8739:       * Creates an array of the own enumerable property values of `object`.
 8740:       *
 8741:       * **Note:** Non-object values are coerced to objects.
 8742:       *
***** LODASH\RD\ORIGINAL.JS
 8737:          }
 8738:          /**
 8739:       * An alternative to `_.reduce`; this method transforms `object` to a new
 8740:       * `accumulator` object which is the result of running each of its own enumerable
 8741:       * properties through `iteratee`, with each invocation potentially mutating
 8742:       * the `accumulator` object. The iteratee is invoked with four arguments:
 8743:       * (accumulator, value, key, object). Iteratee functions may exit iteration
 8744:       * early by explicitly returning `false`.
 8745:       *
*****

***** LODASH\RD\2.js
 8745:       * @category Object
 8746:       * @param {Object} object The object to query.
 8747:       * @returns {Array} Returns the array of property values.
 8748:       * @example
***** LODASH\RD\ORIGINAL.JS
 8748:       * @category Object
 8749:       * @param {Array|Object} object The object to iterate over.
 8750:       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 8751:       * @param {*} [accumulator] The custom accumulator value.
 8752:       * @returns {*} Returns the accumulated value.
 8753:       * @example
*****

***** LODASH\RD\2.js
 8749:       *
 8750:       * function Foo() {
 8751:       *   this.a = 1;
 8752:       *   this.b = 2;
 8753:       * }
 8754:       *
 8755:       * Foo.prototype.c = 3;
 8756:       *
 8757:       * _.values(new Foo);
 8758:       * // => [1, 2] (iteration order is not guaranteed)
 8759:       *
 8760:       * _.values('hi');
 8761:       * // => ['h', 'i']
 8762:       */
 8763:          function values(object) {
 8764:              return object ? baseValues(object, keys(object)) : [];
 8765:          }
***** LODASH\RD\ORIGINAL.JS
 8754:       *
 8755:       * _.transform([2, 3, 4], function(result, n) {
 8756:       *   result.push(n *= n);
 8757:       *   return n % 2 == 0;
 8758:       * });
 8759:       * // => [4, 9]
 8760:       *
 8761:       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 8762:       *   (result[value] || (result[value] = [])).push(key);
 8763:       * });
 8764:       * // => { '1': ['a', 'c'], '2': ['b'] }
 8765:       */
 8766:          function transform(object, iteratee, accumulator) {
 8767:              var isArr = isArray(object) || isTypedArray(object);
 8768:              iteratee = getIteratee(iteratee);
 8769:              if (accumulator == null) {
 8770:                  if (isArr || isObject(object)) {
 8771:                      var Ctor = object.constructor;
 8772:                      if (isArr) {
 8773:                          accumulator = isArray(object) ? new Ctor() : [];
 8774:                      } else {
 8775:                          accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
 8776:                      }
 8777:                  } else {
 8778:                      accumulator = {};
 8779:                  }
 8780:              }
 8781:              (isArr ? arrayEach : baseForOwn)(object, function (value, index, object) {
 8782:                  return iteratee(accumulator, value, index, object);
 8783:              });
 8784:              return accumulator;
 8785:          }
*****

***** LODASH\RD\2.js
 8766:          /**
 8767:       * Creates an array of the own and inherited enumerable property values
 8768:       * of `object`.
 8769:       *
***** LODASH\RD\ORIGINAL.JS
 8786:          /**
 8787:       * Creates an array of the own enumerable property values of `object`.
 8788:       *
*****

***** LODASH\RD\2.js
 8785:       *
 8786:       * _.valuesIn(new Foo);
 8787:       * // => [1, 2, 3] (iteration order is not guaranteed)
 8788:       */
 8789:          function valuesIn(object) {
 8790:              return object == null ? baseValues(object, keysIn(object)) : [];
 8791:          }
 8792:          /*------------------------------------------------------------------------*/
 8793:          /**
 8794:       * Checks if `n` is between `start` and up to but not including, `end`. If
 8795:       * `end` is not specified it's set to `start` with `start` then set to `0`.
 8796:       * If `start` is greater than `end` the params are swapped to support
 8797:       * negative ranges.
 8798:       *
***** LODASH\RD\ORIGINAL.JS
 8804:       *
 8805:       * _.values(new Foo);
 8806:       * // => [1, 2] (iteration order is not guaranteed)
 8807:       *
 8808:       * _.values('hi');
 8809:       * // => ['h', 'i']
 8810:       */
 8811:          function values(object) {
 8812:              return object ? baseValues(object, keys(object)) : [];
 8813:          }
 8814:          /**
 8815:       * Creates an array of the own and inherited enumerable property values
 8816:       * of `object`.
 8817:       *
 8818:       * **Note:** Non-object values are coerced to objects.
 8819:       *
*****

***** LODASH\RD\2.js
 8800:       * @memberOf _
 8801:       * @category Number
 8802:       * @param {number} n The number to check.
 8803:       * @param {number} [start=0] The start of the range.
 8804:       * @param {number} end The end of the range.
 8805:       * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
 8806:       * @example
***** LODASH\RD\ORIGINAL.JS
 8821:       * @memberOf _
 8822:       * @category Object
 8823:       * @param {Object} object The object to query.
 8824:       * @returns {Array} Returns the array of property values.
 8825:       * @example
*****

***** LODASH\RD\2.js
 8807:       *
 8808:       * _.inRange(3, 2, 4);
***** LODASH\RD\ORIGINAL.JS
 8826:       *
 8827:       * function Foo() {
 8828:       *   this.a = 1;
 8829:       *   this.b = 2;
 8830:       * }
 8831:       *
 8832:       * Foo.prototype.c = 3;
 8833:       *
 8834:       * _.valuesIn(new Foo);
 8835:       * // => [1, 2, 3] (iteration order is not guaranteed)
 8836:       */
 8837:          function valuesIn(object) {
 8838:              return object == null ? baseValues(object, keysIn(object)) : [];
 8839:          }
 8840:          /*------------------------------------------------------------------------*/
 8841:          /**
 8842:       * Checks if `n` is between `start` and up to but not including, `end`. If
 8843:       * `end` is not specified it's set to `start` with `start` then set to `0`.
 8844:       * If `start` is greater than `end` the params are swapped to support
 8845:       * negative ranges.
 8846:       *
 8847:       * @static
 8848:       * @memberOf _
 8849:       * @category Number
 8850:       * @param {number} n The number to check.
 8851:       * @param {number} [start=0] The start of the range.
 8852:       * @param {number} end The end of the range.
 8853:       * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
 8854:       * @example
 8855:       *
 8856:       * _.inRange(3, 2, 4);
*****

***** LODASH\RD\2.js
 9765:          }
 9766:          function matches(source) {
 9767:              return baseMatches(baseClone(source, true));
 9768:          }
 9769:          /**
 9770:       * Creates a function that compares the value at `path` of a given object
 9771:       * to `srcValue`.
 9772:       *
***** LODASH\RD\ORIGINAL.JS
 9813:          }
 9814:          /**
 9815:       * Creates a function that performs a deep comparison between a given object
 9816:       * and `source`, returning `true` if the given object has equivalent property
 9817:       * values, else `false`.
 9818:       *
*****

***** LODASH\RD\2.js
 9773:       * **Note:** This method supports comparing arrays, booleans, `Date` objects,
 9774:       * numbers, `Object` objects, regexes, and strings.
 9775:       *
***** LODASH\RD\ORIGINAL.JS
 9819:       * **Note:** This method supports comparing arrays, booleans, `Date` objects,
 9820:       * numbers, `Object` objects, regexes, and strings. Objects are compared by
 9821:       * their own and inherited enumerable properties. For comparing a single
 9822:       * value see `_.matchesProperty`.
 9823:       *
*****

***** LODASH\RD\2.js
 9778:       * @category Utility
 9779:       * @param {Array|string} path The path of the property to get.
 9780:       * @param {*} srcValue The value to match.
 9781:       * @returns {Function} Returns the new function.
***** LODASH\RD\ORIGINAL.JS
 9826:       * @category Utility
 9827:       * @param {Object} source The object of property values to match.
 9828:       * @returns {Function} Returns the new function.
*****

***** LODASH\RD\2.js
 9784:       * var users = [
 9785:       *   { 'user': 'barney' },
 9786:       *   { 'user': 'fred' }
 9787:       * ];
***** LODASH\RD\ORIGINAL.JS
 9831:       * var users = [
 9832:       *   { 'user': 'barney', 'age': 36, 'active': true },
 9833:       *   { 'user': 'fred',   'age': 40, 'active': false }
 9834:       * ];
*****

***** LODASH\RD\2.js
 9788:       *
 9789:       * _.find(users, _.matchesProperty('user', 'fred'));
 9790:       * // => { 'user': 'fred' }
 9791:       */
 9792:          function matchesProperty(path, srcValue) {
 9793:              return baseMatchesProperty(path, baseClone(srcValue, true));
 9794:          }
***** LODASH\RD\ORIGINAL.JS
 9835:       *
 9836:       * _.filter(users, _.matches({ 'age': 40, 'active': false }));
 9837:       * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
 9838:       */
 9839:          function matches(source) {
 9840:              return baseMatches(baseClone(source, true));
 9841:          }
*****

***** LODASH\RD\2.js
 9795:          /**
 9796:       * Creates a function that invokes the method at `path` of a given object.
 9797:       * Any additional arguments are provided to the invoked method.
 9798:       *
***** LODASH\RD\ORIGINAL.JS
 9842:          /**
 9843:       * Creates a function that compares the value at `path` of a given object
 9844:       * to `srcValue`.
 9845:       *
 9846:       * **Note:** This method supports comparing arrays, booleans, `Date` objects,
 9847:       * numbers, `Object` objects, regexes, and strings.
 9848:       *
*****

***** LODASH\RD\2.js
 9801:       * @category Utility
 9802:       * @param {Array|string} path The path of the method to invoke.
 9803:       * @param {...*} [args] The arguments to invoke the method with.
 9804:       * @returns {Function} Returns the new function.
***** LODASH\RD\ORIGINAL.JS
 9851:       * @category Utility
 9852:       * @param {Array|string} path The path of the property to get.
 9853:       * @param {*} srcValue The value to match.
 9854:       * @returns {Function} Returns the new function.
*****

***** LODASH\RD\2.js
 9806:       *
 9807:       * var objects = [
 9808:       *   { 'a': { 'b': { 'c': _.constant(2) } } },
 9809:       *   { 'a': { 'b': { 'c': _.constant(1) } } }
 9810:       * ];
***** LODASH\RD\ORIGINAL.JS
 9856:       *
 9857:       * var users = [
 9858:       *   { 'user': 'barney' },
 9859:       *   { 'user': 'fred' }
 9860:       * ];
*****

***** LODASH\RD\2.js
 9811:       *
 9812:       * _.map(objects, _.method('a.b.c'));
 9813:       * // => [2, 1]
 9814:       *
 9815:       * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
 9816:       * // => [1, 2]
 9817:       */
 9818:          var method = restParam(function (path, args) {
 9819:              return function (object) {
 9820:                  return invokePath(object, path, args);
 9821:              };
 9822:          });
 9823:          /**
 9824:       * The opposite of `_.method`; this method creates a function that invokes
 9825:       * the method at a given path of `object`. Any additional arguments are
 9826:       * provided to the invoked method.
 9827:       *
***** LODASH\RD\ORIGINAL.JS
 9861:       *
 9862:       * _.find(users, _.matchesProperty('user', 'fred'));
 9863:       * // => { 'user': 'fred' }
 9864:       */
 9865:          function matchesProperty(path, srcValue) {
 9866:              return baseMatchesProperty(path, baseClone(srcValue, true));
 9867:          }
 9868:          /**
 9869:       * Creates a function that invokes the method at `path` of a given object.
 9870:       * Any additional arguments are provided to the invoked method.
 9871:       *
*****

***** LODASH\RD\2.js
 9830:       * @category Utility
 9831:       * @param {Object} object The object to query.
 9832:       * @param {...*} [args] The arguments to invoke the method with.
***** LODASH\RD\ORIGINAL.JS
 9874:       * @category Utility
 9875:       * @param {Array|string} path The path of the method to invoke.
 9876:       * @param {...*} [args] The arguments to invoke the method with.
*****

***** LODASH\RD\2.js
 9835:       *
 9836:       * var array = _.times(3, _.constant),
 9837:       *     object = { 'a': array, 'b': array, 'c': array };
 9838:       *
 9839:       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
 9840:       * // => [2, 0]
 9841:       *
 9842:       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
 9843:       * // => [2, 0]
 9844:       */
 9845:          var methodOf = restParam(function (object, args) {
 9846:              return function (path) {
 9847:                  return invokePath(object, path, args);
***** LODASH\RD\ORIGINAL.JS
 9879:       *
 9880:       * var objects = [
 9881:       *   { 'a': { 'b': { 'c': _.constant(2) } } },
 9882:       *   { 'a': { 'b': { 'c': _.constant(1) } } }
 9883:       * ];
 9884:       *
 9885:       * _.map(objects, _.method('a.b.c'));
 9886:       * // => [2, 1]
 9887:       *
 9888:       * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
 9889:       * // => [1, 2]
 9890:       */
 9891:          var method = restParam(function (path, args) {
 9892:              return function (object) {
 9893:                  return invokePath(object, path, args);
*****

***** LODASH\RD\2.js
 9850:          /**
 9851:       * Adds all own enumerable function properties of a source object to the
 9852:       * destination object. If `object` is a function then methods are added to
 9853:       * its prototype as well.
 9854:       *
 9855:       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
 9856:       * avoid conflicts caused by modifying the original.
 9857:       *
***** LODASH\RD\ORIGINAL.JS
 9896:          /**
 9897:       * The opposite of `_.method`; this method creates a function that invokes
 9898:       * the method at a given path of `object`. Any additional arguments are
 9899:       * provided to the invoked method.
 9900:       *
*****

***** LODASH\RD\2.js
 9860:       * @category Utility
 9861:       * @param {Function|Object} [object=lodash] The destination object.
 9862:       * @param {Object} source The object of functions to add.
 9863:       * @param {Object} [options] The options object.
 9864:       * @param {boolean} [options.chain=true] Specify whether the functions added
 9865:       *  are chainable.
 9866:       * @returns {Function|Object} Returns `object`.
 9867:       * @example
***** LODASH\RD\ORIGINAL.JS
 9903:       * @category Utility
 9904:       * @param {Object} object The object to query.
 9905:       * @param {...*} [args] The arguments to invoke the method with.
 9906:       * @returns {Function} Returns the new function.
 9907:       * @example
*****

***** LODASH\RD\2.js
 9868:       *
 9869:       * function vowels(string) {
***** LODASH\RD\ORIGINAL.JS
 9908:       *
 9909:       * var array = _.times(3, _.constant),
 9910:       *     object = { 'a': array, 'b': array, 'c': array };
 9911:       *
 9912:       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
 9913:       * // => [2, 0]
 9914:       *
 9915:       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
 9916:       * // => [2, 0]
 9917:       */
 9918:          var methodOf = restParam(function (object, args) {
 9919:              return function (path) {
 9920:                  return invokePath(object, path, args);
 9921:              };
 9922:          });
 9923:          /**
 9924:       * Adds all own enumerable function properties of a source object to the
 9925:       * destination object. If `object` is a function then methods are added to
 9926:       * its prototype as well.
 9927:       *
 9928:       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
 9929:       * avoid conflicts caused by modifying the original.
 9930:       *
 9931:       * @static
 9932:       * @memberOf _
 9933:       * @category Utility
 9934:       * @param {Function|Object} [object=lodash] The destination object.
 9935:       * @param {Object} source The object of functions to add.
 9936:       * @param {Object} [options] The options object.
 9937:       * @param {boolean} [options.chain=true] Specify whether the functions added
 9938:       *  are chainable.
 9939:       * @returns {Function|Object} Returns `object`.
 9940:       * @example
 9941:       *
 9942:       * function vowels(string) {
*****

