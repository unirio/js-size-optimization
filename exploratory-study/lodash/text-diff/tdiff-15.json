Comparing files LODASH\RD\15.js and LODASH\RD\ORIGINAL.JS
***** LODASH\RD\15.js
  266:      /** Detect free variable `window`. */
  267:      var freeWindow = checkGlobal();
  268:      /** Detect the popular CommonJS extension `module.exports`. */
***** LODASH\RD\ORIGINAL.JS
  266:      /** Detect free variable `window`. */
  267:      var freeWindow = checkGlobal(objectTypes[typeof window] && window);
  268:      /** Detect the popular CommonJS extension `module.exports`. */
*****

***** LODASH\RD\15.js
 1810:              }
 1811:              var objIsObj = objTag == objectTag && !isHostObject(), othIsObj = othTag == objectTag && !isHostObject(other), isSa
 1812:  meTag = objTag == othTag;
 1813:              if (isSameTag && !(objIsArr || objIsObj)) {
***** LODASH\RD\ORIGINAL.JS
 1810:              }
 1811:              var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other)
 1812:  , isSameTag = objTag == othTag;
 1813:              if (isSameTag && !(objIsArr || objIsObj)) {
*****

***** LODASH\RD\15.js
 1924:                  while (!(data = iterator.next()).done) {
 1925:                  }
***** LODASH\RD\ORIGINAL.JS
 1924:                  while (!(data = iterator.next()).done) {
 1925:                      result.push(data.value);
 1926:                  }
*****

***** LODASH\RD\15.js
 3372:              case uint8Tag:
 3373:              default:
 3374:              case uint16Tag:
***** LODASH\RD\ORIGINAL.JS
 3373:              case uint8Tag:
 3374:              case uint8ClampedTag:
 3375:              case uint16Tag:
*****

***** LODASH\RD\15.js
 7288:          }
 7289:          function isEqualWith(value, other, customizer) {
 7290:              customizer = typeof customizer == 'function' ? customizer : undefined;
 7291:              var result = customizer ? customizer(value, other) : undefined;
 7292:              return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
 7293:          }
 7294:          /**
 7295:       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 7296:       * `SyntaxError`, `TypeError`, or `URIError` object.
 7297:       *
***** LODASH\RD\ORIGINAL.JS
 7289:          }
 7290:          /**
 7291:       * This method is like `_.isEqual` except that it accepts `customizer` which is
 7292:       * invoked to compare values. If `customizer` returns `undefined` comparisons are
 7293:       * handled by the method instead. The `customizer` is invoked with up to seven arguments:
 7294:       * (objValue, othValue [, index|key, object, other, stackA, stackB]).
 7295:       *
*****

***** LODASH\RD\15.js
 7300:       * @category Lang
 7301:       * @param {*} value The value to check.
 7302:       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 7303:       * @example
***** LODASH\RD\ORIGINAL.JS
 7298:       * @category Lang
 7299:       * @param {*} value The value to compare.
 7300:       * @param {*} other The other value to compare.
 7301:       * @param {Function} [customizer] The function to customize comparisons.
 7302:       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 7303:       * @example
*****

***** LODASH\RD\15.js
 7304:       *
 7305:       * _.isError(new Error);
 7306:       * // => true
 7307:       *
 7308:       * _.isError(Error);
 7309:       * // => false
 7310:       */
 7311:          function isError(value) {
 7312:              return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
 7313:          }
***** LODASH\RD\ORIGINAL.JS
 7304:       *
 7305:       * var array = ['hello', 'goodbye'];
 7306:       * var other = ['hi', 'goodbye'];
 7307:       *
 7308:       * _.isEqualWith(array, other, function(value, other) {
 7309:       *   var reHello = /^h(?:i|ello)$/;
 7310:       *   if (reHello.test(value) && reHello.test(other)) {
 7311:       *     return true;
 7312:       *   }
 7313:       * });
 7314:       * // => true
 7315:       */
 7316:          function isEqualWith(value, other, customizer) {
 7317:              customizer = typeof customizer == 'function' ? customizer : undefined;
 7318:              var result = customizer ? customizer(value, other) : undefined;
 7319:              return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
 7320:          }
*****

***** LODASH\RD\15.js
 7314:          /**
 7315:       * Checks if `value` is a finite primitive number.
 7316:       *
 7317:       * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
 7318:       *
***** LODASH\RD\ORIGINAL.JS
 7321:          /**
 7322:       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 7323:       * `SyntaxError`, `TypeError`, or `URIError` object.
 7324:       *
*****

***** LODASH\RD\15.js
 7322:       * @param {*} value The value to check.
 7323:       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
 7324:       * @example
***** LODASH\RD\ORIGINAL.JS
 7328:       * @param {*} value The value to check.
 7329:       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 7330:       * @example
*****

***** LODASH\RD\15.js
 7325:       *
 7326:       * _.isFinite(10);
 7327:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7331:       *
 7332:       * _.isError(new Error);
 7333:       * // => true
*****

***** LODASH\RD\15.js
 7328:       *
 7329:       * _.isFinite('10');
 7330:       * // => false
 7331:       *
 7332:       * _.isFinite(true);
 7333:       * // => false
 7334:       *
 7335:       * _.isFinite(Object(10));
 7336:       * // => false
 7337:       *
 7338:       * _.isFinite(Infinity);
 7339:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7334:       *
 7335:       * _.isError(Error);
 7336:       * // => false
*****

***** LODASH\RD\15.js
 7340:       */
 7341:          function isFinite(value) {
 7342:              return typeof value == 'number' && nativeIsFinite(value);
 7343:          }
***** LODASH\RD\ORIGINAL.JS
 7337:       */
 7338:          function isError(value) {
 7339:              return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
 7340:          }
*****

***** LODASH\RD\15.js
 7344:          /**
 7345:       * Checks if `value` is classified as a `Function` object.
 7346:       *
***** LODASH\RD\ORIGINAL.JS
 7341:          /**
 7342:       * Checks if `value` is a finite primitive number.
 7343:       *
 7344:       * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
 7345:       *
*****

***** LODASH\RD\15.js
 7350:       * @param {*} value The value to check.
 7351:       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 7352:       * @example
***** LODASH\RD\ORIGINAL.JS
 7349:       * @param {*} value The value to check.
 7350:       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
 7351:       * @example
*****

***** LODASH\RD\15.js
 7353:       *
 7354:       * _.isFunction(_);
 7355:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7352:       *
 7353:       * _.isFinite(10);
 7354:       * // => true
*****

***** LODASH\RD\15.js
 7356:       *
 7357:       * _.isFunction(/abc/);
 7358:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7355:       *
 7356:       * _.isFinite('10');
 7357:       * // => false
 7358:       *
 7359:       * _.isFinite(true);
 7360:       * // => false
 7361:       *
 7362:       * _.isFinite(Object(10));
 7363:       * // => false
 7364:       *
 7365:       * _.isFinite(Infinity);
 7366:       * // => false
*****

***** LODASH\RD\15.js
 7359:       */
 7360:          function isFunction(value) {
 7361:              // The use of `Object#toString` avoids issues with the `typeof` operator
 7362:              // in Safari 8 which returns 'object' for typed array constructors, and
 7363:              // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
 7364:              return isObject(value) && objToString.call(value) == funcTag;
 7365:          }
***** LODASH\RD\ORIGINAL.JS
 7367:       */
 7368:          function isFinite(value) {
 7369:              return typeof value == 'number' && nativeIsFinite(value);
 7370:          }
*****

***** LODASH\RD\15.js
 7366:          /**
 7367:       * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 7368:       * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 7369:       *
***** LODASH\RD\ORIGINAL.JS
 7371:          /**
 7372:       * Checks if `value` is classified as a `Function` object.
 7373:       *
*****

***** LODASH\RD\15.js
 7373:       * @param {*} value The value to check.
 7374:       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 7375:       * @example
***** LODASH\RD\ORIGINAL.JS
 7377:       * @param {*} value The value to check.
 7378:       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 7379:       * @example
*****

***** LODASH\RD\15.js
 7376:       *
 7377:       * _.isObject({});
 7378:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7380:       *
 7381:       * _.isFunction(_);
 7382:       * // => true
*****

***** LODASH\RD\15.js
 7379:       *
 7380:       * _.isObject([1, 2, 3]);
 7381:       * // => true
 7382:       *
 7383:       * _.isObject(1);
 7384:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7383:       *
 7384:       * _.isFunction(/abc/);
 7385:       * // => false
*****

***** LODASH\RD\15.js
 7385:       */
 7386:          function isObject(value) {
 7387:              // Avoid a V8 JIT bug in Chrome 19-20.
 7388:              // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
 7389:              var type = typeof value;
 7390:              return !!value && (type == 'object' || type == 'function');
 7391:          }
***** LODASH\RD\ORIGINAL.JS
 7386:       */
 7387:          function isFunction(value) {
 7388:              // The use of `Object#toString` avoids issues with the `typeof` operator
 7389:              // in Safari 8 which returns 'object' for typed array constructors, and
 7390:              // PhantomJS 1.9 which returns 'function' for `NodeList` instances.
 7391:              return isObject(value) && objToString.call(value) == funcTag;
 7392:          }
*****

***** LODASH\RD\15.js
 7392:          /**
 7393:       * Performs a deep comparison between `object` and `source` to determine if
 7394:       * `object` contains equivalent property values.
 7395:       *
 7396:       * **Note:** This method supports comparing properties of arrays, booleans,
 7397:       * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
 7398:       * and DOM nodes are **not** supported. Provide a customizer function to extend
 7399:       * support for comparing other values.
 7400:       *
***** LODASH\RD\ORIGINAL.JS
 7393:          /**
 7394:       * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 7395:       * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 7396:       *
*****

***** LODASH\RD\15.js
 7403:       * @category Lang
 7404:       * @param {Object} object The object to inspect.
 7405:       * @param {Object} source The object of property values to match.
 7406:       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 7407:       * @example
***** LODASH\RD\ORIGINAL.JS
 7399:       * @category Lang
 7400:       * @param {*} value The value to check.
 7401:       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 7402:       * @example
*****

***** LODASH\RD\15.js
 7408:       *
 7409:       * var object = { 'user': 'fred', 'age': 40 };
 7410:       *
 7411:       * _.isMatch(object, { 'age': 40 });
 7412:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7403:       *
 7404:       * _.isObject({});
 7405:       * // => true
*****

***** LODASH\RD\15.js
 7413:       *
 7414:       * _.isMatch(object, { 'age': 36 });
 7415:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7406:       *
 7407:       * _.isObject([1, 2, 3]);
 7408:       * // => true
 7409:       *
 7410:       * _.isObject(1);
 7411:       * // => false
*****

***** LODASH\RD\15.js
 7416:       */
 7417:          function isMatch(object, source) {
 7418:              return baseIsMatch(object, source, getMatchData(source));
 7419:          }
***** LODASH\RD\ORIGINAL.JS
 7412:       */
 7413:          function isObject(value) {
 7414:              // Avoid a V8 JIT bug in Chrome 19-20.
 7415:              // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
 7416:              var type = typeof value;
 7417:              return !!value && (type == 'object' || type == 'function');
 7418:          }
*****

***** LODASH\RD\15.js
 7420:          /**
 7421:       * This method is like `_.isMatch` except that it accepts `customizer` which
 7422:       * is invoked to compare values. If `customizer` returns `undefined` comparisons
 7423:       * are handled by the method instead. The `customizer` is invoked with three
 7424:       * arguments: (objValue, srcValue, index|key, object, source).
 7425:       *
***** LODASH\RD\ORIGINAL.JS
 7419:          /**
 7420:       * Performs a deep comparison between `object` and `source` to determine if
 7421:       * `object` contains equivalent property values.
 7422:       *
 7423:       * **Note:** This method supports comparing properties of arrays, booleans,
 7424:       * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
 7425:       * and DOM nodes are **not** supported. Provide a customizer function to extend
 7426:       * support for comparing other values.
 7427:       *
*****

***** LODASH\RD\15.js
 7430:       * @param {Object} source The object of property values to match.
 7431:       * @param {Function} [customizer] The function to customize comparisons.
 7432:       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
***** LODASH\RD\ORIGINAL.JS
 7432:       * @param {Object} source The object of property values to match.
 7433:       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
*****

***** LODASH\RD\15.js
 7434:       *
 7435:       * var object = { 'greeting': 'hello' };
 7436:       * var source = { 'greeting': 'hi' };
 7437:       *
 7438:       * _.isMatchWith(object, source, function(value, other) {
 7439:       *   var reHello = /^h(?:i|ello)$/;
 7440:       *   if (reHello.test(value) && reHello.test(other)) {
 7441:       *     return true;
 7442:       *   }
 7443:       * });
 7444:       * // => true
 7445:       */
 7446:          function isMatchWith(object, source, customizer) {
 7447:              customizer = typeof customizer == 'function' ? customizer : undefined;
 7448:              return baseIsMatch(object, source, getMatchData(source), customizer);
 7449:          }
***** LODASH\RD\ORIGINAL.JS
 7435:       *
 7436:       * var object = { 'user': 'fred', 'age': 40 };
 7437:       *
 7438:       * _.isMatch(object, { 'age': 40 });
 7439:       * // => true
 7440:       *
 7441:       * _.isMatch(object, { 'age': 36 });
 7442:       * // => false
 7443:       */
 7444:          function isMatch(object, source) {
 7445:              return baseIsMatch(object, source, getMatchData(source));
 7446:          }
*****

***** LODASH\RD\15.js
 7450:          /**
 7451:       * Checks if `value` is `NaN`.
 7452:       *
 7453:       * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
 7454:       * which returns `true` for `undefined` and other non-numeric values.
 7455:       *
***** LODASH\RD\ORIGINAL.JS
 7447:          /**
 7448:       * This method is like `_.isMatch` except that it accepts `customizer` which
 7449:       * is invoked to compare values. If `customizer` returns `undefined` comparisons
 7450:       * are handled by the method instead. The `customizer` is invoked with three
 7451:       * arguments: (objValue, srcValue, index|key, object, source).
 7452:       *
*****

***** LODASH\RD\15.js
 7458:       * @category Lang
 7459:       * @param {*} value The value to check.
 7460:       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 7461:       * @example
***** LODASH\RD\ORIGINAL.JS
 7455:       * @category Lang
 7456:       * @param {Object} object The object to inspect.
 7457:       * @param {Object} source The object of property values to match.
 7458:       * @param {Function} [customizer] The function to customize comparisons.
 7459:       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 7460:       * @example
*****

***** LODASH\RD\15.js
 7462:       *
 7463:       * _.isNaN(NaN);
 7464:       * // => true
 7465:       *
 7466:       * _.isNaN(new Number(NaN));
 7467:       * // => true
 7468:       *
 7469:       * isNaN(undefined);
 7470:       * // => true
 7471:       *
 7472:       * _.isNaN(undefined);
 7473:       * // => false
 7474:       */
 7475:          function isNaN(value) {
 7476:              // An `NaN` primitive is the only value that is not equal to itself.
 7477:              // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
 7478:              return isNumber(value) && value != +value;
 7479:          }
***** LODASH\RD\ORIGINAL.JS
 7461:       *
 7462:       * var object = { 'greeting': 'hello' };
 7463:       * var source = { 'greeting': 'hi' };
 7464:       *
 7465:       * _.isMatchWith(object, source, function(value, other) {
 7466:       *   var reHello = /^h(?:i|ello)$/;
 7467:       *   if (reHello.test(value) && reHello.test(other)) {
 7468:       *     return true;
 7469:       *   }
 7470:       * });
 7471:       * // => true
 7472:       */
 7473:          function isMatchWith(object, source, customizer) {
 7474:              customizer = typeof customizer == 'function' ? customizer : undefined;
 7475:              return baseIsMatch(object, source, getMatchData(source), customizer);
 7476:          }
*****

***** LODASH\RD\15.js
 7480:          /**
 7481:       * Checks if `value` is a native function.
 7482:       *
***** LODASH\RD\ORIGINAL.JS
 7477:          /**
 7478:       * Checks if `value` is `NaN`.
 7479:       *
 7480:       * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
 7481:       * which returns `true` for `undefined` and other non-numeric values.
 7482:       *
*****

***** LODASH\RD\15.js
 7486:       * @param {*} value The value to check.
 7487:       * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 7488:       * @example
***** LODASH\RD\ORIGINAL.JS
 7486:       * @param {*} value The value to check.
 7487:       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 7488:       * @example
*****

***** LODASH\RD\15.js
 7489:       *
 7490:       * _.isNative(Array.prototype.push);
 7491:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7489:       *
 7490:       * _.isNaN(NaN);
 7491:       * // => true
*****

***** LODASH\RD\15.js
 7492:       *
 7493:       * _.isNative(_);
 7494:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7492:       *
 7493:       * _.isNaN(new Number(NaN));
 7494:       * // => true
 7495:       *
 7496:       * isNaN(undefined);
 7497:       * // => true
 7498:       *
 7499:       * _.isNaN(undefined);
 7500:       * // => false
*****

***** LODASH\RD\15.js
 7495:       */
 7496:          function isNative(value) {
 7497:              if (value == null) {
 7498:                  return false;
 7499:              }
 7500:              if (isFunction(value)) {
 7501:                  return reIsNative.test(fnToString.call(value));
 7502:              }
 7503:              return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
 7504:          }
***** LODASH\RD\ORIGINAL.JS
 7501:       */
 7502:          function isNaN(value) {
 7503:              // An `NaN` primitive is the only value that is not equal to itself.
 7504:              // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
 7505:              return isNumber(value) && value != +value;
 7506:          }
*****

***** LODASH\RD\15.js
 7505:          /**
 7506:       * Checks if `value` is `null`.
 7507:       *
***** LODASH\RD\ORIGINAL.JS
 7507:          /**
 7508:       * Checks if `value` is a native function.
 7509:       *
*****

***** LODASH\RD\15.js
 7511:       * @param {*} value The value to check.
 7512:       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 7513:       * @example
***** LODASH\RD\ORIGINAL.JS
 7513:       * @param {*} value The value to check.
 7514:       * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 7515:       * @example
*****

***** LODASH\RD\15.js
 7514:       *
 7515:       * _.isNull(null);
 7516:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7516:       *
 7517:       * _.isNative(Array.prototype.push);
 7518:       * // => true
*****

***** LODASH\RD\15.js
 7517:       *
 7518:       * _.isNull(void 0);
 7519:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7519:       *
 7520:       * _.isNative(_);
 7521:       * // => false
*****

***** LODASH\RD\15.js
 7520:       */
 7521:          function isNull(value) {
 7522:              return value === null;
 7523:          }
***** LODASH\RD\ORIGINAL.JS
 7522:       */
 7523:          function isNative(value) {
 7524:              if (value == null) {
 7525:                  return false;
 7526:              }
 7527:              if (isFunction(value)) {
 7528:                  return reIsNative.test(fnToString.call(value));
 7529:              }
 7530:              return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
 7531:          }
*****

***** LODASH\RD\15.js
 7524:          /**
 7525:       * Checks if `value` is `null` or `undefined`.
 7526:       *
***** LODASH\RD\ORIGINAL.JS
 7532:          /**
 7533:       * Checks if `value` is `null`.
 7534:       *
*****

***** LODASH\RD\15.js
 7530:       * @param {*} value The value to check.
 7531:       * @returns {boolean} Returns `true` if `value` is `null` or `undefined`, else `false`.
 7532:       * @example
***** LODASH\RD\ORIGINAL.JS
 7538:       * @param {*} value The value to check.
 7539:       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 7540:       * @example
*****

***** LODASH\RD\15.js
 7533:       *
 7534:       * _.isNil(null);
 7535:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7541:       *
 7542:       * _.isNull(null);
 7543:       * // => true
*****

***** LODASH\RD\15.js
 7536:       *
 7537:       * _.isNil();
 7538:       * // => true
 7539:       *
 7540:       * _.isNil(undefined);
 7541:       * // => true
 7542:       *
 7543:       * _.isNil(NaN);
 7544:       * // => false
 7545:       *
 7546:       * _.isNil(void 0);
 7547:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7544:       *
 7545:       * _.isNull(void 0);
 7546:       * // => false
*****

***** LODASH\RD\15.js
 7548:       */
 7549:          function isNil(value) {
 7550:              return value == null;
 7551:          }
***** LODASH\RD\ORIGINAL.JS
 7547:       */
 7548:          function isNull(value) {
 7549:              return value === null;
 7550:          }
*****

***** LODASH\RD\15.js
 7552:          /**
 7553:       * Checks if `value` is classified as a `Number` primitive or object.
 7554:       *
 7555:       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
 7556:       * as numbers, use the `_.isFinite` method.
 7557:       *
***** LODASH\RD\ORIGINAL.JS
 7551:          /**
 7552:       * Checks if `value` is `null` or `undefined`.
 7553:       *
*****

***** LODASH\RD\15.js
 7561:       * @param {*} value The value to check.
 7562:       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 7563:       * @example
***** LODASH\RD\ORIGINAL.JS
 7557:       * @param {*} value The value to check.
 7558:       * @returns {boolean} Returns `true` if `value` is `null` or `undefined`, else `false`.
 7559:       * @example
*****

***** LODASH\RD\15.js
 7564:       *
 7565:       * _.isNumber(8.4);
 7566:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7560:       *
 7561:       * _.isNil(null);
 7562:       * // => true
*****

***** LODASH\RD\15.js
 7567:       *
 7568:       * _.isNumber(NaN);
 7569:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7563:       *
 7564:       * _.isNil();
 7565:       * // => true
*****

***** LODASH\RD\15.js
 7570:       *
 7571:       * _.isNumber('8.4');
 7572:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7566:       *
 7567:       * _.isNil(undefined);
 7568:       * // => true
 7569:       *
 7570:       * _.isNil(NaN);
 7571:       * // => false
 7572:       *
 7573:       * _.isNil(void 0);
 7574:       * // => false
*****

***** LODASH\RD\15.js
 7573:       */
 7574:          function isNumber(value) {
 7575:              return typeof value == 'number' || isObjectLike(value) && objToString.call(value) == numberTag;
 7576:          }
***** LODASH\RD\ORIGINAL.JS
 7575:       */
 7576:          function isNil(value) {
 7577:              return value == null;
 7578:          }
*****

***** LODASH\RD\15.js
 7577:          /**
 7578:       * Checks if `value` is a plain object, that is, an object created by the
 7579:       * `Object` constructor or one with a `[[Prototype]]` of `null`.
 7580:       *
***** LODASH\RD\ORIGINAL.JS
 7579:          /**
 7580:       * Checks if `value` is classified as a `Number` primitive or object.
 7581:       *
 7582:       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
 7583:       * as numbers, use the `_.isFinite` method.
 7584:       *
*****

***** LODASH\RD\15.js
 7584:       * @param {*} value The value to check.
 7585:       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 7586:       * @example
***** LODASH\RD\ORIGINAL.JS
 7588:       * @param {*} value The value to check.
 7589:       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 7590:       * @example
*****

***** LODASH\RD\15.js
 7587:       *
 7588:       * function Foo() {
 7589:       *   this.a = 1;
 7590:       * }
 7591:       *
 7592:       * _.isPlainObject(new Foo);
 7593:       * // => false
 7594:       *
 7595:       * _.isPlainObject([1, 2, 3]);
 7596:       * // => false
 7597:       *
 7598:       * _.isPlainObject({ 'x': 0, 'y': 0 });
 7599:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7591:       *
 7592:       * _.isNumber(8.4);
 7593:       * // => true
*****

***** LODASH\RD\15.js
 7600:       *
 7601:       * _.isPlainObject(Object.create(null));
 7602:       * // => true
 7603:       */
 7604:          function isPlainObject(value) {
 7605:              if (!isObjectLike(value) || objToString.call(value) != objectTag || isHostObject(value)) {
 7606:                  return false;
 7607:              }
 7608:              var proto = typeof value.constructor == 'function' ? getPrototypeOf(value) : objectProto;
 7609:              if (proto === null) {
 7610:                  return true;
 7611:              }
 7612:              var Ctor = proto.constructor;
 7613:              return typeof Ctor == 'function' && Ctor instanceof Ctor && fnToString.call(Ctor) == objCtorString;
 7614:          }
***** LODASH\RD\ORIGINAL.JS
 7594:       *
 7595:       * _.isNumber(NaN);
 7596:       * // => true
 7597:       *
 7598:       * _.isNumber('8.4');
 7599:       * // => false
 7600:       */
 7601:          function isNumber(value) {
 7602:              return typeof value == 'number' || isObjectLike(value) && objToString.call(value) == numberTag;
 7603:          }
*****

***** LODASH\RD\15.js
 7615:          /**
 7616:       * Checks if `value` is classified as a `RegExp` object.
 7617:       *
***** LODASH\RD\ORIGINAL.JS
 7604:          /**
 7605:       * Checks if `value` is a plain object, that is, an object created by the
 7606:       * `Object` constructor or one with a `[[Prototype]]` of `null`.
 7607:       *
*****

***** LODASH\RD\15.js
 7621:       * @param {*} value The value to check.
 7622:       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 7623:       * @example
***** LODASH\RD\ORIGINAL.JS
 7611:       * @param {*} value The value to check.
 7612:       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 7613:       * @example
*****

***** LODASH\RD\15.js
 7624:       *
 7625:       * _.isRegExp(/abc/);
 7626:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7614:       *
 7615:       * function Foo() {
 7616:       *   this.a = 1;
 7617:       * }
 7618:       *
 7619:       * _.isPlainObject(new Foo);
 7620:       * // => false
 7621:       *
 7622:       * _.isPlainObject([1, 2, 3]);
 7623:       * // => false
 7624:       *
 7625:       * _.isPlainObject({ 'x': 0, 'y': 0 });
 7626:       * // => true
*****

***** LODASH\RD\15.js
 7627:       *
 7628:       * _.isRegExp('/abc/');
 7629:       * // => false
 7630:       */
 7631:          function isRegExp(value) {
 7632:              return isObject(value) && objToString.call(value) == regexpTag;
 7633:          }
***** LODASH\RD\ORIGINAL.JS
 7627:       *
 7628:       * _.isPlainObject(Object.create(null));
 7629:       * // => true
 7630:       */
 7631:          function isPlainObject(value) {
 7632:              if (!isObjectLike(value) || objToString.call(value) != objectTag || isHostObject(value)) {
 7633:                  return false;
 7634:              }
 7635:              var proto = typeof value.constructor == 'function' ? getPrototypeOf(value) : objectProto;
 7636:              if (proto === null) {
 7637:                  return true;
 7638:              }
 7639:              var Ctor = proto.constructor;
 7640:              return typeof Ctor == 'function' && Ctor instanceof Ctor && fnToString.call(Ctor) == objCtorString;
 7641:          }
*****

***** LODASH\RD\15.js
 7634:          /**
 7635:       * Checks if `value` is classified as a `String` primitive or object.
 7636:       *
***** LODASH\RD\ORIGINAL.JS
 7642:          /**
 7643:       * Checks if `value` is classified as a `RegExp` object.
 7644:       *
*****

***** LODASH\RD\15.js
 7643:       *
 7644:       * _.isString('abc');
 7645:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7651:       *
 7652:       * _.isRegExp(/abc/);
 7653:       * // => true
*****

***** LODASH\RD\15.js
 7646:       *
 7647:       * _.isString(1);
 7648:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7654:       *
 7655:       * _.isRegExp('/abc/');
 7656:       * // => false
*****

***** LODASH\RD\15.js
 7649:       */
 7650:          function isString(value) {
 7651:              return typeof value == 'string' || isObjectLike(value) && objToString.call(value) == stringTag;
 7652:          }
***** LODASH\RD\ORIGINAL.JS
 7657:       */
 7658:          function isRegExp(value) {
 7659:              return isObject(value) && objToString.call(value) == regexpTag;
 7660:          }
*****

***** LODASH\RD\15.js
 7653:          /**
 7654:       * Checks if `value` is classified as a typed array.
 7655:       *
***** LODASH\RD\ORIGINAL.JS
 7661:          /**
 7662:       * Checks if `value` is classified as a `String` primitive or object.
 7663:       *
*****

***** LODASH\RD\15.js
 7662:       *
 7663:       * _.isTypedArray(new Uint8Array);
 7664:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7670:       *
 7671:       * _.isString('abc');
 7672:       * // => true
*****

***** LODASH\RD\15.js
 7665:       *
 7666:       * _.isTypedArray([]);
 7667:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7673:       *
 7674:       * _.isString(1);
 7675:       * // => false
*****

***** LODASH\RD\15.js
 7668:       */
 7669:          function isTypedArray(value) {
 7670:              return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
 7671:          }
***** LODASH\RD\ORIGINAL.JS
 7676:       */
 7677:          function isString(value) {
 7678:              return typeof value == 'string' || isObjectLike(value) && objToString.call(value) == stringTag;
 7679:          }
*****

***** LODASH\RD\15.js
 7672:          /**
 7673:       * Checks if `value` is `undefined`.
 7674:       *
***** LODASH\RD\ORIGINAL.JS
 7680:          /**
 7681:       * Checks if `value` is classified as a typed array.
 7682:       *
*****

***** LODASH\RD\15.js
 7678:       * @param {*} value The value to check.
 7679:       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 7680:       * @example
***** LODASH\RD\ORIGINAL.JS
 7686:       * @param {*} value The value to check.
 7687:       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 7688:       * @example
*****

***** LODASH\RD\15.js
 7681:       *
 7682:       * _.isUndefined(void 0);
 7683:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7689:       *
 7690:       * _.isTypedArray(new Uint8Array);
 7691:       * // => true
*****

***** LODASH\RD\15.js
 7684:       *
 7685:       * _.isUndefined(null);
 7686:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7692:       *
 7693:       * _.isTypedArray([]);
 7694:       * // => false
*****

***** LODASH\RD\15.js
 7687:       */
 7688:          function isUndefined(value) {
 7689:              return value === undefined;
 7690:          }
***** LODASH\RD\ORIGINAL.JS
 7695:       */
 7696:          function isTypedArray(value) {
 7697:              return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
 7698:          }
*****

***** LODASH\RD\15.js
 7691:          /**
 7692:       * Checks if `value` is less than `other`.
 7693:       *
***** LODASH\RD\ORIGINAL.JS
 7699:          /**
 7700:       * Checks if `value` is `undefined`.
 7701:       *
*****

***** LODASH\RD\15.js
 7696:       * @category Lang
 7697:       * @param {*} value The value to compare.
 7698:       * @param {*} other The other value to compare.
 7699:       * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
 7700:       * @example
***** LODASH\RD\ORIGINAL.JS
 7704:       * @category Lang
 7705:       * @param {*} value The value to check.
 7706:       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 7707:       * @example
*****

***** LODASH\RD\15.js
 7701:       *
 7702:       * _.lt(1, 3);
 7703:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7708:       *
 7709:       * _.isUndefined(void 0);
 7710:       * // => true
*****

***** LODASH\RD\15.js
 7704:       *
 7705:       * _.lt(3, 3);
 7706:       * // => false
 7707:       *
 7708:       * _.lt(3, 1);
 7709:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7711:       *
 7712:       * _.isUndefined(null);
 7713:       * // => false
*****

***** LODASH\RD\15.js
 7710:       */
 7711:          function lt(value, other) {
 7712:              return value < other;
 7713:          }
***** LODASH\RD\ORIGINAL.JS
 7714:       */
 7715:          function isUndefined(value) {
 7716:              return value === undefined;
 7717:          }
*****

***** LODASH\RD\15.js
 7714:          /**
 7715:       * Checks if `value` is less than or equal to `other`.
 7716:       *
***** LODASH\RD\ORIGINAL.JS
 7718:          /**
 7719:       * Checks if `value` is less than `other`.
 7720:       *
*****

***** LODASH\RD\15.js
 7721:       * @param {*} other The other value to compare.
 7722:       * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
 7723:       * @example
***** LODASH\RD\ORIGINAL.JS
 7725:       * @param {*} other The other value to compare.
 7726:       * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
 7727:       * @example
*****

***** LODASH\RD\15.js
 7724:       *
 7725:       * _.lte(1, 3);
 7726:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7728:       *
 7729:       * _.lt(1, 3);
 7730:       * // => true
*****

***** LODASH\RD\15.js
 7727:       *
 7728:       * _.lte(3, 3);
 7729:       * // => true
 7730:       *
 7731:       * _.lte(3, 1);
 7732:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7731:       *
 7732:       * _.lt(3, 3);
 7733:       * // => false
 7734:       *
 7735:       * _.lt(3, 1);
 7736:       * // => false
*****

***** LODASH\RD\15.js
 7733:       */
 7734:          function lte(value, other) {
 7735:              return value <= other;
 7736:          }
***** LODASH\RD\ORIGINAL.JS
 7737:       */
 7738:          function lt(value, other) {
 7739:              return value < other;
 7740:          }
*****

***** LODASH\RD\15.js
 7737:          /**
 7738:       * Converts `value` to an array.
 7739:       *
***** LODASH\RD\ORIGINAL.JS
 7741:          /**
 7742:       * Checks if `value` is less than or equal to `other`.
 7743:       *
*****

***** LODASH\RD\15.js
 7742:       * @category Lang
 7743:       * @param {*} value The value to convert.
 7744:       * @returns {Array} Returns the converted array.
 7745:       * @example
***** LODASH\RD\ORIGINAL.JS
 7746:       * @category Lang
 7747:       * @param {*} value The value to compare.
 7748:       * @param {*} other The other value to compare.
 7749:       * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
 7750:       * @example
*****

***** LODASH\RD\15.js
 7746:       *
 7747:       * (function() {
 7748:       *   return _.toArray(arguments).slice(1);
 7749:       * }(1, 2, 3));
 7750:       * // => [2, 3]
 7751:       */
 7752:          function toArray(value) {
 7753:              if (!isArrayLike(value)) {
 7754:                  return values(value);
 7755:              }
 7756:              return value.length ? copyArray(value) : [];
 7757:          }
***** LODASH\RD\ORIGINAL.JS
 7751:       *
 7752:       * _.lte(1, 3);
 7753:       * // => true
 7754:       *
 7755:       * _.lte(3, 3);
 7756:       * // => true
 7757:       *
 7758:       * _.lte(3, 1);
 7759:       * // => false
 7760:       */
 7761:          function lte(value, other) {
 7762:              return value <= other;
 7763:          }
*****

***** LODASH\RD\15.js
 7758:          /**
 7759:       * Converts `value` to a plain object flattening inherited enumerable
 7760:       * properties of `value` to own properties of the plain object.
 7761:       *
***** LODASH\RD\ORIGINAL.JS
 7764:          /**
 7765:       * Converts `value` to an array.
 7766:       *
*****

***** LODASH\RD\15.js
 7765:       * @param {*} value The value to convert.
 7766:       * @returns {Object} Returns the converted plain object.
 7767:       * @example
***** LODASH\RD\ORIGINAL.JS
 7770:       * @param {*} value The value to convert.
 7771:       * @returns {Array} Returns the converted array.
 7772:       * @example
*****

***** LODASH\RD\15.js
 7768:       *
 7769:       * function Foo() {
***** LODASH\RD\ORIGINAL.JS
 7773:       *
 7774:       * (function() {
 7775:       *   return _.toArray(arguments).slice(1);
 7776:       * }(1, 2, 3));
 7777:       * // => [2, 3]
 7778:       */
 7779:          function toArray(value) {
 7780:              if (!isArrayLike(value)) {
 7781:                  return values(value);
 7782:              }
 7783:              return value.length ? copyArray(value) : [];
 7784:          }
 7785:          /**
 7786:       * Converts `value` to a plain object flattening inherited enumerable
 7787:       * properties of `value` to own properties of the plain object.
 7788:       *
 7789:       * @static
 7790:       * @memberOf _
 7791:       * @category Lang
 7792:       * @param {*} value The value to convert.
 7793:       * @returns {Object} Returns the converted plain object.
 7794:       * @example
 7795:       *
 7796:       * function Foo() {
*****

***** LODASH\RD\15.js
 9869:          var methodOf = restParam(function (object, args) {
 9870:              return function (path) {
 9871:                  return invokePath(object, path, args);
 9872:              };
 9873:          });
 9874:          /**
 9875:       * Adds all own enumerable function properties of a source object to the
 9876:       * destination object. If `object` is a function then methods are added to
 9877:       * its prototype as well.
 9878:       *
 9879:       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
 9880:       * avoid conflicts caused by modifying the original.
 9881:       *
***** LODASH\RD\ORIGINAL.JS
 9896:          /**
 9897:       * The opposite of `_.method`; this method creates a function that invokes
 9898:       * the method at a given path of `object`. Any additional arguments are
 9899:       * provided to the invoked method.
 9900:       *
*****

***** LODASH\RD\15.js
 9884:       * @category Utility
 9885:       * @param {Function|Object} [object=lodash] The destination object.
 9886:       * @param {Object} source The object of functions to add.
 9887:       * @param {Object} [options] The options object.
 9888:       * @param {boolean} [options.chain=true] Specify whether the functions added
 9889:       *  are chainable.
 9890:       * @returns {Function|Object} Returns `object`.
 9891:       * @example
***** LODASH\RD\ORIGINAL.JS
 9903:       * @category Utility
 9904:       * @param {Object} object The object to query.
 9905:       * @param {...*} [args] The arguments to invoke the method with.
 9906:       * @returns {Function} Returns the new function.
 9907:       * @example
*****

***** LODASH\RD\15.js
 9892:       *
 9893:       * function vowels(string) {
***** LODASH\RD\ORIGINAL.JS
 9908:       *
 9909:       * var array = _.times(3, _.constant),
 9910:       *     object = { 'a': array, 'b': array, 'c': array };
 9911:       *
 9912:       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
 9913:       * // => [2, 0]
 9914:       *
 9915:       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
 9916:       * // => [2, 0]
 9917:       */
 9918:          var methodOf = restParam(function (object, args) {
 9919:              return function (path) {
 9920:                  return invokePath(object, path, args);
 9921:              };
 9922:          });
 9923:          /**
 9924:       * Adds all own enumerable function properties of a source object to the
 9925:       * destination object. If `object` is a function then methods are added to
 9926:       * its prototype as well.
 9927:       *
 9928:       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
 9929:       * avoid conflicts caused by modifying the original.
 9930:       *
 9931:       * @static
 9932:       * @memberOf _
 9933:       * @category Utility
 9934:       * @param {Function|Object} [object=lodash] The destination object.
 9935:       * @param {Object} source The object of functions to add.
 9936:       * @param {Object} [options] The options object.
 9937:       * @param {boolean} [options.chain=true] Specify whether the functions added
 9938:       *  are chainable.
 9939:       * @returns {Function|Object} Returns `object`.
 9940:       * @example
 9941:       *
 9942:       * function vowels(string) {
*****

