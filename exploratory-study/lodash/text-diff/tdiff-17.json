Comparing files LODASH\RD\17.js and LODASH\RD\ORIGINAL.JS
***** LODASH\RD\17.js
 1605:              var result;
 1606:              eachFunc(collection, function (value, key) {
 1607:                  if (predicate(value, key, collection)) {
***** LODASH\RD\ORIGINAL.JS
 1605:              var result;
 1606:              eachFunc(collection, function (value, key, collection) {
 1607:                  if (predicate(value, key, collection)) {
*****

***** LODASH\RD\17.js
 1926:                  }
 1927:              };
***** LODASH\RD\ORIGINAL.JS
 1926:                  }
 1927:                  return result;
 1928:              };
*****

***** LODASH\RD\17.js
 6184:                  var holders = replaceHolders(partials, bindKey.placeholder);
 6185:              }
***** LODASH\RD\ORIGINAL.JS
 6185:                  var holders = replaceHolders(partials, bindKey.placeholder);
 6186:                  bitmask |= PARTIAL_FLAG;
 6187:              }
*****

***** LODASH\RD\17.js
 8404:          }
 8405:          function mapKeys(object, iteratee) {
 8406:              var result = {};
 8407:              iteratee = getIteratee(iteratee);
 8408:              baseForOwn(object, function (value, key, object) {
 8409:                  result[iteratee(value, key, object)] = value;
 8410:              });
 8411:              return result;
 8412:          }
 8413:          /**
 8414:       * Creates an object with the same keys as `object` and values generated by
 8415:       * running each own enumerable property of `object` through `iteratee`. The
 8416:       * iteratee function is invoked with three arguments: (value, key, object).
 8417:       *
***** LODASH\RD\ORIGINAL.JS
 8406:          }
 8407:          /**
 8408:       * The opposite of `_.mapValues`; this method creates an object with the
 8409:       * same values as `object` and keys generated by running each own enumerable
 8410:       * property of `object` through `iteratee`.
 8411:       *
*****

***** LODASH\RD\17.js
 8425:       *
 8426:       * var users = {
 8427:       *   'fred':    { 'user': 'fred',    'age': 40 },
 8428:       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 8429:       * };
 8430:       *
 8431:       * _.mapValues(users, function(o) { return o.age; });
 8432:       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 8433:       *
 8434:       * // using the `_.property` callback shorthand
 8435:       * _.mapValues(users, 'age');
 8436:       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 8437:       */
 8438:          function mapValues(object, iteratee) {
 8439:              var result = {};
***** LODASH\RD\ORIGINAL.JS
 8419:       *
 8420:       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 8421:       *   return key + value;
 8422:       * });
 8423:       * // => { 'a1': 1, 'b2': 2 }
 8424:       */
 8425:          function mapKeys(object, iteratee) {
 8426:              var result = {};
*****

***** LODASH\RD\17.js
 8441:              baseForOwn(object, function (value, key, object) {
 8442:                  result[key] = iteratee(value, key, object);
 8443:              });
***** LODASH\RD\ORIGINAL.JS
 8428:              baseForOwn(object, function (value, key, object) {
 8429:                  result[iteratee(value, key, object)] = value;
 8430:              });
*****

***** LODASH\RD\17.js
 8446:          /**
 8447:       * Recursively merges own enumerable properties of the source object(s) into the
 8448:       * destination object, for source properties which don't resolve to `undefined`.
 8449:       * Subsequent sources overwrite property assignments of previous sources.
 8450:       *
***** LODASH\RD\ORIGINAL.JS
 8433:          /**
 8434:       * Creates an object with the same keys as `object` and values generated by
 8435:       * running each own enumerable property of `object` through `iteratee`. The
 8436:       * iteratee function is invoked with three arguments: (value, key, object).
 8437:       *
*****

***** LODASH\RD\17.js
 8453:       * @category Object
 8454:       * @param {Object} object The destination object.
 8455:       * @param {...Object} [sources] The source objects.
 8456:       * @returns {Object} Returns `object`.
 8457:       * @example
***** LODASH\RD\ORIGINAL.JS
 8440:       * @category Object
 8441:       * @param {Object} object The object to iterate over.
 8442:       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 8443:       * @returns {Object} Returns the new mapped object.
 8444:       * @example
*****

***** LODASH\RD\17.js
 8459:       * var users = {
 8460:       *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
 8461:       * };
***** LODASH\RD\ORIGINAL.JS
 8446:       * var users = {
 8447:       *   'fred':    { 'user': 'fred',    'age': 40 },
 8448:       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 8449:       * };
*****

***** LODASH\RD\17.js
 8462:       *
 8463:       * var ages = {
 8464:       *   'data': [{ 'age': 36 }, { 'age': 40 }]
 8465:       * };
 8466:       *
 8467:       * _.merge(users, ages);
 8468:       * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
 8469:       */
 8470:          var merge = createAssigner(function (object, source) {
 8471:              baseMerge(object, source);
 8472:          });
 8473:          /**
 8474:       * This method is like `_.merge` except that it accepts `customizer` which
 8475:       * is invoked to produce the merged values of the destination and source
 8476:       * properties. If `customizer` returns `undefined` merging is handled by the
 8477:       * method instead. The `customizer` is invoked with seven arguments:
 8478:       * (objValue, srcValue, key, object, source, stackA, stackB).
 8479:       *
***** LODASH\RD\ORIGINAL.JS
 8450:       *
 8451:       * _.mapValues(users, function(o) { return o.age; });
 8452:       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 8453:       *
 8454:       * // using the `_.property` callback shorthand
 8455:       * _.mapValues(users, 'age');
 8456:       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 8457:       */
 8458:          function mapValues(object, iteratee) {
 8459:              var result = {};
 8460:              iteratee = getIteratee(iteratee);
 8461:              baseForOwn(object, function (value, key, object) {
 8462:                  result[key] = iteratee(value, key, object);
 8463:              });
 8464:              return result;
 8465:          }
 8466:          /**
 8467:       * Recursively merges own enumerable properties of the source object(s) into the
 8468:       * destination object, for source properties which don't resolve to `undefined`.
 8469:       * Subsequent sources overwrite property assignments of previous sources.
 8470:       *
*****

***** LODASH\RD\17.js
 8483:       * @param {Object} object The destination object.
 8484:       * @param {...Object} sources The source objects.
 8485:       * @param {Function} customizer The function to customize assigned values.
 8486:       * @returns {Object} Returns `object`.
***** LODASH\RD\ORIGINAL.JS
 8474:       * @param {Object} object The destination object.
 8475:       * @param {...Object} [sources] The source objects.
 8476:       * @returns {Object} Returns `object`.
*****

***** LODASH\RD\17.js
 8488:       *
 8489:       * var object = {
 8490:       *   'fruits': ['apple'],
 8491:       *   'vegetables': ['beet']
 8492:       * };
***** LODASH\RD\ORIGINAL.JS
 8478:       *
 8479:       * var users = {
 8480:       *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
 8481:       * };
*****

***** LODASH\RD\17.js
 8493:       *
 8494:       * var other = {
 8495:       *   'fruits': ['banana'],
 8496:       *   'vegetables': ['carrot']
 8497:       * };
***** LODASH\RD\ORIGINAL.JS
 8482:       *
 8483:       * var ages = {
 8484:       *   'data': [{ 'age': 36 }, { 'age': 40 }]
 8485:       * };
*****

***** LODASH\RD\17.js
 8498:       *
 8499:       * _.mergeWith(object, other, function(a, b) {
 8500:       *   if (_.isArray(a)) {
 8501:       *     return a.concat(b);
 8502:       *   }
 8503:       * });
 8504:       * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
 8505:       */
 8506:          var mergeWith = createAssigner(function (object, source, customizer) {
 8507:              baseMerge(object, source, customizer);
 8508:          });
***** LODASH\RD\ORIGINAL.JS
 8486:       *
 8487:       * _.merge(users, ages);
 8488:       * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
 8489:       */
 8490:          var merge = createAssigner(function (object, source) {
 8491:              baseMerge(object, source);
 8492:          });
*****

***** LODASH\RD\17.js
 8509:          /**
 8510:       * The opposite of `_.pick`; this method creates an object composed of the
 8511:       * own and inherited enumerable properties of `object` that are not omitted.
 8512:       *
***** LODASH\RD\ORIGINAL.JS
 8493:          /**
 8494:       * This method is like `_.merge` except that it accepts `customizer` which
 8495:       * is invoked to produce the merged values of the destination and source
 8496:       * properties. If `customizer` returns `undefined` merging is handled by the
 8497:       * method instead. The `customizer` is invoked with seven arguments:
 8498:       * (objValue, srcValue, key, object, source, stackA, stackB).
 8499:       *
*****

***** LODASH\RD\17.js
 8515:       * @category Object
 8516:       * @param {Object} object The source object.
 8517:       * @param {string|string[]} [props] The property names to omit, specified
 8518:       *  individually or in arrays..
 8519:       * @returns {Object} Returns the new object.
 8520:       * @example
***** LODASH\RD\ORIGINAL.JS
 8502:       * @category Object
 8503:       * @param {Object} object The destination object.
 8504:       * @param {...Object} sources The source objects.
 8505:       * @param {Function} customizer The function to customize assigned values.
 8506:       * @returns {Object} Returns `object`.
 8507:       * @example
*****

***** LODASH\RD\17.js
 8521:       *
 8522:       * var object = { 'user': 'fred', 'age': 40 };
 8523:       *
 8524:       * _.omit(object, 'age');
 8525:       * // => { 'user': 'fred' }
 8526:       */
 8527:          var omit = restParam(function (object, props) {
 8528:              if (object == null) {
 8529:                  return {};
 8530:              }
 8531:              props = arrayMap(baseFlatten(props), String);
 8532:              return basePick(object, baseDifference(keysIn(object), props));
 8533:          });
***** LODASH\RD\ORIGINAL.JS
 8508:       *
 8509:       * var object = {
 8510:       *   'fruits': ['apple'],
 8511:       *   'vegetables': ['beet']
 8512:       * };
 8513:       *
 8514:       * var other = {
 8515:       *   'fruits': ['banana'],
 8516:       *   'vegetables': ['carrot']
 8517:       * };
 8518:       *
 8519:       * _.mergeWith(object, other, function(a, b) {
 8520:       *   if (_.isArray(a)) {
 8521:       *     return a.concat(b);
 8522:       *   }
 8523:       * });
 8524:       * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
 8525:       */
 8526:          var mergeWith = createAssigner(function (object, source, customizer) {
 8527:              baseMerge(object, source, customizer);
 8528:          });
*****

***** LODASH\RD\17.js
 8534:          /**
 8535:       * The opposite of `_.pickBy`; this method creates an object composed of the
 8536:       * own and inherited enumerable properties of `object` that `predicate`
 8537:       * doesn't return truthy for.
 8538:       *
***** LODASH\RD\ORIGINAL.JS
 8529:          /**
 8530:       * The opposite of `_.pick`; this method creates an object composed of the
 8531:       * own and inherited enumerable properties of `object` that are not omitted.
 8532:       *
*****

***** LODASH\RD\17.js
 8542:       * @param {Object} object The source object.
 8543:       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 8544:       * @returns {Object} Returns the new object.
***** LODASH\RD\ORIGINAL.JS
 8536:       * @param {Object} object The source object.
 8537:       * @param {string|string[]} [props] The property names to omit, specified
 8538:       *  individually or in arrays..
 8539:       * @returns {Object} Returns the new object.
*****

***** LODASH\RD\17.js
 8548:       *
 8549:       * _.omitBy(object, _.isNumber);
 8550:       * // => { 'user': 'fred' }
***** LODASH\RD\ORIGINAL.JS
 8543:       *
 8544:       * _.omit(object, 'age');
 8545:       * // => { 'user': 'fred' }
*****

***** LODASH\RD\17.js
 8551:       */
 8552:          function omitBy(object, predicate) {
 8553:              predicate = getIteratee(predicate);
 8554:              return basePickBy(object, function (value, key, object) {
 8555:                  return !predicate(value, key, object);
 8556:              });
 8557:          }
 8558:          /**
 8559:       * Creates a two dimensional array of the key-value pairs for `object`,
 8560:       * e.g. `[[key1, value1], [key2, value2]]`.
 8561:       *
***** LODASH\RD\ORIGINAL.JS
 8546:       */
 8547:          var omit = restParam(function (object, props) {
 8548:              if (object == null) {
 8549:                  return {};
 8550:              }
 8551:              props = arrayMap(baseFlatten(props), String);
 8552:              return basePick(object, baseDifference(keysIn(object), props));
 8553:          });
 8554:          /**
 8555:       * The opposite of `_.pickBy`; this method creates an object composed of the
 8556:       * own and inherited enumerable properties of `object` that `predicate`
 8557:       * doesn't return truthy for.
 8558:       *
*****

***** LODASH\RD\17.js
 8564:       * @category Object
 8565:       * @param {Object} object The object to query.
 8566:       * @returns {Array} Returns the new array of key-value pairs.
 8567:       * @example
***** LODASH\RD\ORIGINAL.JS
 8561:       * @category Object
 8562:       * @param {Object} object The source object.
 8563:       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 8564:       * @returns {Object} Returns the new object.
 8565:       * @example
*****

***** LODASH\RD\17.js
 8568:       *
 8569:       * _.pairs({ 'barney': 36, 'fred': 40 });
 8570:       * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
 8571:       */
 8572:          function pairs(object) {
 8573:              object = Object(object);
 8574:              var index = -1, props = keys(object), length = props.length, result = Array(length);
 8575:              while (++index < length) {
 8576:                  var key = props[index];
 8577:                  result[index] = [
 8578:                      key,
 8579:                      object[key]
 8580:                  ];
 8581:              }
 8582:              return result;
 8583:          }
***** LODASH\RD\ORIGINAL.JS
 8566:       *
 8567:       * var object = { 'user': 'fred', 'age': 40 };
 8568:       *
 8569:       * _.omitBy(object, _.isNumber);
 8570:       * // => { 'user': 'fred' }
 8571:       */
 8572:          function omitBy(object, predicate) {
 8573:              predicate = getIteratee(predicate);
 8574:              return basePickBy(object, function (value, key, object) {
 8575:                  return !predicate(value, key, object);
 8576:              });
 8577:          }
*****

***** LODASH\RD\17.js
 8584:          /**
 8585:       * Creates an object composed of the picked `object` properties.
 8586:       *
***** LODASH\RD\ORIGINAL.JS
 8578:          /**
 8579:       * Creates a two dimensional array of the key-value pairs for `object`,
 8580:       * e.g. `[[key1, value1], [key2, value2]]`.
 8581:       *
*****

***** LODASH\RD\17.js
 8589:       * @category Object
 8590:       * @param {Object} object The source object.
 8591:       * @param {string|string[]} [props] The property names to pick, specified
 8592:       *  individually or in arrays.
 8593:       * @returns {Object} Returns the new object.
 8594:       * @example
***** LODASH\RD\ORIGINAL.JS
 8584:       * @category Object
 8585:       * @param {Object} object The object to query.
 8586:       * @returns {Array} Returns the new array of key-value pairs.
 8587:       * @example
*****

***** LODASH\RD\17.js
 8595:       *
 8596:       * var object = { 'user': 'fred', 'age': 40 };
 8597:       *
 8598:       * _.pick(object, 'user');
 8599:       * // => { 'user': 'fred' }
 8600:       */
 8601:          var pick = restParam(function (object, props) {
 8602:              return object == null ? {} : basePick(object, baseFlatten(props));
 8603:          });
 8604:          /**
 8605:       * Creates an object composed of the `object` properties `predicate` returns
 8606:       * truthy for. The predicate is invoked with three arguments: (value, key, object).
 8607:       *
***** LODASH\RD\ORIGINAL.JS
 8588:       *
 8589:       * _.pairs({ 'barney': 36, 'fred': 40 });
 8590:       * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
 8591:       */
 8592:          function pairs(object) {
 8593:              object = Object(object);
 8594:              var index = -1, props = keys(object), length = props.length, result = Array(length);
 8595:              while (++index < length) {
 8596:                  var key = props[index];
 8597:                  result[index] = [
 8598:                      key,
 8599:                      object[key]
 8600:                  ];
 8601:              }
 8602:              return result;
 8603:          }
 8604:          /**
 8605:       * Creates an object composed of the picked `object` properties.
 8606:       *
*****

***** LODASH\RD\17.js
 8611:       * @param {Object} object The source object.
 8612:       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 8613:       * @returns {Object} Returns the new object.
***** LODASH\RD\ORIGINAL.JS
 8610:       * @param {Object} object The source object.
 8611:       * @param {string|string[]} [props] The property names to pick, specified
 8612:       *  individually or in arrays.
 8613:       * @returns {Object} Returns the new object.
*****

***** LODASH\RD\17.js
 8617:       *
 8618:       * _.pickBy(object, _.isString);
 8619:       * // => { 'user': 'fred' }
***** LODASH\RD\ORIGINAL.JS
 8617:       *
 8618:       * _.pick(object, 'user');
 8619:       * // => { 'user': 'fred' }
*****

***** LODASH\RD\17.js
 8620:       */
 8621:          function pickBy(object, predicate) {
 8622:              return object == null ? {} : basePickBy(object, getIteratee(predicate));
 8623:          }
 8624:          /**
 8625:       * This method is like `_.get` except that if the resolved value is a function
 8626:       * it's invoked with the `this` binding of its parent object and its result
 8627:       * is returned.
 8628:       *
***** LODASH\RD\ORIGINAL.JS
 8620:       */
 8621:          var pick = restParam(function (object, props) {
 8622:              return object == null ? {} : basePick(object, baseFlatten(props));
 8623:          });
 8624:          /**
 8625:       * Creates an object composed of the `object` properties `predicate` returns
 8626:       * truthy for. The predicate is invoked with three arguments: (value, key, object).
 8627:       *
*****

***** LODASH\RD\17.js
 8631:       * @category Object
 8632:       * @param {Object} object The object to query.
 8633:       * @param {Array|string} path The path of the property to resolve.
 8634:       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
 8635:       * @returns {*} Returns the resolved value.
 8636:       * @example
***** LODASH\RD\ORIGINAL.JS
 8630:       * @category Object
 8631:       * @param {Object} object The source object.
 8632:       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 8633:       * @returns {Object} Returns the new object.
 8634:       * @example
*****

***** LODASH\RD\17.js
 8637:       *
 8638:       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
***** LODASH\RD\ORIGINAL.JS
 8635:       *
 8636:       * var object = { 'user': 'fred', 'age': 40 };
 8637:       *
 8638:       * _.pickBy(object, _.isString);
 8639:       * // => { 'user': 'fred' }
 8640:       */
 8641:          function pickBy(object, predicate) {
 8642:              return object == null ? {} : basePickBy(object, getIteratee(predicate));
 8643:          }
 8644:          /**
 8645:       * This method is like `_.get` except that if the resolved value is a function
 8646:       * it's invoked with the `this` binding of its parent object and its result
 8647:       * is returned.
 8648:       *
 8649:       * @static
 8650:       * @memberOf _
 8651:       * @category Object
 8652:       * @param {Object} object The object to query.
 8653:       * @param {Array|string} path The path of the property to resolve.
 8654:       * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
 8655:       * @returns {*} Returns the resolved value.
 8656:       * @example
 8657:       *
 8658:       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
*****

***** LODASH\RD\17.js
10104:          }
10105:          function times(n, iteratee) {
***** LODASH\RD\ORIGINAL.JS
10124:          }
10125:          /**
10126:       * Invokes the iteratee function `n` times, returning an array of the results
10127:       * of each invocation. The iteratee is invoked with one argument; (index).
10128:       *
10129:       * @static
10130:       * @memberOf _
10131:       * @category Utility
10132:       * @param {number} n The number of times to invoke `iteratee`.
10133:       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
10134:       * @returns {Array} Returns the array of results.
10135:       * @example
10136:       *
10137:       * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
10138:       * // => [3, 6, 4]
10139:       *
10140:       * _.times(3, function(n) {
10141:       *   mage.castSpell(n);
10142:       * });
10143:       * // => invokes `mage.castSpell` three times with `n` of `0`, `1`, and `2`
10144:       */
10145:          function times(n, iteratee) {
*****

