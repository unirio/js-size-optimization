Comparing files LODASH\RD\57.js and LODASH\RD\ORIGINAL.JS
***** LODASH\RD\57.js
 3259:              var value = object == null ? undefined : object[key];
 3260:              return;
 3261:          }
***** LODASH\RD\ORIGINAL.JS
 3259:              var value = object == null ? undefined : object[key];
 3260:              return isNative(value) ? value : undefined;
 3261:          }
*****

***** LODASH\RD\57.js
 4174:          var intersection = restParam(function (arrays) {
 4175:              var othLength = arrays.length, othIndex = othLength, caches = Array(), indexOf = getIndexOf(), isCommon = indexOf =
 4176:  == baseIndexOf, result = [];
 4177:              while (othIndex--) {
***** LODASH\RD\ORIGINAL.JS
 4174:          var intersection = restParam(function (arrays) {
 4175:              var othLength = arrays.length, othIndex = othLength, caches = Array(length), indexOf = getIndexOf(), isCommon = ind
 4176:  exOf === baseIndexOf, result = [];
 4177:              while (othIndex--) {
*****

***** LODASH\RD\57.js
 4665:          });
 4666:          function uniq(array, isSorted) {
 4667:              if (!(array && array.length)) {
 4668:                  return [];
 4669:              }
 4670:              return isSorted && typeof isSorted == 'boolean' && getIndexOf() === baseIndexOf ? sortedUniq(array) : baseUniq(arra
 4671:  y);
 4672:          }
 4673:          /**
 4674:       * This method is like `_.uniq` except that it accepts `iteratee` which is
 4675:       * invoked for each element in `array` to generate the criterion by which
 4676:       * uniqueness is computed. The iteratee is invoked with one argument: (value).
 4677:       *
***** LODASH\RD\ORIGINAL.JS
 4665:          });
 4666:          /**
 4667:       * Creates a duplicate-free version of an array, using
 4668:       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 4669:       * for equality comparisons, in which only the first occurence of each element
 4670:       * is kept. Providing `true` for `isSorted` performs a faster search algorithm
 4671:       * for sorted arrays.
 4672:       *
*****

***** LODASH\RD\57.js
 4682:       * @param {boolean} [isSorted] Specify the array is sorted.
 4683:       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 4684:       * @returns {Array} Returns the new duplicate free array.
***** LODASH\RD\ORIGINAL.JS
 4677:       * @param {boolean} [isSorted] Specify the array is sorted.
 4678:       * @returns {Array} Returns the new duplicate free array.
*****

***** LODASH\RD\57.js
 4686:       *
 4687:       * _.uniqBy([1, 2.5, 1.5, 2], function(n) {
 4688:       *   return Math.floor(n);
 4689:       * });
 4690:       * // => [1, 2.5]
 4691:       *
 4692:       * // using the `_.property` callback shorthand
 4693:       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 4694:       * // => [{ 'x': 1 }, { 'x': 2 }]
 4695:       */
 4696:          function uniqBy(array, isSorted, iteratee) {
 4697:              if (!(array && array.length)) {
***** LODASH\RD\ORIGINAL.JS
 4680:       *
 4681:       * _.uniq([2, 1, 2]);
 4682:       * // => [2, 1]
 4683:       *
 4684:       * // using `isSorted`
 4685:       * _.uniq([1, 1, 2], true);
 4686:       * // => [1, 2]
 4687:       */
 4688:          function uniq(array, isSorted) {
 4689:              if (!(array && array.length)) {
*****

***** LODASH\RD\57.js
 4699:              }
 4700:              if (isSorted != null && typeof isSorted != 'boolean') {
 4701:                  iteratee = isSorted;
 4702:                  isSorted = false;
 4703:              }
 4704:              var toIteratee = getIteratee();
 4705:              if (!(iteratee == null && toIteratee === baseIteratee)) {
 4706:                  iteratee = toIteratee(iteratee);
 4707:              }
 4708:              return isSorted && getIndexOf() === baseIndexOf ? sortedUniq(array, iteratee) : baseUniq(array, iteratee);
 4709:          }
***** LODASH\RD\ORIGINAL.JS
 4691:              }
 4692:              return isSorted && typeof isSorted == 'boolean' && getIndexOf() === baseIndexOf ? sortedUniq(array) : baseUniq(arra
 4693:  y);
 4694:          }
*****

***** LODASH\RD\57.js
 4710:          /**
 4711:       * This method is like `_.zip` except that it accepts an array of grouped
 4712:       * elements and creates an array regrouping the elements to their pre-zip
 4713:       * configuration.
 4714:       *
***** LODASH\RD\ORIGINAL.JS
 4695:          /**
 4696:       * This method is like `_.uniq` except that it accepts `iteratee` which is
 4697:       * invoked for each element in `array` to generate the criterion by which
 4698:       * uniqueness is computed. The iteratee is invoked with one argument: (value).
 4699:       *
*****

***** LODASH\RD\57.js
 4717:       * @category Array
 4718:       * @param {Array} array The array of grouped elements to process.
 4719:       * @returns {Array} Returns the new array of regrouped elements.
 4720:       * @example
***** LODASH\RD\ORIGINAL.JS
 4702:       * @category Array
 4703:       * @param {Array} array The array to inspect.
 4704:       * @param {boolean} [isSorted] Specify the array is sorted.
 4705:       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 4706:       * @returns {Array} Returns the new duplicate free array.
 4707:       * @example
*****

***** LODASH\RD\57.js
 4721:       *
 4722:       * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
 4723:       * // => [['fred', 30, true], ['barney', 40, false]]
 4724:       *
 4725:       * _.unzip(zipped);
 4726:       * // => [['fred', 'barney'], [30, 40], [true, false]]
 4727:       */
 4728:          function unzip(array) {
 4729:              if (!(array && array.length)) {
***** LODASH\RD\ORIGINAL.JS
 4708:       *
 4709:       * _.uniqBy([1, 2.5, 1.5, 2], function(n) {
 4710:       *   return Math.floor(n);
 4711:       * });
 4712:       * // => [1, 2.5]
 4713:       *
 4714:       * // using the `_.property` callback shorthand
 4715:       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 4716:       * // => [{ 'x': 1 }, { 'x': 2 }]
 4717:       */
 4718:          function uniqBy(array, isSorted, iteratee) {
 4719:              if (!(array && array.length)) {
*****

***** LODASH\RD\57.js
 4731:              }
 4732:              var index = -1, length = 0;
 4733:              array = arrayFilter(array, function (group) {
 4734:                  if (isObject(group) && isArrayLike(group)) {
 4735:                      length = nativeMax(group.length, length);
 4736:                      return true;
 4737:                  }
 4738:              });
 4739:              var result = Array(length);
 4740:              while (++index < length) {
 4741:                  result[index] = arrayMap(array, baseProperty(index));
 4742:              }
 4743:              return result;
 4744:          }
***** LODASH\RD\ORIGINAL.JS
 4721:              }
 4722:              if (isSorted != null && typeof isSorted != 'boolean') {
 4723:                  iteratee = isSorted;
 4724:                  isSorted = false;
 4725:              }
 4726:              var toIteratee = getIteratee();
 4727:              if (!(iteratee == null && toIteratee === baseIteratee)) {
 4728:                  iteratee = toIteratee(iteratee);
 4729:              }
 4730:              return isSorted && getIndexOf() === baseIndexOf ? sortedUniq(array, iteratee) : baseUniq(array, iteratee);
 4731:          }
*****

***** LODASH\RD\57.js
 4745:          /**
 4746:       * This method is like `_.unzip` except that it accepts `iteratee` to specify
 4747:       * how regrouped values should be combined. The iteratee is invoked with four
 4748:       * arguments: (accumulator, value, index, group).
 4749:       *
***** LODASH\RD\ORIGINAL.JS
 4732:          /**
 4733:       * This method is like `_.zip` except that it accepts an array of grouped
 4734:       * elements and creates an array regrouping the elements to their pre-zip
 4735:       * configuration.
 4736:       *
*****

***** LODASH\RD\57.js
 4753:       * @param {Array} array The array of grouped elements to process.
 4754:       * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
 4755:       * @returns {Array} Returns the new array of regrouped elements.
***** LODASH\RD\ORIGINAL.JS
 4740:       * @param {Array} array The array of grouped elements to process.
 4741:       * @returns {Array} Returns the new array of regrouped elements.
*****

***** LODASH\RD\57.js
 4757:       *
 4758:       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
 4759:       * // => [[1, 10, 100], [2, 20, 200]]
 4760:       *
 4761:       * _.unzipWith(zipped, _.add);
 4762:       * // => [3, 30, 300]
 4763:       */
 4764:          function unzipWith(array, iteratee) {
 4765:              if (!(array && array.length)) {
***** LODASH\RD\ORIGINAL.JS
 4743:       *
 4744:       * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
 4745:       * // => [['fred', 30, true], ['barney', 40, false]]
 4746:       *
 4747:       * _.unzip(zipped);
 4748:       * // => [['fred', 'barney'], [30, 40], [true, false]]
 4749:       */
 4750:          function unzip(array) {
 4751:              if (!(array && array.length)) {
*****

***** LODASH\RD\57.js
 4767:              }
 4768:              var result = unzip(array);
 4769:              if (iteratee == null) {
 4770:                  return result;
 4771:              }
 4772:              return arrayMap(result, function (group) {
 4773:                  return arrayReduce(group, iteratee, undefined, true);
 4774:              });
 4775:          }
***** LODASH\RD\ORIGINAL.JS
 4753:              }
 4754:              var index = -1, length = 0;
 4755:              array = arrayFilter(array, function (group) {
 4756:                  if (isObject(group) && isArrayLike(group)) {
 4757:                      length = nativeMax(group.length, length);
 4758:                      return true;
 4759:                  }
 4760:              });
 4761:              var result = Array(length);
 4762:              while (++index < length) {
 4763:                  result[index] = arrayMap(array, baseProperty(index));
 4764:              }
 4765:              return result;
 4766:          }
*****

***** LODASH\RD\57.js
 4776:          /**
 4777:       * Creates an array excluding all provided values using
 4778:       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 4779:       * for equality comparisons.
 4780:       *
***** LODASH\RD\ORIGINAL.JS
 4767:          /**
 4768:       * This method is like `_.unzip` except that it accepts `iteratee` to specify
 4769:       * how regrouped values should be combined. The iteratee is invoked with four
 4770:       * arguments: (accumulator, value, index, group).
 4771:       *
*****

***** LODASH\RD\57.js
 4783:       * @category Array
 4784:       * @param {Array} array The array to filter.
 4785:       * @param {...*} [values] The values to exclude.
 4786:       * @returns {Array} Returns the new array of filtered values.
 4787:       * @example
***** LODASH\RD\ORIGINAL.JS
 4774:       * @category Array
 4775:       * @param {Array} array The array of grouped elements to process.
 4776:       * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
 4777:       * @returns {Array} Returns the new array of regrouped elements.
 4778:       * @example
*****

***** LODASH\RD\57.js
 4788:       *
 4789:       * _.without([1, 2, 1, 3], 1, 2);
 4790:       * // => [3]
 4791:       */
 4792:          var without = restParam(function (array, values) {
 4793:              return isObject(array) && isArrayLike(array) ? baseDifference(array, values) : [];
 4794:          });
 4795:          /**
 4796:       * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
 4797:       * of the provided arrays.
 4798:       *
***** LODASH\RD\ORIGINAL.JS
 4779:       *
 4780:       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
 4781:       * // => [[1, 10, 100], [2, 20, 200]]
 4782:       *
 4783:       * _.unzipWith(zipped, _.add);
 4784:       * // => [3, 30, 300]
 4785:       */
 4786:          function unzipWith(array, iteratee) {
 4787:              if (!(array && array.length)) {
 4788:                  return [];
 4789:              }
 4790:              var result = unzip(array);
 4791:              if (iteratee == null) {
 4792:                  return result;
 4793:              }
 4794:              return arrayMap(result, function (group) {
 4795:                  return arrayReduce(group, iteratee, undefined, true);
 4796:              });
 4797:          }
 4798:          /**
 4799:       * Creates an array excluding all provided values using
 4800:       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 4801:       * for equality comparisons.
 4802:       *
*****

***** LODASH\RD\57.js
 4801:       * @category Array
 4802:       * @param {...Array} [arrays] The arrays to inspect.
 4803:       * @returns {Array} Returns the new array of values.
 4804:       * @example
***** LODASH\RD\ORIGINAL.JS
 4805:       * @category Array
 4806:       * @param {Array} array The array to filter.
 4807:       * @param {...*} [values] The values to exclude.
 4808:       * @returns {Array} Returns the new array of filtered values.
 4809:       * @example
*****

***** LODASH\RD\57.js
 4805:       *
 4806:       * _.xor([1, 2], [4, 2]);
***** LODASH\RD\ORIGINAL.JS
 4810:       *
 4811:       * _.without([1, 2, 1, 3], 1, 2);
 4812:       * // => [3]
 4813:       */
 4814:          var without = restParam(function (array, values) {
 4815:              return isObject(array) && isArrayLike(array) ? baseDifference(array, values) : [];
 4816:          });
 4817:          /**
 4818:       * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
 4819:       * of the provided arrays.
 4820:       *
 4821:       * @static
 4822:       * @memberOf _
 4823:       * @category Array
 4824:       * @param {...Array} [arrays] The arrays to inspect.
 4825:       * @returns {Array} Returns the new array of values.
 4826:       * @example
 4827:       *
 4828:       * _.xor([1, 2], [4, 2]);
*****

