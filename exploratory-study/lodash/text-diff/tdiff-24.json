Comparing files LODASH\RD\24.js and LODASH\RD\ORIGINAL.JS
***** LODASH\RD\24.js
  227:          '7': 'x37',
  228:          '9': 'x39',
***** LODASH\RD\ORIGINAL.JS
  227:          '7': 'x37',
  228:          '8': 'x38',
  229:          '9': 'x39',
*****

***** LODASH\RD\24.js
 3633:          function reorder(array, indexes) {
 3634:              var arrLength = array.length, length = nativeMin(indexes.length), oldArray = copyArray(array);
 3635:              while (length--) {
***** LODASH\RD\ORIGINAL.JS
 3634:          function reorder(array, indexes) {
 3635:              var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
 3636:              while (length--) {
*****

***** LODASH\RD\24.js
 7858:          });
 7859:          var at = restParam(function (object, paths) {
 7860:              return baseAt(object, baseFlatten(paths));
 7861:          });
 7862:          /**
 7863:       * Creates an object that inherits from the given `prototype` object. If a
 7864:       * `properties` object is provided its own enumerable properties are assigned
 7865:       * to the created object.
 7866:       *
***** LODASH\RD\ORIGINAL.JS
 7859:          });
 7860:          /**
 7861:       * Creates an array of values corresponding to `paths` of `object`.
 7862:       *
*****

***** LODASH\RD\24.js
 7869:       * @category Object
 7870:       * @param {Object} prototype The object to inherit from.
 7871:       * @param {Object} [properties] The properties to assign to the object.
 7872:       * @returns {Object} Returns the new object.
 7873:       * @example
***** LODASH\RD\ORIGINAL.JS
 7865:       * @category Object
 7866:       * @param {Object} object The object to iterate over.
 7867:       * @param {...(string|string[])} [paths] The property paths of elements to pick,
 7868:       *  specified individually or in arrays.
 7869:       * @returns {Array} Returns the new array of picked elements.
 7870:       * @example
*****

***** LODASH\RD\24.js
 7874:       *
 7875:       * function Shape() {
***** LODASH\RD\ORIGINAL.JS
 7871:       *
 7872:       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
 7873:       *
 7874:       * _.at(object, ['a[0].b.c', 'a[1]']);
 7875:       * // => [3, 4]
 7876:       *
 7877:       * _.at(['a', 'b', 'c'], 0, 2);
 7878:       * // => ['a', 'c']
 7879:       */
 7880:          var at = restParam(function (object, paths) {
 7881:              return baseAt(object, baseFlatten(paths));
 7882:          });
 7883:          /**
 7884:       * Creates an object that inherits from the given `prototype` object. If a
 7885:       * `properties` object is provided its own enumerable properties are assigned
 7886:       * to the created object.
 7887:       *
 7888:       * @static
 7889:       * @memberOf _
 7890:       * @category Object
 7891:       * @param {Object} prototype The object to inherit from.
 7892:       * @param {Object} [properties] The properties to assign to the object.
 7893:       * @returns {Object} Returns the new object.
 7894:       * @example
 7895:       *
 7896:       * function Shape() {
*****

***** LODASH\RD\24.js
 9846:          }
 9847:          var method = restParam(function (path, args) {
 9848:              return function (object) {
 9849:                  return invokePath(object, path, args);
 9850:              };
 9851:          });
 9852:          /**
 9853:       * The opposite of `_.method`; this method creates a function that invokes
 9854:       * the method at a given path of `object`. Any additional arguments are
 9855:       * provided to the invoked method.
 9856:       *
***** LODASH\RD\ORIGINAL.JS
 9867:          }
 9868:          /**
 9869:       * Creates a function that invokes the method at `path` of a given object.
 9870:       * Any additional arguments are provided to the invoked method.
 9871:       *
*****

***** LODASH\RD\24.js
 9859:       * @category Utility
 9860:       * @param {Object} object The object to query.
 9861:       * @param {...*} [args] The arguments to invoke the method with.
***** LODASH\RD\ORIGINAL.JS
 9874:       * @category Utility
 9875:       * @param {Array|string} path The path of the method to invoke.
 9876:       * @param {...*} [args] The arguments to invoke the method with.
*****

***** LODASH\RD\24.js
 9864:       *
 9865:       * var array = _.times(3, _.constant),
 9866:       *     object = { 'a': array, 'b': array, 'c': array };
 9867:       *
 9868:       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
 9869:       * // => [2, 0]
 9870:       *
 9871:       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
 9872:       * // => [2, 0]
 9873:       */
 9874:          var methodOf = restParam(function (object, args) {
 9875:              return function (path) {
 9876:                  return invokePath(object, path, args);
***** LODASH\RD\ORIGINAL.JS
 9879:       *
 9880:       * var objects = [
 9881:       *   { 'a': { 'b': { 'c': _.constant(2) } } },
 9882:       *   { 'a': { 'b': { 'c': _.constant(1) } } }
 9883:       * ];
 9884:       *
 9885:       * _.map(objects, _.method('a.b.c'));
 9886:       * // => [2, 1]
 9887:       *
 9888:       * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
 9889:       * // => [1, 2]
 9890:       */
 9891:          var method = restParam(function (path, args) {
 9892:              return function (object) {
 9893:                  return invokePath(object, path, args);
*****

***** LODASH\RD\24.js
 9879:          /**
 9880:       * Adds all own enumerable function properties of a source object to the
 9881:       * destination object. If `object` is a function then methods are added to
 9882:       * its prototype as well.
 9883:       *
 9884:       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
 9885:       * avoid conflicts caused by modifying the original.
 9886:       *
***** LODASH\RD\ORIGINAL.JS
 9896:          /**
 9897:       * The opposite of `_.method`; this method creates a function that invokes
 9898:       * the method at a given path of `object`. Any additional arguments are
 9899:       * provided to the invoked method.
 9900:       *
*****

***** LODASH\RD\24.js
 9889:       * @category Utility
 9890:       * @param {Function|Object} [object=lodash] The destination object.
 9891:       * @param {Object} source The object of functions to add.
 9892:       * @param {Object} [options] The options object.
 9893:       * @param {boolean} [options.chain=true] Specify whether the functions added
 9894:       *  are chainable.
 9895:       * @returns {Function|Object} Returns `object`.
 9896:       * @example
***** LODASH\RD\ORIGINAL.JS
 9903:       * @category Utility
 9904:       * @param {Object} object The object to query.
 9905:       * @param {...*} [args] The arguments to invoke the method with.
 9906:       * @returns {Function} Returns the new function.
 9907:       * @example
*****

***** LODASH\RD\24.js
 9897:       *
 9898:       * function vowels(string) {
***** LODASH\RD\ORIGINAL.JS
 9908:       *
 9909:       * var array = _.times(3, _.constant),
 9910:       *     object = { 'a': array, 'b': array, 'c': array };
 9911:       *
 9912:       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
 9913:       * // => [2, 0]
 9914:       *
 9915:       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
 9916:       * // => [2, 0]
 9917:       */
 9918:          var methodOf = restParam(function (object, args) {
 9919:              return function (path) {
 9920:                  return invokePath(object, path, args);
 9921:              };
 9922:          });
 9923:          /**
 9924:       * Adds all own enumerable function properties of a source object to the
 9925:       * destination object. If `object` is a function then methods are added to
 9926:       * its prototype as well.
 9927:       *
 9928:       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
 9929:       * avoid conflicts caused by modifying the original.
 9930:       *
 9931:       * @static
 9932:       * @memberOf _
 9933:       * @category Utility
 9934:       * @param {Function|Object} [object=lodash] The destination object.
 9935:       * @param {Object} source The object of functions to add.
 9936:       * @param {Object} [options] The options object.
 9937:       * @param {boolean} [options.chain=true] Specify whether the functions added
 9938:       *  are chainable.
 9939:       * @returns {Function|Object} Returns `object`.
 9940:       * @example
 9941:       *
 9942:       * function vowels(string) {
*****

