Comparing files LODASH\RD\1.js and LODASH\RD\ORIGINAL.JS
***** LODASH\RD\1.js
  222:          '2': 'x32',
  223:          '4': 'x34',
***** LODASH\RD\ORIGINAL.JS
  222:          '2': 'x32',
  223:          '3': 'x33',
  224:          '4': 'x34',
*****

***** LODASH\RD\1.js
  244:          'u': 'x75',
  245:          'x': 'x78'
***** LODASH\RD\ORIGINAL.JS
  245:          'u': 'x75',
  246:          'v': 'x76',
  247:          'x': 'x78'
*****

***** LODASH\RD\1.js
  461:      }
  462:      function escapeStringChar(chr) {
  463:          return '\\' + stringEscapes[chr];
  464:      }
  465:      /**
  466:     * Gets the index at which the first occurrence of `NaN` is found in `array`.
  467:     *
***** LODASH\RD\ORIGINAL.JS
  463:      }
  464:      /**
  465:     * Used by `_.template` to escape characters for inclusion in compiled string literals.
  466:     *
*****

***** LODASH\RD\1.js
  468:     * @private
  469:     * @param {Array} array The array to search.
***** LODASH\RD\ORIGINAL.JS
  467:     * @private
  468:     * @param {string} chr The matched character to escape.
  469:     * @returns {string} Returns the escaped character.
  470:     */
  471:      function escapeStringChar(chr) {
  472:          return '\\' + stringEscapes[chr];
  473:      }
  474:      /**
  475:     * Gets the index at which the first occurrence of `NaN` is found in `array`.
  476:     *
  477:     * @private
  478:     * @param {Array} array The array to search.
*****

***** LODASH\RD\1.js
  669:          /** Native value references. */
  670:          var ArrayBuffer = context.ArrayBuffer, Reflect = context.Reflect, Set = getNative(context, 'Set'), WeakMap = getNative(
  671:  context, 'WeakMap'), clearTimeout = context.clearTimeout, enumerate = Reflect ? Reflect.enumerate : undefined, getPrototypeOf =
  672:   Object.getPrototypeOf, parseFloat = context.parseFloat, pow = Math.pow, propertyIsEnumerable = objectProto.propertyIsEnumerabl
  673:  e, setTimeout = context.setTimeout, splice = arrayProto.splice;
  674:          /* Native method references for those with the same name as other `lodash` methods. */
***** LODASH\RD\ORIGINAL.JS
  678:          /** Native value references. */
  679:          var ArrayBuffer = context.ArrayBuffer, Reflect = context.Reflect, Set = getNative(context, 'Set'), Uint8Array = context
  680:  .Uint8Array, WeakMap = getNative(context, 'WeakMap'), clearTimeout = context.clearTimeout, enumerate = Reflect ? Reflect.enumer
  681:  ate : undefined, getPrototypeOf = Object.getPrototypeOf, parseFloat = context.parseFloat, pow = Math.pow, propertyIsEnumerable 
  682:  = objectProto.propertyIsEnumerable, setTimeout = context.setTimeout, splice = arrayProto.splice;
  683:          /* Native method references for those with the same name as other `lodash` methods. */
*****

***** LODASH\RD\1.js
 1274:          function arraySome(array, predicate) {
 1275:              var index = -1, length = array.length;
***** LODASH\RD\ORIGINAL.JS
 1283:          /**
 1284:       * A specialized version of `_.some` for arrays without support for callback
 1285:       * shorthands.
 1286:       *
 1287:       * @private
 1288:       * @param {Array} array The array to iterate over.
 1289:       * @param {Function} predicate The function invoked per iteration.
 1290:       * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
 1291:       */
 1292:          function arraySome(array, predicate) {
 1293:              var index = -1, length = array.length;
*****

***** LODASH\RD\1.js
 2070:              var result = {};
 2071:              baseForIn(object, function (value, key) {
 2072:                  if (predicate(value, key, object)) {
***** LODASH\RD\ORIGINAL.JS
 2088:              var result = {};
 2089:              baseForIn(object, function (value, key, object) {
 2090:                  if (predicate(value, key, object)) {
*****

***** LODASH\RD\1.js
 2741:                  case 6:
 2742:                      return new Ctor(args[0], args[1], args[2], args[3], args[4]);
 2743:                  case 7:
***** LODASH\RD\ORIGINAL.JS
 2759:                  case 6:
 2760:                      return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
 2761:                  case 7:
*****

***** LODASH\RD\1.js
 3538:              if (!(isCommon || isCombo)) {
 3539:                  return;
 3540:              }
***** LODASH\RD\ORIGINAL.JS
 3556:              if (!(isCommon || isCombo)) {
 3557:                  return data;
 3558:              }
*****

***** LODASH\RD\1.js
 4199:          }
 4200:          function lastIndexOf(array, value, fromIndex) {
***** LODASH\RD\ORIGINAL.JS
 4217:          }
 4218:          /**
 4219:       * This method is like `_.indexOf` except that it iterates over elements of
 4220:       * `array` from right to left.
 4221:       *
 4222:       * @static
 4223:       * @memberOf _
 4224:       * @category Array
 4225:       * @param {Array} array The array to search.
 4226:       * @param {*} value The value to search for.
 4227:       * @param {boolean|number} [fromIndex=array.length-1] The index to search from
 4228:       *  or `true` to perform a binary search on a sorted array.
 4229:       * @returns {number} Returns the index of the matched value, else `-1`.
 4230:       * @example
 4231:       *
 4232:       * _.lastIndexOf([1, 2, 1, 2], 2);
 4233:       * // => 3
 4234:       *
 4235:       * // using `fromIndex`
 4236:       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
 4237:       * // => 1
 4238:       *
 4239:       * // performing a binary search
 4240:       * _.lastIndexOf([1, 1, 2, 2], 2, true);
 4241:       * // => 3
 4242:       */
 4243:          function lastIndexOf(array, value, fromIndex) {
*****

***** LODASH\RD\1.js
 4226:          }
 4227:          function pull() {
 4228:              var args = arguments, array = args[0];
 4229:              if (!(array && array.length)) {
 4230:                  return array;
 4231:              }
 4232:              var index = 0, indexOf = getIndexOf(), length = args.length;
 4233:              while (++index < length) {
 4234:                  var fromIndex = 0, value = args[index];
 4235:                  while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
 4236:                      splice.call(array, fromIndex, 1);
 4237:                  }
 4238:              }
 4239:              return array;
 4240:          }
 4241:          /**
 4242:       * Removes elements from `array` corresponding to `indexes` and returns an
 4243:       * array of removed elements.
 4244:       *
 4245:       * **Note:** Unlike `_.at`, this method mutates `array`.
 4246:       *
***** LODASH\RD\ORIGINAL.JS
 4269:          }
 4270:          /**
 4271:       * Removes all provided values from `array` using
 4272:       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 4273:       * for equality comparisons.
 4274:       *
 4275:       * **Note:** Unlike `_.without`, this method mutates `array`.
 4276:       *
*****

***** LODASH\RD\1.js
 4250:       * @param {Array} array The array to modify.
 4251:       * @param {...(number|number[])} [indexes] The indexes of elements to remove,
 4252:       *  specified individually or in arrays.
 4253:       * @returns {Array} Returns the new array of removed elements.
 4254:       * @example
***** LODASH\RD\ORIGINAL.JS
 4280:       * @param {Array} array The array to modify.
 4281:       * @param {...*} [values] The values to remove.
 4282:       * @returns {Array} Returns `array`.
 4283:       * @example
*****

***** LODASH\RD\1.js
 4255:       *
 4256:       * var array = [5, 10, 15, 20];
 4257:       * var evens = _.pullAt(array, 1, 3);
 4258:       *
 4259:       * console.log(array);
 4260:       * // => [5, 15]
 4261:       *
 4262:       * console.log(evens);
 4263:       * // => [10, 20]
 4264:       */
 4265:          var pullAt = restParam(function (array, indexes) {
 4266:              indexes = arrayMap(baseFlatten(indexes), String);
 4267:              var result = baseAt(array, indexes);
 4268:              basePullAt(array, indexes.sort(compareAscending));
 4269:              return result;
 4270:          });
 4271:          /**
 4272:       * Removes all elements from `array` that `predicate` returns truthy for
 4273:       * and returns an array of the removed elements. The predicate is invoked with
 4274:       * three arguments: (value, index, array).
 4275:       *
 4276:       * **Note:** Unlike `_.filter`, this method mutates `array`.
 4277:       *
***** LODASH\RD\ORIGINAL.JS
 4284:       *
 4285:       * var array = [1, 2, 3, 1, 2, 3];
 4286:       *
 4287:       * _.pull(array, 2, 3);
 4288:       * console.log(array);
 4289:       * // => [1, 1]
 4290:       */
 4291:          function pull() {
 4292:              var args = arguments, array = args[0];
 4293:              if (!(array && array.length)) {
 4294:                  return array;
 4295:              }
 4296:              var index = 0, indexOf = getIndexOf(), length = args.length;
 4297:              while (++index < length) {
 4298:                  var fromIndex = 0, value = args[index];
 4299:                  while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
 4300:                      splice.call(array, fromIndex, 1);
 4301:                  }
 4302:              }
 4303:              return array;
 4304:          }
 4305:          /**
 4306:       * Removes elements from `array` corresponding to `indexes` and returns an
 4307:       * array of removed elements.
 4308:       *
 4309:       * **Note:** Unlike `_.at`, this method mutates `array`.
 4310:       *
*****

***** LODASH\RD\1.js
 4281:       * @param {Array} array The array to modify.
 4282:       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 4283:       * @returns {Array} Returns the new array of removed elements.
***** LODASH\RD\ORIGINAL.JS
 4314:       * @param {Array} array The array to modify.
 4315:       * @param {...(number|number[])} [indexes] The indexes of elements to remove,
 4316:       *  specified individually or in arrays.
 4317:       * @returns {Array} Returns the new array of removed elements.
*****

***** LODASH\RD\1.js
 4285:       *
 4286:       * var array = [1, 2, 3, 4];
 4287:       * var evens = _.remove(array, function(n) {
 4288:       *   return n % 2 == 0;
 4289:       * });
 4290:       *
***** LODASH\RD\ORIGINAL.JS
 4319:       *
 4320:       * var array = [5, 10, 15, 20];
 4321:       * var evens = _.pullAt(array, 1, 3);
 4322:       *
*****

***** LODASH\RD\1.js
 4291:       * console.log(array);
 4292:       * // => [1, 3]
 4293:       *
***** LODASH\RD\ORIGINAL.JS
 4323:       * console.log(array);
 4324:       * // => [5, 15]
 4325:       *
*****

***** LODASH\RD\1.js
 4294:       * console.log(evens);
 4295:       * // => [2, 4]
 4296:       */
 4297:          function remove(array, predicate) {
 4298:              var result = [];
 4299:              if (!(array && array.length)) {
 4300:                  return result;
 4301:              }
 4302:              var index = -1, indexes = [], length = array.length;
 4303:              predicate = getIteratee(predicate);
 4304:              while (++index < length) {
 4305:                  var value = array[index];
 4306:                  if (predicate(value, index, array)) {
 4307:                      result.push(value);
 4308:                      indexes.push(index);
 4309:                  }
 4310:              }
 4311:              basePullAt(array, indexes);
 4312:              return result;
 4313:          }
 4314:          /**
 4315:       * Gets all but the first element of `array`.
 4316:       *
***** LODASH\RD\ORIGINAL.JS
 4326:       * console.log(evens);
 4327:       * // => [10, 20]
 4328:       */
 4329:          var pullAt = restParam(function (array, indexes) {
 4330:              indexes = arrayMap(baseFlatten(indexes), String);
 4331:              var result = baseAt(array, indexes);
 4332:              basePullAt(array, indexes.sort(compareAscending));
 4333:              return result;
 4334:          });
 4335:          /**
 4336:       * Removes all elements from `array` that `predicate` returns truthy for
 4337:       * and returns an array of the removed elements. The predicate is invoked with
 4338:       * three arguments: (value, index, array).
 4339:       *
 4340:       * **Note:** Unlike `_.filter`, this method mutates `array`.
 4341:       *
*****

***** LODASH\RD\1.js
 4319:       * @category Array
 4320:       * @param {Array} array The array to query.
 4321:       * @returns {Array} Returns the slice of `array`.
 4322:       * @example
***** LODASH\RD\ORIGINAL.JS
 4344:       * @category Array
 4345:       * @param {Array} array The array to modify.
 4346:       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 4347:       * @returns {Array} Returns the new array of removed elements.
 4348:       * @example
*****

***** LODASH\RD\1.js
 4323:       *
 4324:       * _.rest([1, 2, 3]);
 4325:       * // => [2, 3]
 4326:       */
 4327:          function rest(array) {
 4328:              return drop(array, 1);
 4329:          }
***** LODASH\RD\ORIGINAL.JS
 4349:       *
 4350:       * var array = [1, 2, 3, 4];
 4351:       * var evens = _.remove(array, function(n) {
 4352:       *   return n % 2 == 0;
 4353:       * });
 4354:       *
 4355:       * console.log(array);
 4356:       * // => [1, 3]
 4357:       *
 4358:       * console.log(evens);
 4359:       * // => [2, 4]
 4360:       */
 4361:          function remove(array, predicate) {
 4362:              var result = [];
 4363:              if (!(array && array.length)) {
 4364:                  return result;
 4365:              }
 4366:              var index = -1, indexes = [], length = array.length;
 4367:              predicate = getIteratee(predicate);
 4368:              while (++index < length) {
 4369:                  var value = array[index];
 4370:                  if (predicate(value, index, array)) {
 4371:                      result.push(value);
 4372:                      indexes.push(index);
 4373:                  }
 4374:              }
 4375:              basePullAt(array, indexes);
 4376:              return result;
 4377:          }
*****

***** LODASH\RD\1.js
 4330:          /**
 4331:       * Creates a slice of `array` from `start` up to, but not including, `end`.
 4332:       *
 4333:       * **Note:** This method is used instead of `Array#slice` to ensure dense
 4334:       * arrays are returned.
 4335:       *
***** LODASH\RD\ORIGINAL.JS
 4378:          /**
 4379:       * Gets all but the first element of `array`.
 4380:       *
*****

***** LODASH\RD\1.js
 4338:       * @category Array
 4339:       * @param {Array} array The array to slice.
 4340:       * @param {number} [start=0] The start position.
 4341:       * @param {number} [end=array.length] The end position.
 4342:       * @returns {Array} Returns the slice of `array`.
 4343:       */
 4344:          function slice(array, start, end) {
 4345:              var length = array ? array.length : 0;
 4346:              if (!length) {
 4347:                  return [];
 4348:              }
 4349:              if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
 4350:                  start = 0;
 4351:                  end = length;
 4352:              }
 4353:              return baseSlice(array, start, end);
 4354:          }
***** LODASH\RD\ORIGINAL.JS
 4383:       * @category Array
 4384:       * @param {Array} array The array to query.
 4385:       * @returns {Array} Returns the slice of `array`.
 4386:       * @example
 4387:       *
 4388:       * _.rest([1, 2, 3]);
 4389:       * // => [2, 3]
 4390:       */
 4391:          function rest(array) {
 4392:              return drop(array, 1);
 4393:          }
*****

***** LODASH\RD\1.js
 4355:          /**
 4356:       * Uses a binary search to determine the lowest index at which `value` should
 4357:       * be inserted into `array` in order to maintain its sort order.
 4358:       *
***** LODASH\RD\ORIGINAL.JS
 4394:          /**
 4395:       * Creates a slice of `array` from `start` up to, but not including, `end`.
 4396:       *
 4397:       * **Note:** This method is used instead of `Array#slice` to ensure dense
 4398:       * arrays are returned.
 4399:       *
*****

***** LODASH\RD\1.js
 4361:       * @category Array
 4362:       * @param {Array} array The sorted array to inspect.
 4363:       * @param {*} value The value to evaluate.
 4364:       * @returns {number} Returns the index at which `value` should be inserted into `array`.
 4365:       * @example
 4366:       *
 4367:       * _.sortedIndex([30, 50], 40);
 4368:       * // => 1
 4369:       *
 4370:       * _.sortedIndex([4, 5], 4);
 4371:       * // => 0
 4372:       */
 4373:          function sortedIndex(array, value) {
 4374:              return binaryIndex(array, value);
 4375:          }
***** LODASH\RD\ORIGINAL.JS
 4402:       * @category Array
 4403:       * @param {Array} array The array to slice.
 4404:       * @param {number} [start=0] The start position.
 4405:       * @param {number} [end=array.length] The end position.
 4406:       * @returns {Array} Returns the slice of `array`.
 4407:       */
 4408:          function slice(array, start, end) {
 4409:              var length = array ? array.length : 0;
 4410:              if (!length) {
 4411:                  return [];
 4412:              }
 4413:              if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
 4414:                  start = 0;
 4415:                  end = length;
 4416:              }
 4417:              return baseSlice(array, start, end);
 4418:          }
*****

***** LODASH\RD\1.js
 4376:          /**
 4377:       * This method is like `_.sortedIndex` except that it accepts `iteratee`
 4378:       * which is invoked for `value` and each element of `array` to compute their
 4379:       * sort ranking. The iteratee is invoked with one argument: (value).
 4380:       *
***** LODASH\RD\ORIGINAL.JS
 4419:          /**
 4420:       * Uses a binary search to determine the lowest index at which `value` should
 4421:       * be inserted into `array` in order to maintain its sort order.
 4422:       *
*****

***** LODASH\RD\1.js
 4385:       * @param {*} value The value to evaluate.
 4386:       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 4387:       * @returns {number} Returns the index at which `value` should be inserted into `array`.
***** LODASH\RD\ORIGINAL.JS
 4427:       * @param {*} value The value to evaluate.
 4428:       * @returns {number} Returns the index at which `value` should be inserted into `array`.
*****

***** LODASH\RD\1.js
 4389:       *
 4390:       * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
 4391:       *
 4392:       * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
 4393:       * // => 1
***** LODASH\RD\ORIGINAL.JS
 4430:       *
 4431:       * _.sortedIndex([30, 50], 40);
 4432:       * // => 1
*****

***** LODASH\RD\1.js
 4394:       *
 4395:       * // using the `_.property` callback shorthand
 4396:       * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
 4397:       * // => 0
***** LODASH\RD\ORIGINAL.JS
 4433:       *
 4434:       * _.sortedIndex([4, 5], 4);
 4435:       * // => 0
*****

***** LODASH\RD\1.js
 4398:       */
 4399:          function sortedIndexBy(array, value, iteratee) {
 4400:              return binaryIndexBy(array, value, getIteratee(iteratee));
 4401:          }
***** LODASH\RD\ORIGINAL.JS
 4436:       */
 4437:          function sortedIndex(array, value) {
 4438:              return binaryIndex(array, value);
 4439:          }
*****

***** LODASH\RD\1.js
 4402:          /**
 4403:       * This method is like `_.sortedIndex` except that it returns the highest
 4404:       * index at which `value` should be inserted into `array` in order to
 4405:       * maintain its sort order.
 4406:       *
***** LODASH\RD\ORIGINAL.JS
 4440:          /**
 4441:       * This method is like `_.sortedIndex` except that it accepts `iteratee`
 4442:       * which is invoked for `value` and each element of `array` to compute their
 4443:       * sort ranking. The iteratee is invoked with one argument: (value).
 4444:       *
*****

***** LODASH\RD\1.js
 4411:       * @param {*} value The value to evaluate.
 4412:       * @returns {number} Returns the index at which `value` should be inserted into `array`.
***** LODASH\RD\ORIGINAL.JS
 4449:       * @param {*} value The value to evaluate.
 4450:       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 4451:       * @returns {number} Returns the index at which `value` should be inserted into `array`.
*****

***** LODASH\RD\1.js
 4414:       *
 4415:       * _.sortedLastIndex([4, 5], 4);
 4416:       * // => 1
 4417:       */
 4418:          function sortedLastIndex(array, value) {
 4419:              return binaryIndex(array, value, true);
 4420:          }
***** LODASH\RD\ORIGINAL.JS
 4453:       *
 4454:       * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };
 4455:       *
 4456:       * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));
 4457:       * // => 1
 4458:       *
 4459:       * // using the `_.property` callback shorthand
 4460:       * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
 4461:       * // => 0
 4462:       */
 4463:          function sortedIndexBy(array, value, iteratee) {
 4464:              return binaryIndexBy(array, value, getIteratee(iteratee));
 4465:          }
*****

***** LODASH\RD\1.js
 4421:          /**
 4422:       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
 4423:       * which is invoked for `value` and each element of `array` to compute their
 4424:       * sort ranking. The iteratee is invoked with one argument: (value).
 4425:       *
***** LODASH\RD\ORIGINAL.JS
 4466:          /**
 4467:       * This method is like `_.sortedIndex` except that it returns the highest
 4468:       * index at which `value` should be inserted into `array` in order to
 4469:       * maintain its sort order.
 4470:       *
*****

***** LODASH\RD\1.js
 4430:       * @param {*} value The value to evaluate.
 4431:       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 4432:       * @returns {number} Returns the index at which `value` should be inserted into `array`.
***** LODASH\RD\ORIGINAL.JS
 4475:       * @param {*} value The value to evaluate.
 4476:       * @returns {number} Returns the index at which `value` should be inserted into `array`.
*****

***** LODASH\RD\1.js
 4434:       *
 4435:       * // using the `_.property` callback shorthand
 4436:       * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
 4437:       * // => 1
***** LODASH\RD\ORIGINAL.JS
 4478:       *
 4479:       * _.sortedLastIndex([4, 5], 4);
 4480:       * // => 1
*****

***** LODASH\RD\1.js
 4438:       */
 4439:          function sortedLastIndexBy(array, value, iteratee) {
 4440:              return binaryIndexBy(array, value, getIteratee(iteratee), true);
 4441:          }
***** LODASH\RD\ORIGINAL.JS
 4481:       */
 4482:          function sortedLastIndex(array, value) {
 4483:              return binaryIndex(array, value, true);
 4484:          }
*****

***** LODASH\RD\1.js
 4442:          /**
 4443:       * Creates a slice of `array` with `n` elements taken from the beginning.
 4444:       *
***** LODASH\RD\ORIGINAL.JS
 4485:          /**
 4486:       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
 4487:       * which is invoked for `value` and each element of `array` to compute their
 4488:       * sort ranking. The iteratee is invoked with one argument: (value).
 4489:       *
*****

***** LODASH\RD\1.js
 4447:       * @category Array
 4448:       * @param {Array} array The array to query.
 4449:       * @param {number} [n=1] The number of elements to take.
 4450:       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
 4451:       * @returns {Array} Returns the slice of `array`.
 4452:       * @example
***** LODASH\RD\ORIGINAL.JS
 4492:       * @category Array
 4493:       * @param {Array} array The sorted array to inspect.
 4494:       * @param {*} value The value to evaluate.
 4495:       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 4496:       * @returns {number} Returns the index at which `value` should be inserted into `array`.
 4497:       * @example
*****

***** LODASH\RD\1.js
 4453:       *
 4454:       * _.take([1, 2, 3]);
 4455:       * // => [1]
 4456:       *
 4457:       * _.take([1, 2, 3], 2);
 4458:       * // => [1, 2]
 4459:       *
 4460:       * _.take([1, 2, 3], 5);
 4461:       * // => [1, 2, 3]
 4462:       *
 4463:       * _.take([1, 2, 3], 0);
 4464:       * // => []
 4465:       */
 4466:          function take(array, n, guard) {
 4467:              if (!(array && array.length)) {
 4468:                  return [];
 4469:              }
 4470:              n = guard || n == null ? 1 : n;
 4471:              return baseSlice(array, 0, n < 0 ? 0 : n);
 4472:          }
***** LODASH\RD\ORIGINAL.JS
 4498:       *
 4499:       * // using the `_.property` callback shorthand
 4500:       * _.sortedLastIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');
 4501:       * // => 1
 4502:       */
 4503:          function sortedLastIndexBy(array, value, iteratee) {
 4504:              return binaryIndexBy(array, value, getIteratee(iteratee), true);
 4505:          }
*****

***** LODASH\RD\1.js
 4473:          /**
 4474:       * Creates a slice of `array` with `n` elements taken from the end.
 4475:       *
***** LODASH\RD\ORIGINAL.JS
 4506:          /**
 4507:       * Creates a slice of `array` with `n` elements taken from the beginning.
 4508:       *
*****

***** LODASH\RD\1.js
 4484:       *
 4485:       * _.takeRight([1, 2, 3]);
 4486:       * // => [3]
 4487:       *
 4488:       * _.takeRight([1, 2, 3], 2);
 4489:       * // => [2, 3]
 4490:       *
 4491:       * _.takeRight([1, 2, 3], 5);
 4492:       * // => [1, 2, 3]
***** LODASH\RD\ORIGINAL.JS
 4517:       *
 4518:       * _.take([1, 2, 3]);
 4519:       * // => [1]
 4520:       *
 4521:       * _.take([1, 2, 3], 2);
 4522:       * // => [1, 2]
 4523:       *
 4524:       * _.take([1, 2, 3], 5);
 4525:       * // => [1, 2, 3]
*****

***** LODASH\RD\1.js
 4493:       *
 4494:       * _.takeRight([1, 2, 3], 0);
 4495:       * // => []
***** LODASH\RD\ORIGINAL.JS
 4526:       *
 4527:       * _.take([1, 2, 3], 0);
 4528:       * // => []
*****

***** LODASH\RD\1.js
 4496:       */
 4497:          function takeRight(array, n, guard) {
 4498:              var length = array ? array.length : 0;
 4499:              if (!length) {
 4500:                  return [];
***** LODASH\RD\ORIGINAL.JS
 4529:       */
 4530:          function take(array, n, guard) {
 4531:              if (!(array && array.length)) {
 4532:                  return [];
*****

***** LODASH\RD\1.js
 4501:              }
 4502:              n = guard || n == null ? 1 : toInteger(n);
 4503:              n = length - n;
 4504:              return baseSlice(array, n < 0 ? 0 : n);
 4505:          }
***** LODASH\RD\ORIGINAL.JS
 4533:              }
 4534:              n = guard || n == null ? 1 : n;
 4535:              return baseSlice(array, 0, n < 0 ? 0 : n);
 4536:          }
*****

***** LODASH\RD\1.js
 4506:          /**
 4507:       * Creates a slice of `array` with elements taken from the end. Elements are
 4508:       * taken until `predicate` returns falsey. The predicate is invoked with three
 4509:       * arguments: (value, index, array).
 4510:       *
***** LODASH\RD\ORIGINAL.JS
 4537:          /**
 4538:       * Creates a slice of `array` with `n` elements taken from the end.
 4539:       *
*****

***** LODASH\RD\1.js
 4514:       * @param {Array} array The array to query.
 4515:       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 4516:       * @returns {Array} Returns the slice of `array`.
***** LODASH\RD\ORIGINAL.JS
 4543:       * @param {Array} array The array to query.
 4544:       * @param {number} [n=1] The number of elements to take.
 4545:       * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
 4546:       * @returns {Array} Returns the slice of `array`.
*****

***** LODASH\RD\1.js
 4518:       *
 4519:       * var resolve = _.partial(_.map, _, 'user');
 4520:       *
 4521:       * var users = [
 4522:       *   { 'user': 'barney',  'active': true },
 4523:       *   { 'user': 'fred',    'active': false },
 4524:       *   { 'user': 'pebbles', 'active': false }
 4525:       * ];
 4526:       *
 4527:       * resolve( _.takeRightWhile(users, function(o) { return !o.active; }) );
 4528:       * // => ['fred', 'pebbles']
 4529:       *
 4530:       * // using the `_.matches` callback shorthand
 4531:       * resolve( _.takeRightWhile(users, { 'user': 'pebbles', 'active': false }) );
 4532:       * // => ['pebbles']
 4533:       *
 4534:       * // using the `_.matchesProperty` callback shorthand
 4535:       * resolve( _.takeRightWhile(users, ['active', false]) );
 4536:       * // => ['fred', 'pebbles']
 4537:       *
 4538:       * // using the `_.property` callback shorthand
 4539:       * resolve( _.takeRightWhile(users, 'active') );
 4540:       * // => []
***** LODASH\RD\ORIGINAL.JS
 4548:       *
 4549:       * _.takeRight([1, 2, 3]);
 4550:       * // => [3]
 4551:       *
 4552:       * _.takeRight([1, 2, 3], 2);
 4553:       * // => [2, 3]
 4554:       *
 4555:       * _.takeRight([1, 2, 3], 5);
 4556:       * // => [1, 2, 3]
 4557:       *
 4558:       * _.takeRight([1, 2, 3], 0);
 4559:       * // => []
*****

***** LODASH\RD\1.js
 4541:       */
 4542:          function takeRightWhile(array, predicate) {
 4543:              return array && array.length ? baseWhile(array, getIteratee(predicate), false, true) : [];
 4544:          }
***** LODASH\RD\ORIGINAL.JS
 4560:       */
 4561:          function takeRight(array, n, guard) {
 4562:              var length = array ? array.length : 0;
 4563:              if (!length) {
 4564:                  return [];
 4565:              }
 4566:              n = guard || n == null ? 1 : toInteger(n);
 4567:              n = length - n;
 4568:              return baseSlice(array, n < 0 ? 0 : n);
 4569:          }
*****

***** LODASH\RD\1.js
 4545:          /**
 4546:       * Creates a slice of `array` with elements taken from the beginning. Elements
 4547:       * are taken until `predicate` returns falsey. The predicate is invoked with
 4548:       * three arguments: (value, index, array).
 4549:       *
***** LODASH\RD\ORIGINAL.JS
 4570:          /**
 4571:       * Creates a slice of `array` with elements taken from the end. Elements are
 4572:       * taken until `predicate` returns falsey. The predicate is invoked with three
 4573:       * arguments: (value, index, array).
 4574:       *
*****

***** LODASH\RD\1.js
 4560:       * var users = [
 4561:       *   { 'user': 'barney',  'active': false },
 4562:       *   { 'user': 'fred',    'active': false},
 4563:       *   { 'user': 'pebbles', 'active': true }
 4564:       * ];
***** LODASH\RD\ORIGINAL.JS
 4585:       * var users = [
 4586:       *   { 'user': 'barney',  'active': true },
 4587:       *   { 'user': 'fred',    'active': false },
 4588:       *   { 'user': 'pebbles', 'active': false }
 4589:       * ];
*****

***** LODASH\RD\1.js
 4565:       *
 4566:       * resolve( _.takeWhile(users, function(o) { return !o.active; }) );
 4567:       * // => ['barney', 'fred']
 4568:       *
***** LODASH\RD\ORIGINAL.JS
 4590:       *
 4591:       * resolve( _.takeRightWhile(users, function(o) { return !o.active; }) );
 4592:       * // => ['fred', 'pebbles']
 4593:       *
*****

***** LODASH\RD\1.js
 4569:       * // using the `_.matches` callback shorthand
 4570:       * resolve( _.takeWhile(users, { 'user': 'barney', 'active': false }) );
 4571:       * // => ['barney']
 4572:       *
***** LODASH\RD\ORIGINAL.JS
 4594:       * // using the `_.matches` callback shorthand
 4595:       * resolve( _.takeRightWhile(users, { 'user': 'pebbles', 'active': false }) );
 4596:       * // => ['pebbles']
 4597:       *
*****

***** LODASH\RD\1.js
 4573:       * // using the `_.matchesProperty` callback shorthand
 4574:       * resolve( _.takeWhile(users, ['active', false]) );
 4575:       * // => ['barney', 'fred']
 4576:       *
***** LODASH\RD\ORIGINAL.JS
 4598:       * // using the `_.matchesProperty` callback shorthand
 4599:       * resolve( _.takeRightWhile(users, ['active', false]) );
 4600:       * // => ['fred', 'pebbles']
 4601:       *
*****

***** LODASH\RD\1.js
 4577:       * // using the `_.property` callback shorthand
 4578:       * resolve( _.takeWhile(users, 'active') );
 4579:       * // => []
***** LODASH\RD\ORIGINAL.JS
 4602:       * // using the `_.property` callback shorthand
 4603:       * resolve( _.takeRightWhile(users, 'active') );
 4604:       * // => []
*****

***** LODASH\RD\1.js
 4580:       */
 4581:          function takeWhile(array, predicate) {
 4582:              return array && array.length ? baseWhile(array, getIteratee(predicate)) : [];
 4583:          }
***** LODASH\RD\ORIGINAL.JS
 4605:       */
 4606:          function takeRightWhile(array, predicate) {
 4607:              return array && array.length ? baseWhile(array, getIteratee(predicate), false, true) : [];
 4608:          }
*****

***** LODASH\RD\1.js
 4584:          /**
 4585:       * Creates an array of unique values, in order, from all of the provided arrays
 4586:       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 4587:       * for equality comparisons.
 4588:       *
***** LODASH\RD\ORIGINAL.JS
 4609:          /**
 4610:       * Creates a slice of `array` with elements taken from the beginning. Elements
 4611:       * are taken until `predicate` returns falsey. The predicate is invoked with
 4612:       * three arguments: (value, index, array).
 4613:       *
*****

***** LODASH\RD\1.js
 4591:       * @category Array
 4592:       * @param {...Array} [arrays] The arrays to inspect.
 4593:       * @returns {Array} Returns the new array of combined values.
 4594:       * @example
***** LODASH\RD\ORIGINAL.JS
 4616:       * @category Array
 4617:       * @param {Array} array The array to query.
 4618:       * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
 4619:       * @returns {Array} Returns the slice of `array`.
 4620:       * @example
*****

***** LODASH\RD\1.js
 4595:       *
 4596:       * _.union([1, 2], [4, 2], [2, 1]);
 4597:       * // => [1, 2, 4]
 4598:       */
 4599:          var union = restParam(function (arrays) {
 4600:              return baseUniq(baseFlatten(arrays, false, true));
 4601:          });
 4602:          /**
 4603:       * Creates a duplicate-free version of an array, using
 4604:       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 4605:       * for equality comparisons, in which only the first occurence of each element
 4606:       * is kept. Providing `true` for `isSorted` performs a faster search algorithm
 4607:       * for sorted arrays.
 4608:       *
***** LODASH\RD\ORIGINAL.JS
 4621:       *
 4622:       * var resolve = _.partial(_.map, _, 'user');
 4623:       *
 4624:       * var users = [
 4625:       *   { 'user': 'barney',  'active': false },
 4626:       *   { 'user': 'fred',    'active': false},
 4627:       *   { 'user': 'pebbles', 'active': true }
 4628:       * ];
 4629:       *
 4630:       * resolve( _.takeWhile(users, function(o) { return !o.active; }) );
 4631:       * // => ['barney', 'fred']
 4632:       *
 4633:       * // using the `_.matches` callback shorthand
 4634:       * resolve( _.takeWhile(users, { 'user': 'barney', 'active': false }) );
 4635:       * // => ['barney']
 4636:       *
 4637:       * // using the `_.matchesProperty` callback shorthand
 4638:       * resolve( _.takeWhile(users, ['active', false]) );
 4639:       * // => ['barney', 'fred']
 4640:       *
 4641:       * // using the `_.property` callback shorthand
 4642:       * resolve( _.takeWhile(users, 'active') );
 4643:       * // => []
 4644:       */
 4645:          function takeWhile(array, predicate) {
 4646:              return array && array.length ? baseWhile(array, getIteratee(predicate)) : [];
 4647:          }
 4648:          /**
 4649:       * Creates an array of unique values, in order, from all of the provided arrays
 4650:       * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 4651:       * for equality comparisons.
 4652:       *
*****

***** LODASH\RD\1.js
 4611:       * @category Array
 4612:       * @param {Array} array The array to inspect.
 4613:       * @param {boolean} [isSorted] Specify the array is sorted.
 4614:       * @returns {Array} Returns the new duplicate free array.
 4615:       * @example
***** LODASH\RD\ORIGINAL.JS
 4655:       * @category Array
 4656:       * @param {...Array} [arrays] The arrays to inspect.
 4657:       * @returns {Array} Returns the new array of combined values.
 4658:       * @example
*****

***** LODASH\RD\1.js
 4616:       *
 4617:       * _.uniq([2, 1, 2]);
 4618:       * // => [2, 1]
 4619:       *
 4620:       * // using `isSorted`
 4621:       * _.uniq([1, 1, 2], true);
 4622:       * // => [1, 2]
 4623:       */
 4624:          function uniq(array, isSorted) {
 4625:              if (!(array && array.length)) {
 4626:                  return [];
 4627:              }
 4628:              return isSorted && typeof isSorted == 'boolean' && getIndexOf() === baseIndexOf ? sortedUniq(array) : baseUniq(arra
 4629:  y);
 4630:          }
 4631:          /**
 4632:       * This method is like `_.uniq` except that it accepts `iteratee` which is
 4633:       * invoked for each element in `array` to generate the criterion by which
 4634:       * uniqueness is computed. The iteratee is invoked with one argument: (value).
 4635:       *
***** LODASH\RD\ORIGINAL.JS
 4659:       *
 4660:       * _.union([1, 2], [4, 2], [2, 1]);
 4661:       * // => [1, 2, 4]
 4662:       */
 4663:          var union = restParam(function (arrays) {
 4664:              return baseUniq(baseFlatten(arrays, false, true));
 4665:          });
 4666:          /**
 4667:       * Creates a duplicate-free version of an array, using
 4668:       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 4669:       * for equality comparisons, in which only the first occurence of each element
 4670:       * is kept. Providing `true` for `isSorted` performs a faster search algorithm
 4671:       * for sorted arrays.
 4672:       *
*****

***** LODASH\RD\1.js
 4640:       * @param {boolean} [isSorted] Specify the array is sorted.
 4641:       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 4642:       * @returns {Array} Returns the new duplicate free array.
***** LODASH\RD\ORIGINAL.JS
 4677:       * @param {boolean} [isSorted] Specify the array is sorted.
 4678:       * @returns {Array} Returns the new duplicate free array.
*****

***** LODASH\RD\1.js
 4644:       *
 4645:       * _.uniqBy([1, 2.5, 1.5, 2], function(n) {
 4646:       *   return Math.floor(n);
 4647:       * });
 4648:       * // => [1, 2.5]
 4649:       *
 4650:       * // using the `_.property` callback shorthand
 4651:       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 4652:       * // => [{ 'x': 1 }, { 'x': 2 }]
 4653:       */
 4654:          function uniqBy(array, isSorted, iteratee) {
 4655:              if (!(array && array.length)) {
***** LODASH\RD\ORIGINAL.JS
 4680:       *
 4681:       * _.uniq([2, 1, 2]);
 4682:       * // => [2, 1]
 4683:       *
 4684:       * // using `isSorted`
 4685:       * _.uniq([1, 1, 2], true);
 4686:       * // => [1, 2]
 4687:       */
 4688:          function uniq(array, isSorted) {
 4689:              if (!(array && array.length)) {
*****

***** LODASH\RD\1.js
 4657:              }
 4658:              if (isSorted != null && typeof isSorted != 'boolean') {
 4659:                  iteratee = isSorted;
 4660:                  isSorted = false;
 4661:              }
 4662:              var toIteratee = getIteratee();
 4663:              if (!(iteratee == null && toIteratee === baseIteratee)) {
 4664:                  iteratee = toIteratee(iteratee);
 4665:              }
 4666:              return isSorted && getIndexOf() === baseIndexOf ? sortedUniq(array, iteratee) : baseUniq(array, iteratee);
 4667:          }
***** LODASH\RD\ORIGINAL.JS
 4691:              }
 4692:              return isSorted && typeof isSorted == 'boolean' && getIndexOf() === baseIndexOf ? sortedUniq(array) : baseUniq(arra
 4693:  y);
 4694:          }
*****

***** LODASH\RD\1.js
 4668:          /**
 4669:       * This method is like `_.zip` except that it accepts an array of grouped
 4670:       * elements and creates an array regrouping the elements to their pre-zip
 4671:       * configuration.
 4672:       *
***** LODASH\RD\ORIGINAL.JS
 4695:          /**
 4696:       * This method is like `_.uniq` except that it accepts `iteratee` which is
 4697:       * invoked for each element in `array` to generate the criterion by which
 4698:       * uniqueness is computed. The iteratee is invoked with one argument: (value).
 4699:       *
*****

***** LODASH\RD\1.js
 4675:       * @category Array
 4676:       * @param {Array} array The array of grouped elements to process.
 4677:       * @returns {Array} Returns the new array of regrouped elements.
 4678:       * @example
***** LODASH\RD\ORIGINAL.JS
 4702:       * @category Array
 4703:       * @param {Array} array The array to inspect.
 4704:       * @param {boolean} [isSorted] Specify the array is sorted.
 4705:       * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
 4706:       * @returns {Array} Returns the new duplicate free array.
 4707:       * @example
*****

***** LODASH\RD\1.js
 4679:       *
 4680:       * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
 4681:       * // => [['fred', 30, true], ['barney', 40, false]]
 4682:       *
 4683:       * _.unzip(zipped);
 4684:       * // => [['fred', 'barney'], [30, 40], [true, false]]
 4685:       */
 4686:          function unzip(array) {
 4687:              if (!(array && array.length)) {
***** LODASH\RD\ORIGINAL.JS
 4708:       *
 4709:       * _.uniqBy([1, 2.5, 1.5, 2], function(n) {
 4710:       *   return Math.floor(n);
 4711:       * });
 4712:       * // => [1, 2.5]
 4713:       *
 4714:       * // using the `_.property` callback shorthand
 4715:       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 4716:       * // => [{ 'x': 1 }, { 'x': 2 }]
 4717:       */
 4718:          function uniqBy(array, isSorted, iteratee) {
 4719:              if (!(array && array.length)) {
*****

***** LODASH\RD\1.js
 4689:              }
 4690:              var index = -1, length = 0;
 4691:              array = arrayFilter(array, function (group) {
 4692:                  if (isObject(group) && isArrayLike(group)) {
 4693:                      length = nativeMax(group.length, length);
 4694:                      return true;
 4695:                  }
 4696:              });
 4697:              var result = Array(length);
 4698:              while (++index < length) {
 4699:                  result[index] = arrayMap(array, baseProperty(index));
 4700:              }
 4701:              return result;
 4702:          }
***** LODASH\RD\ORIGINAL.JS
 4721:              }
 4722:              if (isSorted != null && typeof isSorted != 'boolean') {
 4723:                  iteratee = isSorted;
 4724:                  isSorted = false;
 4725:              }
 4726:              var toIteratee = getIteratee();
 4727:              if (!(iteratee == null && toIteratee === baseIteratee)) {
 4728:                  iteratee = toIteratee(iteratee);
 4729:              }
 4730:              return isSorted && getIndexOf() === baseIndexOf ? sortedUniq(array, iteratee) : baseUniq(array, iteratee);
 4731:          }
*****

***** LODASH\RD\1.js
 4703:          /**
 4704:       * This method is like `_.unzip` except that it accepts `iteratee` to specify
 4705:       * how regrouped values should be combined. The iteratee is invoked with four
 4706:       * arguments: (accumulator, value, index, group).
 4707:       *
***** LODASH\RD\ORIGINAL.JS
 4732:          /**
 4733:       * This method is like `_.zip` except that it accepts an array of grouped
 4734:       * elements and creates an array regrouping the elements to their pre-zip
 4735:       * configuration.
 4736:       *
*****

***** LODASH\RD\1.js
 4711:       * @param {Array} array The array of grouped elements to process.
 4712:       * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
 4713:       * @returns {Array} Returns the new array of regrouped elements.
***** LODASH\RD\ORIGINAL.JS
 4740:       * @param {Array} array The array of grouped elements to process.
 4741:       * @returns {Array} Returns the new array of regrouped elements.
*****

***** LODASH\RD\1.js
 4715:       *
 4716:       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
 4717:       * // => [[1, 10, 100], [2, 20, 200]]
 4718:       *
 4719:       * _.unzipWith(zipped, _.add);
 4720:       * // => [3, 30, 300]
 4721:       */
 4722:          function unzipWith(array, iteratee) {
 4723:              if (!(array && array.length)) {
***** LODASH\RD\ORIGINAL.JS
 4743:       *
 4744:       * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
 4745:       * // => [['fred', 30, true], ['barney', 40, false]]
 4746:       *
 4747:       * _.unzip(zipped);
 4748:       * // => [['fred', 'barney'], [30, 40], [true, false]]
 4749:       */
 4750:          function unzip(array) {
 4751:              if (!(array && array.length)) {
*****

***** LODASH\RD\1.js
 4725:              }
 4726:              var result = unzip(array);
 4727:              if (iteratee == null) {
 4728:                  return result;
 4729:              }
 4730:              return arrayMap(result, function (group) {
 4731:                  return arrayReduce(group, iteratee, undefined, true);
 4732:              });
 4733:          }
***** LODASH\RD\ORIGINAL.JS
 4753:              }
 4754:              var index = -1, length = 0;
 4755:              array = arrayFilter(array, function (group) {
 4756:                  if (isObject(group) && isArrayLike(group)) {
 4757:                      length = nativeMax(group.length, length);
 4758:                      return true;
 4759:                  }
 4760:              });
 4761:              var result = Array(length);
 4762:              while (++index < length) {
 4763:                  result[index] = arrayMap(array, baseProperty(index));
 4764:              }
 4765:              return result;
 4766:          }
*****

***** LODASH\RD\1.js
 4734:          /**
 4735:       * Creates an array excluding all provided values using
 4736:       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 4737:       * for equality comparisons.
 4738:       *
***** LODASH\RD\ORIGINAL.JS
 4767:          /**
 4768:       * This method is like `_.unzip` except that it accepts `iteratee` to specify
 4769:       * how regrouped values should be combined. The iteratee is invoked with four
 4770:       * arguments: (accumulator, value, index, group).
 4771:       *
*****

***** LODASH\RD\1.js
 4741:       * @category Array
 4742:       * @param {Array} array The array to filter.
 4743:       * @param {...*} [values] The values to exclude.
 4744:       * @returns {Array} Returns the new array of filtered values.
 4745:       * @example
***** LODASH\RD\ORIGINAL.JS
 4774:       * @category Array
 4775:       * @param {Array} array The array of grouped elements to process.
 4776:       * @param {Function} [iteratee=_.identity] The function to combine regrouped values.
 4777:       * @returns {Array} Returns the new array of regrouped elements.
 4778:       * @example
*****

***** LODASH\RD\1.js
 4746:       *
 4747:       * _.without([1, 2, 1, 3], 1, 2);
 4748:       * // => [3]
 4749:       */
 4750:          var without = restParam(function (array, values) {
 4751:              return isObject(array) && isArrayLike(array) ? baseDifference(array, values) : [];
 4752:          });
 4753:          /**
 4754:       * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
 4755:       * of the provided arrays.
 4756:       *
***** LODASH\RD\ORIGINAL.JS
 4779:       *
 4780:       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
 4781:       * // => [[1, 10, 100], [2, 20, 200]]
 4782:       *
 4783:       * _.unzipWith(zipped, _.add);
 4784:       * // => [3, 30, 300]
 4785:       */
 4786:          function unzipWith(array, iteratee) {
 4787:              if (!(array && array.length)) {
 4788:                  return [];
 4789:              }
 4790:              var result = unzip(array);
 4791:              if (iteratee == null) {
 4792:                  return result;
 4793:              }
 4794:              return arrayMap(result, function (group) {
 4795:                  return arrayReduce(group, iteratee, undefined, true);
 4796:              });
 4797:          }
 4798:          /**
 4799:       * Creates an array excluding all provided values using
 4800:       * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
 4801:       * for equality comparisons.
 4802:       *
*****

***** LODASH\RD\1.js
 4759:       * @category Array
 4760:       * @param {...Array} [arrays] The arrays to inspect.
 4761:       * @returns {Array} Returns the new array of values.
 4762:       * @example
***** LODASH\RD\ORIGINAL.JS
 4805:       * @category Array
 4806:       * @param {Array} array The array to filter.
 4807:       * @param {...*} [values] The values to exclude.
 4808:       * @returns {Array} Returns the new array of filtered values.
 4809:       * @example
*****

***** LODASH\RD\1.js
 4763:       *
 4764:       * _.xor([1, 2], [4, 2]);
***** LODASH\RD\ORIGINAL.JS
 4810:       *
 4811:       * _.without([1, 2, 1, 3], 1, 2);
 4812:       * // => [3]
 4813:       */
 4814:          var without = restParam(function (array, values) {
 4815:              return isObject(array) && isArrayLike(array) ? baseDifference(array, values) : [];
 4816:          });
 4817:          /**
 4818:       * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
 4819:       * of the provided arrays.
 4820:       *
 4821:       * @static
 4822:       * @memberOf _
 4823:       * @category Array
 4824:       * @param {...Array} [arrays] The arrays to inspect.
 4825:       * @returns {Array} Returns the new array of values.
 4826:       * @example
 4827:       *
 4828:       * _.xor([1, 2], [4, 2]);
*****

***** LODASH\RD\1.js
10828:      else if (freeExports && freeModule) {
10829:      } else {
***** LODASH\RD\ORIGINAL.JS
10892:      else if (freeExports && freeModule) {
10893:          // Export for Node.js or RingoJS.
10894:          if (moduleExports) {
10895:              (freeModule.exports = _)._ = _;
10896:          }    // Export for Rhino with CommonJS support.
10897:          else {
10898:              freeExports._ = _;
10899:          }
10900:      } else {
*****

