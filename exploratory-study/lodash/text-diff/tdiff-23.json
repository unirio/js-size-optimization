Comparing files LODASH\RD\23.js and LODASH\RD\ORIGINAL.JS
***** LODASH\RD\23.js
 1773:              if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
 1774:              }
***** LODASH\RD\ORIGINAL.JS
 1773:              if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
 1774:                  return value !== value && other !== other;
 1775:              }
*****

***** LODASH\RD\23.js
 2793:  4].length && data[9] == 1) {
 2794:                          wrapper = wrapper[getFuncName(data[0])].apply(wrapper);
 2795:                      } else {
***** LODASH\RD\ORIGINAL.JS
 2794:  4].length && data[9] == 1) {
 2795:                          wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
 2796:                      } else {
*****

***** LODASH\RD\23.js
 3283:                      end = nativeMin(end, start + size);
 3284:                  case 'takeRight':
***** LODASH\RD\ORIGINAL.JS
 3284:                      end = nativeMin(end, start + size);
 3285:                      break;
 3286:                  case 'takeRight':
*****

***** LODASH\RD\23.js
 6348:                  leading = !!options.leading;
 6349:                  maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0);
 6350:                  trailing = 'trailing' in options ? !!options.trailing : trailing;
***** LODASH\RD\ORIGINAL.JS
 6350:                  leading = !!options.leading;
 6351:                  maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
 6352:                  trailing = 'trailing' in options ? !!options.trailing : trailing;
*****

***** LODASH\RD\23.js
 7601:          }
 7602:          function isPlainObject(value) {
 7603:              if (!isObjectLike(value) || objToString.call(value) != objectTag || isHostObject(value)) {
 7604:                  return false;
 7605:              }
 7606:              var proto = typeof value.constructor == 'function' ? getPrototypeOf(value) : objectProto;
 7607:              if (proto === null) {
 7608:                  return true;
 7609:              }
 7610:              var Ctor = proto.constructor;
 7611:              return typeof Ctor == 'function' && Ctor instanceof Ctor && fnToString.call(Ctor) == objCtorString;
 7612:          }
 7613:          /**
 7614:       * Checks if `value` is classified as a `RegExp` object.
 7615:       *
***** LODASH\RD\ORIGINAL.JS
 7603:          }
 7604:          /**
 7605:       * Checks if `value` is a plain object, that is, an object created by the
 7606:       * `Object` constructor or one with a `[[Prototype]]` of `null`.
 7607:       *
*****

***** LODASH\RD\23.js
 7619:       * @param {*} value The value to check.
 7620:       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 7621:       * @example
***** LODASH\RD\ORIGINAL.JS
 7611:       * @param {*} value The value to check.
 7612:       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 7613:       * @example
*****

***** LODASH\RD\23.js
 7622:       *
 7623:       * _.isRegExp(/abc/);
 7624:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7614:       *
 7615:       * function Foo() {
 7616:       *   this.a = 1;
 7617:       * }
 7618:       *
 7619:       * _.isPlainObject(new Foo);
 7620:       * // => false
 7621:       *
 7622:       * _.isPlainObject([1, 2, 3]);
 7623:       * // => false
 7624:       *
 7625:       * _.isPlainObject({ 'x': 0, 'y': 0 });
 7626:       * // => true
*****

***** LODASH\RD\23.js
 7625:       *
 7626:       * _.isRegExp('/abc/');
 7627:       * // => false
 7628:       */
 7629:          function isRegExp(value) {
 7630:              return isObject(value) && objToString.call(value) == regexpTag;
 7631:          }
***** LODASH\RD\ORIGINAL.JS
 7627:       *
 7628:       * _.isPlainObject(Object.create(null));
 7629:       * // => true
 7630:       */
 7631:          function isPlainObject(value) {
 7632:              if (!isObjectLike(value) || objToString.call(value) != objectTag || isHostObject(value)) {
 7633:                  return false;
 7634:              }
 7635:              var proto = typeof value.constructor == 'function' ? getPrototypeOf(value) : objectProto;
 7636:              if (proto === null) {
 7637:                  return true;
 7638:              }
 7639:              var Ctor = proto.constructor;
 7640:              return typeof Ctor == 'function' && Ctor instanceof Ctor && fnToString.call(Ctor) == objCtorString;
 7641:          }
*****

***** LODASH\RD\23.js
 7632:          /**
 7633:       * Checks if `value` is classified as a `String` primitive or object.
 7634:       *
***** LODASH\RD\ORIGINAL.JS
 7642:          /**
 7643:       * Checks if `value` is classified as a `RegExp` object.
 7644:       *
*****

***** LODASH\RD\23.js
 7641:       *
 7642:       * _.isString('abc');
 7643:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7651:       *
 7652:       * _.isRegExp(/abc/);
 7653:       * // => true
*****

***** LODASH\RD\23.js
 7644:       *
 7645:       * _.isString(1);
 7646:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7654:       *
 7655:       * _.isRegExp('/abc/');
 7656:       * // => false
*****

***** LODASH\RD\23.js
 7647:       */
 7648:          function isString(value) {
 7649:              return typeof value == 'string' || isObjectLike(value) && objToString.call(value) == stringTag;
 7650:          }
***** LODASH\RD\ORIGINAL.JS
 7657:       */
 7658:          function isRegExp(value) {
 7659:              return isObject(value) && objToString.call(value) == regexpTag;
 7660:          }
*****

***** LODASH\RD\23.js
 7651:          /**
 7652:       * Checks if `value` is classified as a typed array.
 7653:       *
***** LODASH\RD\ORIGINAL.JS
 7661:          /**
 7662:       * Checks if `value` is classified as a `String` primitive or object.
 7663:       *
*****

***** LODASH\RD\23.js
 7660:       *
 7661:       * _.isTypedArray(new Uint8Array);
 7662:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7670:       *
 7671:       * _.isString('abc');
 7672:       * // => true
*****

***** LODASH\RD\23.js
 7663:       *
 7664:       * _.isTypedArray([]);
 7665:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7673:       *
 7674:       * _.isString(1);
 7675:       * // => false
*****

***** LODASH\RD\23.js
 7666:       */
 7667:          function isTypedArray(value) {
 7668:              return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
 7669:          }
***** LODASH\RD\ORIGINAL.JS
 7676:       */
 7677:          function isString(value) {
 7678:              return typeof value == 'string' || isObjectLike(value) && objToString.call(value) == stringTag;
 7679:          }
*****

***** LODASH\RD\23.js
 7670:          /**
 7671:       * Checks if `value` is `undefined`.
 7672:       *
***** LODASH\RD\ORIGINAL.JS
 7680:          /**
 7681:       * Checks if `value` is classified as a typed array.
 7682:       *
*****

***** LODASH\RD\23.js
 7676:       * @param {*} value The value to check.
 7677:       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 7678:       * @example
***** LODASH\RD\ORIGINAL.JS
 7686:       * @param {*} value The value to check.
 7687:       * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 7688:       * @example
*****

***** LODASH\RD\23.js
 7679:       *
 7680:       * _.isUndefined(void 0);
 7681:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7689:       *
 7690:       * _.isTypedArray(new Uint8Array);
 7691:       * // => true
*****

***** LODASH\RD\23.js
 7682:       *
 7683:       * _.isUndefined(null);
 7684:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7692:       *
 7693:       * _.isTypedArray([]);
 7694:       * // => false
*****

***** LODASH\RD\23.js
 7685:       */
 7686:          function isUndefined(value) {
 7687:              return value === undefined;
 7688:          }
***** LODASH\RD\ORIGINAL.JS
 7695:       */
 7696:          function isTypedArray(value) {
 7697:              return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
 7698:          }
*****

***** LODASH\RD\23.js
 7689:          /**
 7690:       * Checks if `value` is less than `other`.
 7691:       *
***** LODASH\RD\ORIGINAL.JS
 7699:          /**
 7700:       * Checks if `value` is `undefined`.
 7701:       *
*****

***** LODASH\RD\23.js
 7694:       * @category Lang
 7695:       * @param {*} value The value to compare.
 7696:       * @param {*} other The other value to compare.
 7697:       * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
 7698:       * @example
***** LODASH\RD\ORIGINAL.JS
 7704:       * @category Lang
 7705:       * @param {*} value The value to check.
 7706:       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 7707:       * @example
*****

***** LODASH\RD\23.js
 7699:       *
 7700:       * _.lt(1, 3);
 7701:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7708:       *
 7709:       * _.isUndefined(void 0);
 7710:       * // => true
*****

***** LODASH\RD\23.js
 7702:       *
 7703:       * _.lt(3, 3);
 7704:       * // => false
 7705:       *
 7706:       * _.lt(3, 1);
 7707:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7711:       *
 7712:       * _.isUndefined(null);
 7713:       * // => false
*****

***** LODASH\RD\23.js
 7708:       */
 7709:          function lt(value, other) {
 7710:              return value < other;
 7711:          }
***** LODASH\RD\ORIGINAL.JS
 7714:       */
 7715:          function isUndefined(value) {
 7716:              return value === undefined;
 7717:          }
*****

***** LODASH\RD\23.js
 7712:          /**
 7713:       * Checks if `value` is less than or equal to `other`.
 7714:       *
***** LODASH\RD\ORIGINAL.JS
 7718:          /**
 7719:       * Checks if `value` is less than `other`.
 7720:       *
*****

***** LODASH\RD\23.js
 7719:       * @param {*} other The other value to compare.
 7720:       * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
 7721:       * @example
***** LODASH\RD\ORIGINAL.JS
 7725:       * @param {*} other The other value to compare.
 7726:       * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
 7727:       * @example
*****

***** LODASH\RD\23.js
 7722:       *
 7723:       * _.lte(1, 3);
 7724:       * // => true
***** LODASH\RD\ORIGINAL.JS
 7728:       *
 7729:       * _.lt(1, 3);
 7730:       * // => true
*****

***** LODASH\RD\23.js
 7725:       *
 7726:       * _.lte(3, 3);
 7727:       * // => true
 7728:       *
 7729:       * _.lte(3, 1);
 7730:       * // => false
***** LODASH\RD\ORIGINAL.JS
 7731:       *
 7732:       * _.lt(3, 3);
 7733:       * // => false
 7734:       *
 7735:       * _.lt(3, 1);
 7736:       * // => false
*****

***** LODASH\RD\23.js
 7731:       */
 7732:          function lte(value, other) {
 7733:              return value <= other;
 7734:          }
***** LODASH\RD\ORIGINAL.JS
 7737:       */
 7738:          function lt(value, other) {
 7739:              return value < other;
 7740:          }
*****

***** LODASH\RD\23.js
 7735:          /**
 7736:       * Converts `value` to an array.
 7737:       *
***** LODASH\RD\ORIGINAL.JS
 7741:          /**
 7742:       * Checks if `value` is less than or equal to `other`.
 7743:       *
*****

***** LODASH\RD\23.js
 7740:       * @category Lang
 7741:       * @param {*} value The value to convert.
 7742:       * @returns {Array} Returns the converted array.
 7743:       * @example
***** LODASH\RD\ORIGINAL.JS
 7746:       * @category Lang
 7747:       * @param {*} value The value to compare.
 7748:       * @param {*} other The other value to compare.
 7749:       * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
 7750:       * @example
*****

***** LODASH\RD\23.js
 7744:       *
 7745:       * (function() {
 7746:       *   return _.toArray(arguments).slice(1);
 7747:       * }(1, 2, 3));
 7748:       * // => [2, 3]
 7749:       */
 7750:          function toArray(value) {
 7751:              if (!isArrayLike(value)) {
 7752:                  return values(value);
 7753:              }
 7754:              return value.length ? copyArray(value) : [];
 7755:          }
***** LODASH\RD\ORIGINAL.JS
 7751:       *
 7752:       * _.lte(1, 3);
 7753:       * // => true
 7754:       *
 7755:       * _.lte(3, 3);
 7756:       * // => true
 7757:       *
 7758:       * _.lte(3, 1);
 7759:       * // => false
 7760:       */
 7761:          function lte(value, other) {
 7762:              return value <= other;
 7763:          }
*****

***** LODASH\RD\23.js
 7756:          /**
 7757:       * Converts `value` to a plain object flattening inherited enumerable
 7758:       * properties of `value` to own properties of the plain object.
 7759:       *
***** LODASH\RD\ORIGINAL.JS
 7764:          /**
 7765:       * Converts `value` to an array.
 7766:       *
*****

***** LODASH\RD\23.js
 7763:       * @param {*} value The value to convert.
 7764:       * @returns {Object} Returns the converted plain object.
 7765:       * @example
***** LODASH\RD\ORIGINAL.JS
 7770:       * @param {*} value The value to convert.
 7771:       * @returns {Array} Returns the converted array.
 7772:       * @example
*****

***** LODASH\RD\23.js
 7766:       *
 7767:       * function Foo() {
***** LODASH\RD\ORIGINAL.JS
 7773:       *
 7774:       * (function() {
 7775:       *   return _.toArray(arguments).slice(1);
 7776:       * }(1, 2, 3));
 7777:       * // => [2, 3]
 7778:       */
 7779:          function toArray(value) {
 7780:              if (!isArrayLike(value)) {
 7781:                  return values(value);
 7782:              }
 7783:              return value.length ? copyArray(value) : [];
 7784:          }
 7785:          /**
 7786:       * Converts `value` to a plain object flattening inherited enumerable
 7787:       * properties of `value` to own properties of the plain object.
 7788:       *
 7789:       * @static
 7790:       * @memberOf _
 7791:       * @category Lang
 7792:       * @param {*} value The value to convert.
 7793:       * @returns {Object} Returns the converted plain object.
 7794:       * @example
 7795:       *
 7796:       * function Foo() {
*****

***** LODASH\RD\23.js
 9960:          }
 9961:          function noConflict() {
 9962:              root._ = oldDash;
 9963:              return this;
 9964:          }
 9965:          /**
 9966:       * A no-operation function that returns `undefined` regardless of the
 9967:       * arguments it receives.
 9968:       *
***** LODASH\RD\ORIGINAL.JS
 9989:          }
 9990:          /**
 9991:       * Reverts the `_` variable to its previous value and returns a reference to
 9992:       * the `lodash` function.
 9993:       *
*****

***** LODASH\RD\23.js
 9971:       * @category Utility
 9972:       * @example
***** LODASH\RD\ORIGINAL.JS
 9996:       * @category Utility
 9997:       * @returns {Function} Returns the `lodash` function.
 9998:       * @example
*****

***** LODASH\RD\23.js
 9973:       *
 9974:       * var object = { 'user': 'fred' };
 9975:       *
 9976:       * _.noop(object) === undefined;
 9977:       * // => true
 9978:       */
 9979:          function noop() {
 9980:          }
***** LODASH\RD\ORIGINAL.JS
 9999:       *
10000:       * var lodash = _.noConflict();
10001:       */
10002:          function noConflict() {
10003:              root._ = oldDash;
10004:              return this;
10005:          }
*****

***** LODASH\RD\23.js
 9981:          /**
 9982:       * Creates a function that returns the value at `path` of a given object.
 9983:       *
***** LODASH\RD\ORIGINAL.JS
10006:          /**
10007:       * A no-operation function that returns `undefined` regardless of the
10008:       * arguments it receives.
10009:       *
*****

***** LODASH\RD\23.js
 9986:       * @category Utility
 9987:       * @param {Array|string} path The path of the property to get.
 9988:       * @returns {Function} Returns the new function.
 9989:       * @example
***** LODASH\RD\ORIGINAL.JS
10012:       * @category Utility
10013:       * @example
*****

***** LODASH\RD\23.js
 9990:       *
 9991:       * var objects = [
 9992:       *   { 'a': { 'b': { 'c': 2 } } },
 9993:       *   { 'a': { 'b': { 'c': 1 } } }
 9994:       * ];
 9995:       *
 9996:       * _.map(objects, _.property('a.b.c'));
 9997:       * // => [2, 1]
 9998:       *
 9999:       * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
10000:       * // => [1, 2]
10001:       */
10002:          function property(path) {
10003:              return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
10004:          }
***** LODASH\RD\ORIGINAL.JS
10014:       *
10015:       * var object = { 'user': 'fred' };
10016:       *
10017:       * _.noop(object) === undefined;
10018:       * // => true
10019:       */
10020:          function noop() {
10021:          }
*****

***** LODASH\RD\23.js
10005:          /**
10006:       * The opposite of `_.property`; this method creates a function that returns
10007:       * the value at a given path of `object`.
10008:       *
***** LODASH\RD\ORIGINAL.JS
10022:          /**
10023:       * Creates a function that returns the value at `path` of a given object.
10024:       *
*****

***** LODASH\RD\23.js
10011:       * @category Utility
10012:       * @param {Object} object The object to query.
10013:       * @returns {Function} Returns the new function.
***** LODASH\RD\ORIGINAL.JS
10027:       * @category Utility
10028:       * @param {Array|string} path The path of the property to get.
10029:       * @returns {Function} Returns the new function.
*****

***** LODASH\RD\23.js
10015:       *
10016:       * var array = [0, 1, 2],
10017:       *     object = { 'a': array, 'b': array, 'c': array };
10018:       *
10019:       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
10020:       * // => [2, 0]
10021:       *
10022:       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
10023:       * // => [2, 0]
10024:       */
10025:          function propertyOf(object) {
10026:              return function (path) {
10027:                  return object == null ? undefined : baseGet(object, path);
10028:              };
10029:          }
***** LODASH\RD\ORIGINAL.JS
10031:       *
10032:       * var objects = [
10033:       *   { 'a': { 'b': { 'c': 2 } } },
10034:       *   { 'a': { 'b': { 'c': 1 } } }
10035:       * ];
10036:       *
10037:       * _.map(objects, _.property('a.b.c'));
10038:       * // => [2, 1]
10039:       *
10040:       * _.map(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
10041:       * // => [1, 2]
10042:       */
10043:          function property(path) {
10044:              return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
10045:          }
*****

***** LODASH\RD\23.js
10030:          /**
10031:       * Creates an array of numbers (positive and/or negative) progressing from
10032:       * `start` up to, but not including, `end`. If `end` is not specified it's
10033:       * set to `start` with `start` then set to `0`. If `end` is less than `start`
10034:       * a zero-length range is created unless a negative `step` is specified.
10035:       *
***** LODASH\RD\ORIGINAL.JS
10046:          /**
10047:       * The opposite of `_.property`; this method creates a function that returns
10048:       * the value at a given path of `object`.
10049:       *
*****

***** LODASH\RD\23.js
10038:       * @category Utility
10039:       * @param {number} [start=0] The start of the range.
10040:       * @param {number} end The end of the range.
10041:       * @param {number} [step=1] The value to increment or decrement by.
10042:       * @returns {Array} Returns the new array of numbers.
10043:       * @example
***** LODASH\RD\ORIGINAL.JS
10052:       * @category Utility
10053:       * @param {Object} object The object to query.
10054:       * @returns {Function} Returns the new function.
10055:       * @example
*****

***** LODASH\RD\23.js
10044:       *
10045:       * _.range(4);
***** LODASH\RD\ORIGINAL.JS
10056:       *
10057:       * var array = [0, 1, 2],
10058:       *     object = { 'a': array, 'b': array, 'c': array };
10059:       *
10060:       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
10061:       * // => [2, 0]
10062:       *
10063:       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
10064:       * // => [2, 0]
10065:       */
10066:          function propertyOf(object) {
10067:              return function (path) {
10068:                  return object == null ? undefined : baseGet(object, path);
10069:              };
10070:          }
10071:          /**
10072:       * Creates an array of numbers (positive and/or negative) progressing from
10073:       * `start` up to, but not including, `end`. If `end` is not specified it's
10074:       * set to `start` with `start` then set to `0`. If `end` is less than `start`
10075:       * a zero-length range is created unless a negative `step` is specified.
10076:       *
10077:       * @static
10078:       * @memberOf _
10079:       * @category Utility
10080:       * @param {number} [start=0] The start of the range.
10081:       * @param {number} end The end of the range.
10082:       * @param {number} [step=1] The value to increment or decrement by.
10083:       * @returns {Array} Returns the new array of numbers.
10084:       * @example
10085:       *
10086:       * _.range(4);
*****

